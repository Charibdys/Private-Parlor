{"repository_name":"privateparlor","body":"# privateparlor\n\n## Archived - See [PrivateParlorXT](https://github.com/Private-Parlor/Private-Parlor-XT) for Updates \n### This repository has been archived, and is likely outdated. Development has moved to [PrivateParlorXT](https://github.com/Private-Parlor/Private-Parlor-XT)\n\n\nA rewrite of [secretlounge-ng](https://github.com/secretlounge/secretlounge-ng), a bot to make an anonymous group chat on Telegram. \nWritten in Crystal with the aim of being a fast, memory efficient, and featureful alternative.\n\nUsing the [Tourmaline](https://github.com/protoncr/tourmaline) Telegram bot library.\n\n[Updates posted on Telegram](https://t.me/privateparlor)\n## Installation\n\nCompiling PrivateParlor requires having both `crystal` and `shards` installed.\n\n~~~\ngit clone https://github.com/Charibdys/Private-Parlor.git\ncd privateparlor\nshards install\nshards build --release\n~~~\n\n## BotFather Setup\n1. Start a conversation with [BotFather](https://t.me/botfather)\n2. Make a new bot with `/newbot` and answer the prompts\n3. `/setprivacy`: enabled\n4. `/setjoingroups`: disabled\n5. `/setcommands`: paste the following command list here\n\n### Command list\n\n~~~\nstart - Join the chat (start receiving messages)\nstop - Leave the chat (stop receiving messages)\nleave - Alias of stop\ninfo - Get info about your account\nusers - Show the number of users in the chat\nversion - Get the version and a link to the source code\ntogglekarma - Toggle karma notifications\ntoggledebug - Toggle debug mode (sends messages back to you)\ntripcode - Set or view your tripcode\nrules - Show the rules of this chat\nsign - Sign a message with your username\ntsign - Sign a message with your tripcode\ns - Alias of sign\nt - Alias of tsign\n~~~\n\nCommands can also be registered with BotFather in the config file. These commands will overwrite the command list above.\n\n## Usage\n\n1. Rename `config.yaml.copy` to `config.yaml`\n2. Edit config file, it should at least have the API token for your bot and a path to a SQLite database\n3. Run the binary found in `bin/`\n\n## Development\n\nThe following features are planned and being worked on:\n\n- [x] Relay message types\n\t- [x] Text\n\t- [x] Photos\n\t- [X] Albums\n\t- [x] Videos\n\t- [x] Files/Documents\n\t- [x] GIFs\n\t- [x] Stickers\n\t- [x] Polls\n\t- [x] Locations/Venues\n\t- [x] Contacts\n\t- [x] Forwards\n- [x] Admin commands\n\t- [X] Delete\n\t- [X] Delete all\n\t- [X] Remove\n\t- [X] Warn\n\t- [X] Uncooldown\n\t- [X] Setting rules/MOTD\n\t- [X] User info\n\t- [X] Blacklist\n\t- [X] Promotion \n\t- [X] Demotion \n- [x] Message history/cache\n- [X] Karma\n\t- [X] Upvotes\n\t- [X] Downvotes\n- [x] Message queue\n- [x] Spam prevention\n- [X] Configuration\n\t- [X] Configurable roles and command permissions \n\t- [X] Configurable cache contents/data\n\t- [x] Configurable cache life\n\t- [x] Configurable time and content limits for spam filter\n- [x] Inactivity timeout\n- [x] CLI tools and utility scripts\n- [x] ROBOT 9000 Auto Moderator\n\n## Contributing\n\nOpen tasks and current planned features can be found in this repo's project, [Private Parlor Development](https://github.com/users/Charibdys/projects/1)\n\nIf you would like to make a contribution, follow these steps:\n\n1. Fork it (<https://github.com/Charibdys/Private-Parlor/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\nEnsure that your code is documented and follows the [Crystal API coding style](https://crystal-lang.org/reference/1.6/conventions/coding_style.html).\n\n## Contributors\n\n- [Charybdis](https://gitlab.com/Charibdys) - creator and maintainer\n","program":{"html_id":"privateparlor/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"privateparlor","program":true,"enum":false,"alias":false,"const":false,"constants":[{"id":"DATABASES","name":"DATABASES","value":"Hash(String, DB::Database).new"},{"id":"VERSION","name":"VERSION","value":"\"1.1\""}],"class_methods":[{"html_id":"ban_user(identity:Int64):Nil-class-method","name":"ban_user","abstract":false,"args":[{"name":"identity","external_name":"identity","restriction":"Int64"}],"args_string":"(identity : Int64) : Nil","args_html":"(identity : Int64) : Nil","location":{"filename":"src/management.cr","line_number":252,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L252"},"def":{"name":"ban_user","args":[{"name":"identity","external_name":"identity","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nDATABASES.each do |name, db|\n  if DatabaseWarden.find_user(db, identity, name)\n    DatabaseWarden.ban_user(db, identity, name)\n    puts(\"Banned user #{identity} in \\\"#{name}\\\" database\")\n  else\n    DatabaseWarden.create_banned_user(db, identity, name)\n    puts(\"Added entry for banned user #{identity} in \\\"#{name}\\\" database\")\n  end\nend\n"}},{"html_id":"ban_user(identity:String):Nil-class-method","name":"ban_user","abstract":false,"args":[{"name":"identity","external_name":"identity","restriction":"String"}],"args_string":"(identity : String) : Nil","args_html":"(identity : String) : Nil","location":{"filename":"src/management.cr","line_number":270,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L270"},"def":{"name":"ban_user","args":[{"name":"identity","external_name":"identity","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nDATABASES.each do |name, db|\n  if DatabaseWarden.find_user(db, identity, name)\n    DatabaseWarden.ban_user(db, identity, name)\n    puts(\"Banned user #{identity} in \\\"#{name}\\\" database\")\n  else\n    STDERR.puts(\"ERROR: Could not find user #{identity} in \\\"#{name}\\\" database.\")\n  end\nend\n"}},{"html_id":"find_database(path:String):Nil-class-method","name":"find_database","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(path : String) : Nil","args_html":"(path : String) : Nil","location":{"filename":"src/management.cr","line_number":127,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L127"},"def":{"name":"find_database","args":[{"name":"path","external_name":"path","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if File.directory?(path)\n  STDERR.puts(\"ERROR: Path to a directory was given\")\n  exit(1)\nend\nif (Path[path].extension == \".db\") || (Path[path].extension == \".sqlite\")\nelse\n  STDERR.puts(\"ERROR: Expected database path to end in \\\".db\\\" or \\\".sqlite\\\"\")\n  exit(1)\nend\nname = Path[path].stem\nDATABASES[name] = DB.open(\"sqlite3://#{Path.new(path)}\")\n"}},{"html_id":"find_databases(path:String):Nil-class-method","name":"find_databases","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(path : String) : Nil","args_html":"(path : String) : Nil","location":{"filename":"src/management.cr","line_number":107,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L107"},"def":{"name":"find_databases","args":[{"name":"path","external_name":"path","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if !(File.directory?(path))\n  STDERR.puts(\"ERROR: No directory at #{path}\")\n  exit(1)\nend\ndb_paths = Dir.glob(\"#{path}/**/*.db\", \"#{path}./**/*.sqlite\")\nif db_paths.empty?\n  STDERR.puts(\"ERROR: No databases found\")\n  exit(1)\nend\ndb_paths.each do |db_path|\n  name = Path[db_path].stem\n  DATABASES[name] = DB.open(\"sqlite3://#{Path.new(db_path)}\")\nend\n"}},{"html_id":"find_user(identity:Int64):Nil-class-method","name":"find_user","abstract":false,"args":[{"name":"identity","external_name":"identity","restriction":"Int64"}],"args_string":"(identity : Int64) : Nil","args_html":"(identity : Int64) : Nil","location":{"filename":"src/management.cr","line_number":142,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L142"},"def":{"name":"find_user","args":[{"name":"identity","external_name":"identity","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nDATABASES.each do |name, db|\n  if user = DatabaseWarden.find_user(db, identity, name)\n    puts(\"#{name} Database:\")\n    puts(\"#{user}\")\n    puts\n  else\n    puts(\"User not found in \\\"#{name}\\\" database\")\n  end\nend\n"}},{"html_id":"find_user(identity:String):Nil-class-method","name":"find_user","abstract":false,"args":[{"name":"identity","external_name":"identity","restriction":"String"}],"args_string":"(identity : String) : Nil","args_html":"(identity : String) : Nil","location":{"filename":"src/management.cr","line_number":158,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L158"},"def":{"name":"find_user","args":[{"name":"identity","external_name":"identity","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nDATABASES.each do |name, db|\n  if user = DatabaseWarden.find_user(db, identity, name)\n    puts(\"#{name} Database:\")\n    puts(\"#{user}\")\n    puts\n  else\n    puts(\"User not found in \\\"#{name}\\\" database\")\n  end\nend\n"}},{"html_id":"list_banned_users:Nil-class-method","name":"list_banned_users","abstract":false,"location":{"filename":"src/management.cr","line_number":193,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L193"},"def":{"name":"list_banned_users","return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nDATABASES.each do |name, db|\n  users = DatabaseWarden.list_banned_users(db, name)\n  if users && (!users.empty?)\n    puts(\"Banned users in \\\"#{name}\\\" database:\")\n    users.each do |user|\n      puts(\"#{user}\")\n      puts\n    end\n  else\n    puts(\"No banned users found in \\\"#{name}\\\" database\")\n  end\nend\n"}},{"html_id":"list_ranked_users:Nil-class-method","name":"list_ranked_users","abstract":false,"location":{"filename":"src/management.cr","line_number":174,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L174"},"def":{"name":"list_ranked_users","return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nDATABASES.each do |name, db|\n  users = DatabaseWarden.list_ranked_users(db, name)\n  if users && (!users.empty?)\n    puts(\"Ranked users in \\\"#{name}\\\" database:\")\n    users.each do |user|\n      puts(\"#{user}\")\n      puts\n    end\n  else\n    puts(\"No ranked users found in \\\"#{name}\\\" database\")\n  end\nend\n"}},{"html_id":"set_user_rank(identity:Int64,rank:String):Nil-class-method","name":"set_user_rank","abstract":false,"args":[{"name":"identity","external_name":"identity","restriction":"Int64"},{"name":"rank","external_name":"rank","restriction":"String"}],"args_string":"(identity : Int64, rank : String) : Nil","args_html":"(identity : Int64, rank : String) : Nil","location":{"filename":"src/management.cr","line_number":212,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L212"},"def":{"name":"set_user_rank","args":[{"name":"identity","external_name":"identity","restriction":"Int64"},{"name":"rank","external_name":"rank","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nif new_rank = rank.to_i32?\nelse\n  STDERR.puts(\"ERROR: Expected rank to be an integer value\")\n  exit(1)\nend\nDATABASES.each do |name, db|\n  result = DatabaseWarden.set_user_rank(db, identity, new_rank, name)\n  if result && (result.rows_affected == 0)\n    puts(\"No user with that identity found in \\\"#{name}\\\" database\")\n  else\n    puts(\"Successfully set user #{identity} to rank #{rank} in \\\"#{name}\\\" database\")\n  end\nend\n"}},{"html_id":"set_user_rank(identity:String,rank:String):Nil-class-method","name":"set_user_rank","abstract":false,"args":[{"name":"identity","external_name":"identity","restriction":"String"},{"name":"rank","external_name":"rank","restriction":"String"}],"args_string":"(identity : String, rank : String) : Nil","args_html":"(identity : String, rank : String) : Nil","location":{"filename":"src/management.cr","line_number":232,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L232"},"def":{"name":"set_user_rank","args":[{"name":"identity","external_name":"identity","restriction":"String"},{"name":"rank","external_name":"rank","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nif new_rank = rank.to_i32?\nelse\n  STDERR.puts(\"ERROR: Expected rank to be an integer value\")\n  exit(1)\nend\nDATABASES.each do |name, db|\n  result = DatabaseWarden.set_user_rank(db, identity, new_rank, name)\n  if result && (result.rows_affected != 0)\n    puts(\"Successfully set user #{identity} to rank #{rank} in \\\"#{name}\\\" database\")\n  else\n    puts(\"No user with that identity found in \\\"#{name}\\\" database\")\n  end\nend\n"}},{"html_id":"sync_blacklists(interval:Int32):Nil-class-method","name":"sync_blacklists","abstract":false,"args":[{"name":"interval","external_name":"interval","restriction":"Int32"}],"args_string":"(interval : Int32) : Nil","args_html":"(interval : Int32) : Nil","location":{"filename":"src/management.cr","line_number":318,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L318"},"def":{"name":"sync_blacklists","args":[{"name":"interval","external_name":"interval","restriction":"Int32"}],"return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nif DATABASES.size > 1\nelse\n  STDERR.puts(\"ERROR: More than one database is required to sync blacklists.\")\nend\nvalid_databases = DATABASES\ntime_last_checked = Time.unix(0)\nloop do\n  banned_users = Hash(Int64, String).new\n  DATABASES.each do |name, db|\n    if users = DatabaseWarden.get_banned_users(db, name, time_last_checked)\n    else\n      valid_databases.delete(name)\n      next\n    end\n    users.each do |user|\n      if banned_users[user.id]?\n        next\n      end\n      if reason = user.blacklist_reason\n      else\n        reason = \"Banned in another chat\"\n      end\n      reason = reason + \" [#{name}]\"\n      banned_users[user.id] = reason\n    end\n  end\n  valid_databases.each do |name, db|\n    banned_users.each do |id, reason|\n      if user = DatabaseWarden.find_user(db, id, name)\n        if user.rank == -10\n          next\n        end\n        DatabaseWarden.ban_user(db, id, name, reason)\n      else\n        DatabaseWarden.create_banned_user(db, id, name, reason)\n      end\n      puts(\"Banned user #{id} in \\\"#{name}\\\" database\")\n    end\n  end\n  time_last_checked = Time.utc\n  sleep(interval.minutes)\nend\n"}},{"html_id":"sync_blacklists:Nil-class-method","name":"sync_blacklists","abstract":false,"location":{"filename":"src/management.cr","line_number":362,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L362"},"def":{"name":"sync_blacklists","return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nif DATABASES.size > 1\nelse\n  STDERR.puts(\"ERROR: More than one database is required to sync blacklists.\")\nend\nvalid_databases = DATABASES\nbanned_users = Hash(Int64, String).new\nDATABASES.each do |name, db|\n  if users = DatabaseWarden.get_banned_users(db, name)\n  else\n    valid_databases.delete(name)\n    next\n  end\n  users.each do |user|\n    if banned_users[user.id]?\n      next\n    end\n    if reason = user.blacklist_reason\n    else\n      reason = \"Banned in another chat\"\n    end\n    reason = reason + \" [#{name}]\"\n    banned_users[user.id] = reason\n  end\nend\nvalid_databases.each do |name, db|\n  banned_users.each do |id, reason|\n    if user = DatabaseWarden.find_user(db, id, name)\n      if user.rank == -10\n        next\n      end\n      DatabaseWarden.ban_user(db, id, name, reason)\n    else\n      DatabaseWarden.create_banned_user(db, id, name, reason)\n    end\n    puts(\"Banned user #{id} in \\\"#{name}\\\" database\")\n  end\nend\n"}},{"html_id":"terminate_program(bot:PrivateParlor,routine:Tasker::Task)-class-method","name":"terminate_program","abstract":false,"args":[{"name":"bot","external_name":"bot","restriction":"PrivateParlor"},{"name":"routine","external_name":"routine","restriction":"Tasker::Task"}],"args_string":"(bot : PrivateParlor, routine : Tasker::Task)","args_html":"(bot : <a href=\"PrivateParlor.html\">PrivateParlor</a>, routine : Tasker::Task)","location":{"filename":"src/privateparlor.cr","line_number":38,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor.cr#L38"},"def":{"name":"terminate_program","args":[{"name":"bot","external_name":"bot","restriction":"PrivateParlor"},{"name":"routine","external_name":"routine","restriction":"Tasker::Task"}],"visibility":"Public","body":"bot.stop_polling\nroutine.cancel\nloop do\n  if bot.send_messages == true\n    break\n  end\nend\nbegin\n  bot.database.db.close\nrescue\n  nil\nend\nLog.info do\n  \"Sent last messages in queue. Shutting down...\"\nend\nexit\n"}},{"html_id":"unban_user(identity:Int64):Nil-class-method","name":"unban_user","abstract":false,"args":[{"name":"identity","external_name":"identity","restriction":"Int64"}],"args_string":"(identity : Int64) : Nil","args_html":"(identity : Int64) : Nil","location":{"filename":"src/management.cr","line_number":286,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L286"},"def":{"name":"unban_user","args":[{"name":"identity","external_name":"identity","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nDATABASES.each do |name, db|\n  if DatabaseWarden.find_user(db, identity, name)\n    DatabaseWarden.unban_user(db, identity, name)\n    puts(\"Unbanned user #{identity} in \\\"#{name}\\\" database\")\n  else\n    STDERR.puts(\"Could not unban user #{identity} in \\\"#{name}\\\" database because user does not exist there\")\n  end\nend\n"}},{"html_id":"unban_user(identity:String):Nil-class-method","name":"unban_user","abstract":false,"args":[{"name":"identity","external_name":"identity","restriction":"String"}],"args_string":"(identity : String) : Nil","args_html":"(identity : String) : Nil","location":{"filename":"src/management.cr","line_number":302,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management.cr#L302"},"def":{"name":"unban_user","args":[{"name":"identity","external_name":"identity","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if DATABASES.empty?\n  find_databases(\".\")\nend\nDATABASES.each do |name, db|\n  if DatabaseWarden.find_user(db, identity, name)\n    DatabaseWarden.unban_user(db, identity, name)\n    puts(\"Unbanned user #{identity} in \\\"#{name}\\\" database\")\n  else\n    STDERR.puts(\"Could not unban user #{identity} in \\\"#{name}\\\" database because user does not exist there\")\n  end\nend\n"}}],"types":[{"html_id":"privateparlor/Album","path":"Album.html","kind":"class","full_name":"Album","name":"Album","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/album.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/album.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new(msid:Int64,media:Tourmaline::InputMediaPhoto|Tourmaline::InputMediaVideo|Tourmaline::InputMediaAudio|Tourmaline::InputMediaDocument)-class-method","name":"new","doc":"Creates and instance of `Album`, representing a prepared media group to queue and relay\n\n## Arguments:\n\n`msid`\n:     the message ID of the first media file in the album\n\n`media`\n:     the media type corresponding with the given MSID","summary":"<p>Creates and instance of <code><a href=\"Album.html\">Album</a></code>, representing a prepared media group to queue and relay</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"media","external_name":"media","restriction":"Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument"}],"args_string":"(msid : Int64, media : Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument)","args_html":"(msid : Int64, media : Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument)","location":{"filename":"src/privateparlor/album.cr","line_number":14,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/album.cr#L14"},"def":{"name":"new","args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"media","external_name":"media","restriction":"Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument"}],"visibility":"Public","body":"_ = allocate\n_.initialize(msid, media)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"media_ids:Array(Tourmaline::InputMediaPhoto|Tourmaline::InputMediaVideo|Tourmaline::InputMediaAudio|Tourmaline::InputMediaDocument)-instance-method","name":"media_ids","abstract":false,"location":{"filename":"src/privateparlor/album.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/album.cr#L3"},"def":{"name":"media_ids","return_type":"Array(Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument)","visibility":"Public","body":"@media_ids"}},{"html_id":"media_ids=(media_ids:Array(Tourmaline::InputMediaPhoto|Tourmaline::InputMediaVideo|Tourmaline::InputMediaAudio|Tourmaline::InputMediaDocument))-instance-method","name":"media_ids=","abstract":false,"args":[{"name":"media_ids","external_name":"media_ids","restriction":"Array(Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument)"}],"args_string":"(media_ids : Array(Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument))","args_html":"(media_ids : Array(Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument))","location":{"filename":"src/privateparlor/album.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/album.cr#L3"},"def":{"name":"media_ids=","args":[{"name":"media_ids","external_name":"media_ids","restriction":"Array(Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument)"}],"visibility":"Public","body":"@media_ids = media_ids"}},{"html_id":"message_ids:Array(Int64)-instance-method","name":"message_ids","abstract":false,"location":{"filename":"src/privateparlor/album.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/album.cr#L2"},"def":{"name":"message_ids","return_type":"Array(Int64)","visibility":"Public","body":"@message_ids"}},{"html_id":"message_ids=(message_ids:Array(Int64))-instance-method","name":"message_ids=","abstract":false,"args":[{"name":"message_ids","external_name":"message_ids","restriction":"Array(Int64)"}],"args_string":"(message_ids : Array(Int64))","args_html":"(message_ids : Array(Int64))","location":{"filename":"src/privateparlor/album.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/album.cr#L2"},"def":{"name":"message_ids=","args":[{"name":"message_ids","external_name":"message_ids","restriction":"Array(Int64)"}],"visibility":"Public","body":"@message_ids = message_ids"}}]},{"html_id":"privateparlor/AuthorizedRanks","path":"AuthorizedRanks.html","kind":"class","full_name":"AuthorizedRanks","name":"AuthorizedRanks","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new(ranks:Hash(Int32,Rank))-class-method","name":"new","abstract":false,"args":[{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"}],"args_string":"(ranks : Hash(Int32, Rank))","args_html":"(ranks : Hash(Int32, <a href=\"Rank.html\">Rank</a>))","location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L4"},"def":{"name":"new","args":[{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(ranks)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"authorized?(user_rank:Int32,permission:CommandPermissions):Bool|Nil-instance-method","name":"authorized?","doc":"Returns `true` if user rank has the given command permission; user is authorized.\n\nReturns `false` otherwise, or `nil` if the user rank does not exist in `ranks`","summary":"<p>Returns <code>true</code> if user rank has the given command permission; user is authorized.</p>","abstract":false,"args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"CommandPermissions"}],"args_string":"(user_rank : Int32, permission : CommandPermissions) : Bool | Nil","args_html":"(user_rank : Int32, permission : <a href=\"CommandPermissions.html\">CommandPermissions</a>) : Bool | Nil","location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":10,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L10"},"def":{"name":"authorized?","args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"CommandPermissions"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if rank = @ranks[user_rank]?\n  rank.command_permissions.includes?(permission)\nend"}},{"html_id":"authorized?(user_rank:Int32,permission:MessagePermissions):Bool|Nil-instance-method","name":"authorized?","doc":"Returns `true` if user rank has the given message permission; user is authorized.\n\nReturns `false` otherwise, or `nil` if the user rank does not exist in `ranks`","summary":"<p>Returns <code>true</code> if user rank has the given message permission; user is authorized.</p>","abstract":false,"args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"MessagePermissions"}],"args_string":"(user_rank : Int32, permission : MessagePermissions) : Bool | Nil","args_html":"(user_rank : Int32, permission : <a href=\"MessagePermissions.html\">MessagePermissions</a>) : Bool | Nil","location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":30,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L30"},"def":{"name":"authorized?","args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"MessagePermissions"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if rank = @ranks[user_rank]?\n  rank.message_permissions.includes?(permission)\nend"}},{"html_id":"authorized?(user_rank:Int32,*permissions:CommandPermissions):CommandPermissions|Nil-instance-method","name":"authorized?","doc":"Returns the first symbol found from intersecting the user command permissions and the given permissions; user is authorized.\n\nReturns`nil` if the user rank does not exist in `ranks` or if the rank does not have any of the given permissions.\n\nUsed for checking groups of command permissions that are similar.","summary":"<p>Returns the first symbol found from intersecting the user command permissions and the given permissions; user is authorized.</p>","abstract":false,"args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permissions","external_name":"permissions","restriction":"CommandPermissions"}],"args_string":"(user_rank : Int32, *permissions : CommandPermissions) : CommandPermissions | Nil","args_html":"(user_rank : Int32, *permissions : <a href=\"CommandPermissions.html\">CommandPermissions</a>) : <a href=\"CommandPermissions.html\">CommandPermissions</a> | Nil","location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":21,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L21"},"def":{"name":"authorized?","args":[{"name":"user_rank","external_name":"user_rank","restriction":"Int32"},{"name":"permissions","external_name":"permissions","restriction":"CommandPermissions"}],"splat_index":1,"return_type":"CommandPermissions | ::Nil","visibility":"Public","body":"if rank = @ranks[user_rank]?\n  (rank.command_permissions & permissions.to_set).first?\nend"}},{"html_id":"can_demote?(rank:Int32,invoker:Int32,receiver:Int32):Bool-instance-method","name":"can_demote?","doc":"Returns `true` if the user to be demoted (receiver) can be demoted with the given rank.","summary":"<p>Returns <code>true</code> if the user to be demoted (receiver) can be demoted with the given rank.</p>","abstract":false,"args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"receiver","external_name":"receiver","restriction":"Int32"}],"args_string":"(rank : Int32, invoker : Int32, receiver : Int32) : Bool","args_html":"(rank : Int32, invoker : Int32, receiver : Int32) : Bool","location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":81,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L81"},"def":{"name":"can_demote?","args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"receiver","external_name":"receiver","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"(rank < receiver && receiver < invoker) && (rank != -10)"}},{"html_id":"can_promote?(rank:Int32,invoker:Int32,receiver:Int32,permission:CommandPermissions):Bool-instance-method","name":"can_promote?","doc":"Returns true if the user to be promoted (receiver) can be promoted with the given rank.","summary":"<p>Returns true if the user to be promoted (receiver) can be promoted with the given rank.</p>","abstract":false,"args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"receiver","external_name":"receiver","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"CommandPermissions"}],"args_string":"(rank : Int32, invoker : Int32, receiver : Int32, permission : CommandPermissions) : Bool","args_html":"(rank : Int32, invoker : Int32, receiver : Int32, permission : <a href=\"CommandPermissions.html\">CommandPermissions</a>) : Bool","location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":64,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L64"},"def":{"name":"can_promote?","args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"receiver","external_name":"receiver","restriction":"Int32"},{"name":"permission","external_name":"permission","restriction":"CommandPermissions"}],"return_type":"Bool","visibility":"Public","body":"if (rank <= receiver || rank > invoker) || (rank == -10)\n  return false\nend\nif rank <= invoker && (permission == CommandPermissions::Promote)\n  true\nelse\n  if rank < invoker && (permission == CommandPermissions::PromoteLower)\n    true\n  else\n    if (rank == invoker) && (permission == CommandPermissions::PromoteSame)\n      true\n    else\n      false\n    end\n  end\nend\n"}},{"html_id":"can_ranksay?(rank:Int32,invoker:Int32,invoker_permission:CommandPermissions,rank_permission:CommandPermissions|Nil):Bool-instance-method","name":"can_ranksay?","doc":"Returns `true` if the user can sign a message with the given rank.","summary":"<p>Returns <code>true</code> if the user can sign a message with the given rank.</p>","abstract":false,"args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"invoker_permission","external_name":"invoker_permission","restriction":"CommandPermissions"},{"name":"rank_permission","external_name":"rank_permission","restriction":"CommandPermissions | ::Nil"}],"args_string":"(rank : Int32, invoker : Int32, invoker_permission : CommandPermissions, rank_permission : CommandPermissions | Nil) : Bool","args_html":"(rank : Int32, invoker : Int32, invoker_permission : <a href=\"CommandPermissions.html\">CommandPermissions</a>, rank_permission : <a href=\"CommandPermissions.html\">CommandPermissions</a> | Nil) : Bool","location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":86,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L86"},"def":{"name":"can_ranksay?","args":[{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"invoker","external_name":"invoker","restriction":"Int32"},{"name":"invoker_permission","external_name":"invoker_permission","restriction":"CommandPermissions"},{"name":"rank_permission","external_name":"rank_permission","restriction":"CommandPermissions | ::Nil"}],"return_type":"Bool","visibility":"Public","body":"if (rank == -10) || rank_permission.nil?\n  return false\nend\n(rank < invoker && (invoker_permission == CommandPermissions::RanksayLower)) || (rank == invoker)\n"}},{"html_id":"find_rank(name:String,value:Int32|Nil=nil):Tuple(Int32,Rank)|Nil-instance-method","name":"find_rank","doc":"Finds a rank from a given rank value\nor iterates through the ranks hash for a rank with a given name\n\nReturns a 2-tuple with the rank value and the rank associated with that rank,\nor `nil` if no rank exists with the given values.","summary":"<p>Finds a rank from a given rank value or iterates through the ranks hash for a rank with a given name</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"value","default_value":"nil","external_name":"value","restriction":"Int32 | ::Nil"}],"args_string":"(name : String, value : Int32 | Nil = nil) : Tuple(Int32, Rank) | Nil","args_html":"(name : String, value : Int32 | Nil = <span class=\"n\">nil</span>) : Tuple(Int32, <a href=\"Rank.html\">Rank</a>) | Nil","location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":53,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L53"},"def":{"name":"find_rank","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"value","default_value":"nil","external_name":"value","restriction":"Int32 | ::Nil"}],"return_type":"Tuple(Int32, Rank) | ::Nil","visibility":"Public","body":"if value && @ranks[value]?\n  {value, @ranks[value]}\nelse\n  @ranks.find do |k, v|\n    (v.name.downcase == name) || (k == value)\n  end\nend"}},{"html_id":"max_rank:Int32-instance-method","name":"max_rank","doc":"Returns the max rank value in the ranks hash","summary":"<p>Returns the max rank value in the ranks hash</p>","abstract":false,"location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":37,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L37"},"def":{"name":"max_rank","return_type":"Int32","visibility":"Public","body":"@ranks.keys.max"}},{"html_id":"rank_name(rank_value:Int32):String|Nil-instance-method","name":"rank_name","doc":"Returns the rank name associated with the given value.","summary":"<p>Returns the rank name associated with the given value.</p>","abstract":false,"args":[{"name":"rank_value","external_name":"rank_value","restriction":"Int32"}],"args_string":"(rank_value : Int32) : String | Nil","args_html":"(rank_value : Int32) : String | Nil","location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":42,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L42"},"def":{"name":"rank_name","args":[{"name":"rank_value","external_name":"rank_value","restriction":"Int32"}],"return_type":"String | ::Nil","visibility":"Public","body":"if @ranks[rank_value]?\n  @ranks[rank_value].name\nend"}},{"html_id":"rank_names(limit:Int32):Array(String)-instance-method","name":"rank_names","doc":"Returns an array of all the rank names in the ranks hash, up to a rank value limit.","summary":"<p>Returns an array of all the rank names in the ranks hash, up to a rank value limit.</p>","abstract":false,"args":[{"name":"limit","external_name":"limit","restriction":"Int32"}],"args_string":"(limit : Int32) : Array(String)","args_html":"(limit : Int32) : Array(String)","location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":100,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L100"},"def":{"name":"rank_names","args":[{"name":"limit","external_name":"limit","restriction":"Int32"}],"return_type":"Array(String)","visibility":"Public","body":"@ranks.compact_map do |k, v|\n  if k < limit\n    v.name\n  end\nend"}},{"html_id":"rank_names:Array(String)-instance-method","name":"rank_names","doc":"Returns an array of all the rank names in the ranks hash.","summary":"<p>Returns an array of all the rank names in the ranks hash.</p>","abstract":false,"location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":93,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L93"},"def":{"name":"rank_names","return_type":"Array(String)","visibility":"Public","body":"@ranks.compact_map do |_, v|\n  v.name\nend"}},{"html_id":"ranks:Hash(Int32,Rank)-instance-method","name":"ranks","abstract":false,"location":{"filename":"src/privateparlor/rank/authorized_ranks.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/authorized_ranks.cr#L2"},"def":{"name":"ranks","return_type":"Hash(Int32, Rank)","visibility":"Public","body":"@ranks"}}]},{"html_id":"privateparlor/CommandDescriptions","path":"CommandDescriptions.html","kind":"class","full_name":"CommandDescriptions","name":"CommandDescriptions","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L3"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L4"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"blacklist:String-instance-method","name":"blacklist","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":85,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L85"},"def":{"name":"blacklist","return_type":"String","visibility":"Public","body":"@blacklist"}},{"html_id":"delete:String-instance-method","name":"delete","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":61,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L61"},"def":{"name":"delete","return_type":"String","visibility":"Public","body":"@delete"}},{"html_id":"demote:String-instance-method","name":"demote","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":43,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L43"},"def":{"name":"demote","return_type":"String","visibility":"Public","body":"@demote"}},{"html_id":"downvote:String-instance-method","name":"downvote","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":25,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L25"},"def":{"name":"downvote","return_type":"String","visibility":"Public","body":"@downvote"}},{"html_id":"help:String-instance-method","name":"help","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":94,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L94"},"def":{"name":"help","return_type":"String","visibility":"Public","body":"@help"}},{"html_id":"info:String-instance-method","name":"info","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":13,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L13"},"def":{"name":"info","return_type":"String","visibility":"Public","body":"@info"}},{"html_id":"karma_info:String-instance-method","name":"karma_info","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":76,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L76"},"def":{"name":"karma_info","return_type":"String","visibility":"Public","body":"@karma_info"}},{"html_id":"ksign:String-instance-method","name":"ksign","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":52,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L52"},"def":{"name":"ksign","return_type":"String","visibility":"Public","body":"@ksign"}},{"html_id":"motd:String-instance-method","name":"motd","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":91,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L91"},"def":{"name":"motd","return_type":"String","visibility":"Public","body":"@motd"}},{"html_id":"motd_set:String-instance-method","name":"motd_set","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":97,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L97"},"def":{"name":"motd_set","return_type":"String","visibility":"Public","body":"@motd_set"}},{"html_id":"pin:String-instance-method","name":"pin","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":79,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L79"},"def":{"name":"pin","return_type":"String","visibility":"Public","body":"@pin"}},{"html_id":"promote:String-instance-method","name":"promote","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":40,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L40"},"def":{"name":"promote","return_type":"String","visibility":"Public","body":"@promote"}},{"html_id":"purge:String-instance-method","name":"purge","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":70,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L70"},"def":{"name":"purge","return_type":"String","visibility":"Public","body":"@purge"}},{"html_id":"ranked_info:String-instance-method","name":"ranked_info","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":100,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L100"},"def":{"name":"ranked_info","return_type":"String","visibility":"Public","body":"@ranked_info"}},{"html_id":"ranksay:String-instance-method","name":"ranksay","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":55,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L55"},"def":{"name":"ranksay","return_type":"String","visibility":"Public","body":"@ranksay"}},{"html_id":"remove:String-instance-method","name":"remove","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":67,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L67"},"def":{"name":"remove","return_type":"String","visibility":"Public","body":"@remove"}},{"html_id":"reveal:String-instance-method","name":"reveal","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":34,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L34"},"def":{"name":"reveal","return_type":"String","visibility":"Public","body":"@reveal"}},{"html_id":"sign:String-instance-method","name":"sign","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":46,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L46"},"def":{"name":"sign","return_type":"String","visibility":"Public","body":"@sign"}},{"html_id":"spoiler:String-instance-method","name":"spoiler","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":73,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L73"},"def":{"name":"spoiler","return_type":"String","visibility":"Public","body":"@spoiler"}},{"html_id":"start:String-instance-method","name":"start","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":7,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L7"},"def":{"name":"start","return_type":"String","visibility":"Public","body":"@start"}},{"html_id":"stop:String-instance-method","name":"stop","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":10,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L10"},"def":{"name":"stop","return_type":"String","visibility":"Public","body":"@stop"}},{"html_id":"toggle_debug:String-instance-method","name":"toggle_debug","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":31,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L31"},"def":{"name":"toggle_debug","return_type":"String","visibility":"Public","body":"@toggle_debug"}},{"html_id":"toggle_karma:String-instance-method","name":"toggle_karma","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":28,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L28"},"def":{"name":"toggle_karma","return_type":"String","visibility":"Public","body":"@toggle_karma"}},{"html_id":"tripcode:String-instance-method","name":"tripcode","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":37,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L37"},"def":{"name":"tripcode","return_type":"String","visibility":"Public","body":"@tripcode"}},{"html_id":"tsign:String-instance-method","name":"tsign","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":49,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L49"},"def":{"name":"tsign","return_type":"String","visibility":"Public","body":"@tsign"}},{"html_id":"uncooldown:String-instance-method","name":"uncooldown","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":64,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L64"},"def":{"name":"uncooldown","return_type":"String","visibility":"Public","body":"@uncooldown"}},{"html_id":"unpin:String-instance-method","name":"unpin","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":82,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L82"},"def":{"name":"unpin","return_type":"String","visibility":"Public","body":"@unpin"}},{"html_id":"upvote:String-instance-method","name":"upvote","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":22,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L22"},"def":{"name":"upvote","return_type":"String","visibility":"Public","body":"@upvote"}},{"html_id":"users:String-instance-method","name":"users","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":16,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L16"},"def":{"name":"users","return_type":"String","visibility":"Public","body":"@users"}},{"html_id":"version:String-instance-method","name":"version","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":19,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L19"},"def":{"name":"version","return_type":"String","visibility":"Public","body":"@version"}},{"html_id":"warn:String-instance-method","name":"warn","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":58,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L58"},"def":{"name":"warn","return_type":"String","visibility":"Public","body":"@warn"}},{"html_id":"whitelist:String-instance-method","name":"whitelist","abstract":false,"location":{"filename":"src/privateparlor/locale/command_descriptions.cr","line_number":88,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/command_descriptions.cr#L88"},"def":{"name":"whitelist","return_type":"String","visibility":"Public","body":"@whitelist"}}]},{"html_id":"privateparlor/CommandPermissions","path":"CommandPermissions.html","kind":"enum","full_name":"CommandPermissions","name":"CommandPermissions","abstract":false,"ancestors":[{"html_id":"privateparlor/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"privateparlor/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"privateparlor/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Users","name":"Users","value":"0"},{"id":"Upvote","name":"Upvote","value":"1"},{"id":"Downvote","name":"Downvote","value":"2"},{"id":"Promote","name":"Promote","value":"3"},{"id":"PromoteLower","name":"PromoteLower","value":"4"},{"id":"PromoteSame","name":"PromoteSame","value":"5"},{"id":"Demote","name":"Demote","value":"6"},{"id":"Sign","name":"Sign","value":"7"},{"id":"TSign","name":"TSign","value":"8"},{"id":"Reveal","name":"Reveal","value":"9"},{"id":"Spoiler","name":"Spoiler","value":"10"},{"id":"Pin","name":"Pin","value":"11"},{"id":"Unpin","name":"Unpin","value":"12"},{"id":"Ranksay","name":"Ranksay","value":"13"},{"id":"RanksayLower","name":"RanksayLower","value":"14"},{"id":"Warn","name":"Warn","value":"15"},{"id":"Delete","name":"Delete","value":"16"},{"id":"Uncooldown","name":"Uncooldown","value":"17"},{"id":"Remove","name":"Remove","value":"18"},{"id":"Purge","name":"Purge","value":"19"},{"id":"Blacklist","name":"Blacklist","value":"20"},{"id":"Whitelist","name":"Whitelist","value":"21"},{"id":"MotdSet","name":"MotdSet","value":"22"},{"id":"RankedInfo","name":"RankedInfo","value":"23"}],"instance_methods":[{"html_id":"blacklist?-instance-method","name":"blacklist?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":22,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L22"},"def":{"name":"blacklist?","visibility":"Public","body":"self == Blacklist"}},{"html_id":"delete?-instance-method","name":"delete?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":18,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L18"},"def":{"name":"delete?","visibility":"Public","body":"self == Delete"}},{"html_id":"demote?-instance-method","name":"demote?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":8,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L8"},"def":{"name":"demote?","visibility":"Public","body":"self == Demote"}},{"html_id":"downvote?-instance-method","name":"downvote?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L4"},"def":{"name":"downvote?","visibility":"Public","body":"self == Downvote"}},{"html_id":"motd_set?-instance-method","name":"motd_set?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":24,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L24"},"def":{"name":"motd_set?","visibility":"Public","body":"self == MotdSet"}},{"html_id":"pin?-instance-method","name":"pin?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":13,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L13"},"def":{"name":"pin?","visibility":"Public","body":"self == Pin"}},{"html_id":"promote?-instance-method","name":"promote?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L5"},"def":{"name":"promote?","visibility":"Public","body":"self == Promote"}},{"html_id":"promote_lower?-instance-method","name":"promote_lower?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L6"},"def":{"name":"promote_lower?","visibility":"Public","body":"self == PromoteLower"}},{"html_id":"promote_same?-instance-method","name":"promote_same?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":7,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L7"},"def":{"name":"promote_same?","visibility":"Public","body":"self == PromoteSame"}},{"html_id":"purge?-instance-method","name":"purge?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":21,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L21"},"def":{"name":"purge?","visibility":"Public","body":"self == Purge"}},{"html_id":"ranked_info?-instance-method","name":"ranked_info?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":25,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L25"},"def":{"name":"ranked_info?","visibility":"Public","body":"self == RankedInfo"}},{"html_id":"ranksay?-instance-method","name":"ranksay?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":15,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L15"},"def":{"name":"ranksay?","visibility":"Public","body":"self == Ranksay"}},{"html_id":"ranksay_lower?-instance-method","name":"ranksay_lower?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":16,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L16"},"def":{"name":"ranksay_lower?","visibility":"Public","body":"self == RanksayLower"}},{"html_id":"remove?-instance-method","name":"remove?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":20,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L20"},"def":{"name":"remove?","visibility":"Public","body":"self == Remove"}},{"html_id":"reveal?-instance-method","name":"reveal?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":11,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L11"},"def":{"name":"reveal?","visibility":"Public","body":"self == Reveal"}},{"html_id":"sign?-instance-method","name":"sign?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":9,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L9"},"def":{"name":"sign?","visibility":"Public","body":"self == Sign"}},{"html_id":"spoiler?-instance-method","name":"spoiler?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":12,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L12"},"def":{"name":"spoiler?","visibility":"Public","body":"self == Spoiler"}},{"html_id":"t_sign?-instance-method","name":"t_sign?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":10,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L10"},"def":{"name":"t_sign?","visibility":"Public","body":"self == TSign"}},{"html_id":"uncooldown?-instance-method","name":"uncooldown?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":19,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L19"},"def":{"name":"uncooldown?","visibility":"Public","body":"self == Uncooldown"}},{"html_id":"unpin?-instance-method","name":"unpin?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":14,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L14"},"def":{"name":"unpin?","visibility":"Public","body":"self == Unpin"}},{"html_id":"upvote?-instance-method","name":"upvote?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L3"},"def":{"name":"upvote?","visibility":"Public","body":"self == Upvote"}},{"html_id":"users?-instance-method","name":"users?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L2"},"def":{"name":"users?","visibility":"Public","body":"self == Users"}},{"html_id":"warn?-instance-method","name":"warn?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":17,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L17"},"def":{"name":"warn?","visibility":"Public","body":"self == Warn"}},{"html_id":"whitelist?-instance-method","name":"whitelist?","abstract":false,"location":{"filename":"src/privateparlor/rank/command_permissions.cr","line_number":23,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/command_permissions.cr#L23"},"def":{"name":"whitelist?","visibility":"Public","body":"self == Whitelist"}}]},{"html_id":"privateparlor/Config","path":"Config.html","kind":"class","full_name":"Config","name":"Config","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/config/config.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/privateparlor/config/config.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L2"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"after_initialize-instance-method","name":"after_initialize","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":292,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L292"},"def":{"name":"after_initialize","visibility":"Public","body":"Configuration.set_log(self)"}},{"html_id":"allow_media_spoilers:Bool|Nil-instance-method","name":"allow_media_spoilers","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":29,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L29"},"def":{"name":"allow_media_spoilers","return_type":"Bool | ::Nil","visibility":"Public","body":"@allow_media_spoilers"}},{"html_id":"blacklist_contact:String|Nil-instance-method","name":"blacklist_contact","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":269,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L269"},"def":{"name":"blacklist_contact","return_type":"String | ::Nil","visibility":"Public","body":"@blacklist_contact"}},{"html_id":"cooldown_time_begin:Array(Int32)-instance-method","name":"cooldown_time_begin","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":239,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L239"},"def":{"name":"cooldown_time_begin","return_type":"Array(Int32)","visibility":"Public","body":"@cooldown_time_begin"}},{"html_id":"cooldown_time_linear_b:Int32-instance-method","name":"cooldown_time_linear_b","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":245,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L245"},"def":{"name":"cooldown_time_linear_b","return_type":"Int32","visibility":"Public","body":"@cooldown_time_linear_b"}},{"html_id":"cooldown_time_linear_m:Int32-instance-method","name":"cooldown_time_linear_m","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":242,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L242"},"def":{"name":"cooldown_time_linear_m","return_type":"Int32","visibility":"Public","body":"@cooldown_time_linear_m"}},{"html_id":"database:String-instance-method","name":"database","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":8,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L8"},"def":{"name":"database","return_type":"String","visibility":"Public","body":"@database"}},{"html_id":"database_history:Bool|Nil-instance-method","name":"database_history","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":26,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L26"},"def":{"name":"database_history","return_type":"Bool | ::Nil","visibility":"Public","body":"@database_history"}},{"html_id":"default_rank:Int32-instance-method","name":"default_rank","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":53,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L53"},"def":{"name":"default_rank","return_type":"Int32","visibility":"Public","body":"@default_rank"}},{"html_id":"default_rank=(default_rank:Int32)-instance-method","name":"default_rank=","abstract":false,"args":[{"name":"default_rank","external_name":"default_rank","restriction":"Int32"}],"args_string":"(default_rank : Int32)","args_html":"(default_rank : Int32)","location":{"filename":"src/privateparlor/config/config.cr","line_number":53,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L53"},"def":{"name":"default_rank=","args":[{"name":"default_rank","external_name":"default_rank","restriction":"Int32"}],"visibility":"Public","body":"@default_rank = default_rank"}},{"html_id":"downvote_limit_interval:Int32-instance-method","name":"downvote_limit_interval","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":281,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L281"},"def":{"name":"downvote_limit_interval","return_type":"Int32","visibility":"Public","body":"@downvote_limit_interval"}},{"html_id":"enable_blacklist:Array(Bool)-instance-method","name":"enable_blacklist","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":154,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L154"},"def":{"name":"enable_blacklist","return_type":"Array(Bool)","visibility":"Public","body":"@enable_blacklist"}},{"html_id":"enable_delete:Array(Bool)-instance-method","name":"enable_delete","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":142,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L142"},"def":{"name":"enable_delete","return_type":"Array(Bool)","visibility":"Public","body":"@enable_delete"}},{"html_id":"enable_demote:Array(Bool)-instance-method","name":"enable_demote","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":136,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L136"},"def":{"name":"enable_demote","return_type":"Array(Bool)","visibility":"Public","body":"@enable_demote"}},{"html_id":"enable_downvote:Array(Bool)-instance-method","name":"enable_downvote","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":130,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L130"},"def":{"name":"enable_downvote","return_type":"Array(Bool)","visibility":"Public","body":"@enable_downvote"}},{"html_id":"enable_help:Array(Bool)-instance-method","name":"enable_help","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":124,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L124"},"def":{"name":"enable_help","return_type":"Array(Bool)","visibility":"Public","body":"@enable_help"}},{"html_id":"enable_info:Array(Bool)-instance-method","name":"enable_info","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":88,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L88"},"def":{"name":"enable_info","return_type":"Array(Bool)","visibility":"Public","body":"@enable_info"}},{"html_id":"enable_karma_info:Array(Bool)-instance-method","name":"enable_karma_info","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":163,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L163"},"def":{"name":"enable_karma_info","return_type":"Array(Bool)","visibility":"Public","body":"@enable_karma_info"}},{"html_id":"enable_karma_sign:Array(Bool)-instance-method","name":"enable_karma_sign","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":115,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L115"},"def":{"name":"enable_karma_sign","return_type":"Array(Bool)","visibility":"Public","body":"@enable_karma_sign"}},{"html_id":"enable_motd:Array(Bool)-instance-method","name":"enable_motd","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":121,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L121"},"def":{"name":"enable_motd","return_type":"Array(Bool)","visibility":"Public","body":"@enable_motd"}},{"html_id":"enable_pin:Array(Bool)-instance-method","name":"enable_pin","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":166,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L166"},"def":{"name":"enable_pin","return_type":"Array(Bool)","visibility":"Public","body":"@enable_pin"}},{"html_id":"enable_promote:Array(Bool)-instance-method","name":"enable_promote","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":133,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L133"},"def":{"name":"enable_promote","return_type":"Array(Bool)","visibility":"Public","body":"@enable_promote"}},{"html_id":"enable_purge:Array(Bool)-instance-method","name":"enable_purge","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":151,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L151"},"def":{"name":"enable_purge","return_type":"Array(Bool)","visibility":"Public","body":"@enable_purge"}},{"html_id":"enable_ranksay:Array(Bool)-instance-method","name":"enable_ranksay","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":118,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L118"},"def":{"name":"enable_ranksay","return_type":"Array(Bool)","visibility":"Public","body":"@enable_ranksay"}},{"html_id":"enable_remove:Array(Bool)-instance-method","name":"enable_remove","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":148,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L148"},"def":{"name":"enable_remove","return_type":"Array(Bool)","visibility":"Public","body":"@enable_remove"}},{"html_id":"enable_reveal:Array(Bool)-instance-method","name":"enable_reveal","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":103,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L103"},"def":{"name":"enable_reveal","return_type":"Array(Bool)","visibility":"Public","body":"@enable_reveal"}},{"html_id":"enable_sign:Array(Bool)-instance-method","name":"enable_sign","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":109,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L109"},"def":{"name":"enable_sign","return_type":"Array(Bool)","visibility":"Public","body":"@enable_sign"}},{"html_id":"enable_spoiler:Array(Bool)-instance-method","name":"enable_spoiler","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":160,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L160"},"def":{"name":"enable_spoiler","return_type":"Array(Bool)","visibility":"Public","body":"@enable_spoiler"}},{"html_id":"enable_start:Array(Bool)-instance-method","name":"enable_start","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":82,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L82"},"def":{"name":"enable_start","return_type":"Array(Bool)","visibility":"Public","body":"@enable_start"}},{"html_id":"enable_stop:Array(Bool)-instance-method","name":"enable_stop","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":85,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L85"},"def":{"name":"enable_stop","return_type":"Array(Bool)","visibility":"Public","body":"@enable_stop"}},{"html_id":"enable_toggle_debug:Array(Bool)-instance-method","name":"enable_toggle_debug","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":100,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L100"},"def":{"name":"enable_toggle_debug","return_type":"Array(Bool)","visibility":"Public","body":"@enable_toggle_debug"}},{"html_id":"enable_toggle_karma:Array(Bool)-instance-method","name":"enable_toggle_karma","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":97,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L97"},"def":{"name":"enable_toggle_karma","return_type":"Array(Bool)","visibility":"Public","body":"@enable_toggle_karma"}},{"html_id":"enable_tripcode:Array(Bool)-instance-method","name":"enable_tripcode","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":106,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L106"},"def":{"name":"enable_tripcode","return_type":"Array(Bool)","visibility":"Public","body":"@enable_tripcode"}},{"html_id":"enable_tripsign:Array(Bool)-instance-method","name":"enable_tripsign","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":112,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L112"},"def":{"name":"enable_tripsign","return_type":"Array(Bool)","visibility":"Public","body":"@enable_tripsign"}},{"html_id":"enable_uncooldown:Array(Bool)-instance-method","name":"enable_uncooldown","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":145,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L145"},"def":{"name":"enable_uncooldown","return_type":"Array(Bool)","visibility":"Public","body":"@enable_uncooldown"}},{"html_id":"enable_unpin:Array(Bool)-instance-method","name":"enable_unpin","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":169,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L169"},"def":{"name":"enable_unpin","return_type":"Array(Bool)","visibility":"Public","body":"@enable_unpin"}},{"html_id":"enable_upvote:Array(Bool)-instance-method","name":"enable_upvote","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":127,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L127"},"def":{"name":"enable_upvote","return_type":"Array(Bool)","visibility":"Public","body":"@enable_upvote"}},{"html_id":"enable_users:Array(Bool)-instance-method","name":"enable_users","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":91,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L91"},"def":{"name":"enable_users","return_type":"Array(Bool)","visibility":"Public","body":"@enable_users"}},{"html_id":"enable_version:Array(Bool)-instance-method","name":"enable_version","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":94,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L94"},"def":{"name":"enable_version","return_type":"Array(Bool)","visibility":"Public","body":"@enable_version"}},{"html_id":"enable_warn:Array(Bool)-instance-method","name":"enable_warn","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":139,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L139"},"def":{"name":"enable_warn","return_type":"Array(Bool)","visibility":"Public","body":"@enable_warn"}},{"html_id":"enable_whitelist:Array(Bool)-instance-method","name":"enable_whitelist","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":157,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L157"},"def":{"name":"enable_whitelist","return_type":"Array(Bool)","visibility":"Public","body":"@enable_whitelist"}},{"html_id":"entities:Array(String)-instance-method","name":"entities","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":287,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L287"},"def":{"name":"entities","return_type":"Array(String)","visibility":"Public","body":"@entities"}},{"html_id":"entities=(entities:Array(String))-instance-method","name":"entities=","abstract":false,"args":[{"name":"entities","external_name":"entities","restriction":"Array(String)"}],"args_string":"(entities : Array(String))","args_html":"(entities : Array(String))","location":{"filename":"src/privateparlor/config/config.cr","line_number":287,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L287"},"def":{"name":"entities=","args":[{"name":"entities","external_name":"entities","restriction":"Array(String)"}],"visibility":"Public","body":"@entities = entities"}},{"html_id":"full_usercount:Bool|Nil-instance-method","name":"full_usercount","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":272,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L272"},"def":{"name":"full_usercount","return_type":"Bool | ::Nil","visibility":"Public","body":"@full_usercount"}},{"html_id":"inactivity_limit:Int32-instance-method","name":"inactivity_limit","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":35,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L35"},"def":{"name":"inactivity_limit","return_type":"Int32","visibility":"Public","body":"@inactivity_limit"}},{"html_id":"intermediary_linked_network:Hash(String,String)|String|Nil-instance-method","name":"intermediary_linked_network","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":38,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L38"},"def":{"name":"intermediary_linked_network","return_type":"Hash(String, String) | String | Nil","visibility":"Public","body":"@intermediary_linked_network"}},{"html_id":"intermediate_valid_codepoints:Array(Array(Int32))|Nil-instance-method","name":"intermediate_valid_codepoints","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":74,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L74"},"def":{"name":"intermediate_valid_codepoints","return_type":"Array(Array(Int32)) | ::Nil","visibility":"Public","body":"@intermediate_valid_codepoints"}},{"html_id":"karma_levels:Hash(Int32,String)-instance-method","name":"karma_levels","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":56,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L56"},"def":{"name":"karma_levels","return_type":"Hash(Int32, String)","visibility":"Public","body":"@karma_levels"}},{"html_id":"karma_levels=(karma_levels:Hash(Int32,String))-instance-method","name":"karma_levels=","abstract":false,"args":[{"name":"karma_levels","external_name":"karma_levels","restriction":"Hash(Int32, String)"}],"args_string":"(karma_levels : Hash(Int32, String))","args_html":"(karma_levels : Hash(Int32, String))","location":{"filename":"src/privateparlor/config/config.cr","line_number":56,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L56"},"def":{"name":"karma_levels=","args":[{"name":"karma_levels","external_name":"karma_levels","restriction":"Hash(Int32, String)"}],"visibility":"Public","body":"@karma_levels = karma_levels"}},{"html_id":"karma_warn_penalty:Int32-instance-method","name":"karma_warn_penalty","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":251,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L251"},"def":{"name":"karma_warn_penalty","return_type":"Int32","visibility":"Public","body":"@karma_warn_penalty"}},{"html_id":"lifetime:UInt32-instance-method","name":"lifetime","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":23,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L23"},"def":{"name":"lifetime","return_type":"UInt32","visibility":"Public","body":"@lifetime"}},{"html_id":"lifetime=(lifetime:UInt32)-instance-method","name":"lifetime=","abstract":false,"args":[{"name":"lifetime","external_name":"lifetime","restriction":"UInt32"}],"args_string":"(lifetime : UInt32)","args_html":"(lifetime : UInt32)","location":{"filename":"src/privateparlor/config/config.cr","line_number":23,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L23"},"def":{"name":"lifetime=","args":[{"name":"lifetime","external_name":"lifetime","restriction":"UInt32"}],"visibility":"Public","body":"@lifetime = lifetime"}},{"html_id":"linked_network:Hash(String,String)-instance-method","name":"linked_network","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":41,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L41"},"def":{"name":"linked_network","return_type":"Hash(String, String)","visibility":"Public","body":"@linked_network"}},{"html_id":"locale:String-instance-method","name":"locale","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":11,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L11"},"def":{"name":"locale","return_type":"String","visibility":"Public","body":"@locale"}},{"html_id":"log_channel:String-instance-method","name":"log_channel","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":20,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L20"},"def":{"name":"log_channel","return_type":"String","visibility":"Public","body":"@log_channel"}},{"html_id":"log_file:String|Nil-instance-method","name":"log_file","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":17,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L17"},"def":{"name":"log_file","return_type":"String | ::Nil","visibility":"Public","body":"@log_file"}},{"html_id":"log_level:Log::Severity-instance-method","name":"log_level","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":14,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L14"},"def":{"name":"log_level","return_type":"Log::Severity","visibility":"Public","body":"@log_level"}},{"html_id":"media_limit_period:Int32-instance-method","name":"media_limit_period","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":260,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L260"},"def":{"name":"media_limit_period","return_type":"Int32","visibility":"Public","body":"@media_limit_period"}},{"html_id":"pseudonymous:Bool|Nil-instance-method","name":"pseudonymous","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":266,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L266"},"def":{"name":"pseudonymous","return_type":"Bool | ::Nil","visibility":"Public","body":"@pseudonymous"}},{"html_id":"r9k_cooldown:Int32-instance-method","name":"r9k_cooldown","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":68,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L68"},"def":{"name":"r9k_cooldown","return_type":"Int32","visibility":"Public","body":"@r9k_cooldown"}},{"html_id":"r9k_warn:Bool|Nil-instance-method","name":"r9k_warn","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":71,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L71"},"def":{"name":"r9k_warn","return_type":"Bool | ::Nil","visibility":"Public","body":"@r9k_warn"}},{"html_id":"ranks:Hash(Int32,Rank)-instance-method","name":"ranks","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":44,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L44"},"def":{"name":"ranks","return_type":"Hash(Int32, Rank)","visibility":"Public","body":"@ranks"}},{"html_id":"ranks=(ranks:Hash(Int32,Rank))-instance-method","name":"ranks=","abstract":false,"args":[{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"}],"args_string":"(ranks : Hash(Int32, Rank))","args_html":"(ranks : Hash(Int32, <a href=\"Rank.html\">Rank</a>))","location":{"filename":"src/privateparlor/config/config.cr","line_number":44,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L44"},"def":{"name":"ranks=","args":[{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"}],"visibility":"Public","body":"@ranks = ranks"}},{"html_id":"registration_open:Bool|Nil-instance-method","name":"registration_open","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":263,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L263"},"def":{"name":"registration_open","return_type":"Bool | ::Nil","visibility":"Public","body":"@registration_open"}},{"html_id":"regular_forwards:Bool|Nil-instance-method","name":"regular_forwards","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":32,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L32"},"def":{"name":"regular_forwards","return_type":"Bool | ::Nil","visibility":"Public","body":"@regular_forwards"}},{"html_id":"relay_animation:Bool|Nil-instance-method","name":"relay_animation","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":177,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L177"},"def":{"name":"relay_animation","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_animation"}},{"html_id":"relay_audio:Bool|Nil-instance-method","name":"relay_audio","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":180,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L180"},"def":{"name":"relay_audio","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_audio"}},{"html_id":"relay_basketball:Bool|Nil-instance-method","name":"relay_basketball","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":216,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L216"},"def":{"name":"relay_basketball","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_basketball"}},{"html_id":"relay_bowling:Bool|Nil-instance-method","name":"relay_bowling","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":225,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L225"},"def":{"name":"relay_bowling","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_bowling"}},{"html_id":"relay_contact:Bool|Nil-instance-method","name":"relay_contact","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":234,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L234"},"def":{"name":"relay_contact","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_contact"}},{"html_id":"relay_dart:Bool|Nil-instance-method","name":"relay_dart","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":213,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L213"},"def":{"name":"relay_dart","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_dart"}},{"html_id":"relay_dice:Bool|Nil-instance-method","name":"relay_dice","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":210,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L210"},"def":{"name":"relay_dice","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_dice"}},{"html_id":"relay_document:Bool|Nil-instance-method","name":"relay_document","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":183,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L183"},"def":{"name":"relay_document","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_document"}},{"html_id":"relay_forwarded_message:Bool|Nil-instance-method","name":"relay_forwarded_message","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":204,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L204"},"def":{"name":"relay_forwarded_message","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_forwarded_message"}},{"html_id":"relay_location:Bool|Nil-instance-method","name":"relay_location","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":231,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L231"},"def":{"name":"relay_location","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_location"}},{"html_id":"relay_media_group:Bool|Nil-instance-method","name":"relay_media_group","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":198,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L198"},"def":{"name":"relay_media_group","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_media_group"}},{"html_id":"relay_photo:Bool|Nil-instance-method","name":"relay_photo","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":195,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L195"},"def":{"name":"relay_photo","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_photo"}},{"html_id":"relay_poll:Bool|Nil-instance-method","name":"relay_poll","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":201,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L201"},"def":{"name":"relay_poll","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_poll"}},{"html_id":"relay_slot_machine:Bool|Nil-instance-method","name":"relay_slot_machine","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":222,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L222"},"def":{"name":"relay_slot_machine","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_slot_machine"}},{"html_id":"relay_soccerball:Bool|Nil-instance-method","name":"relay_soccerball","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":219,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L219"},"def":{"name":"relay_soccerball","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_soccerball"}},{"html_id":"relay_sticker:Bool|Nil-instance-method","name":"relay_sticker","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":207,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L207"},"def":{"name":"relay_sticker","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_sticker"}},{"html_id":"relay_text:Bool|Nil-instance-method","name":"relay_text","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":174,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L174"},"def":{"name":"relay_text","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_text"}},{"html_id":"relay_venue:Bool|Nil-instance-method","name":"relay_venue","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":228,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L228"},"def":{"name":"relay_venue","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_venue"}},{"html_id":"relay_video:Bool|Nil-instance-method","name":"relay_video","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":186,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L186"},"def":{"name":"relay_video","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_video"}},{"html_id":"relay_video_note:Bool|Nil-instance-method","name":"relay_video_note","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":189,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L189"},"def":{"name":"relay_video_note","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_video_note"}},{"html_id":"relay_voice:Bool|Nil-instance-method","name":"relay_voice","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":192,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L192"},"def":{"name":"relay_voice","return_type":"Bool | ::Nil","visibility":"Public","body":"@relay_voice"}},{"html_id":"salt:String-instance-method","name":"salt","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":290,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L290"},"def":{"name":"salt","return_type":"String","visibility":"Public","body":"@salt"}},{"html_id":"sign_limit_interval:Int32-instance-method","name":"sign_limit_interval","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":275,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L275"},"def":{"name":"sign_limit_interval","return_type":"Int32","visibility":"Public","body":"@sign_limit_interval"}},{"html_id":"smileys:Array(String)-instance-method","name":"smileys","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":284,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L284"},"def":{"name":"smileys","return_type":"Array(String)","visibility":"Public","body":"@smileys"}},{"html_id":"smileys=(smileys:Array(String))-instance-method","name":"smileys=","abstract":false,"args":[{"name":"smileys","external_name":"smileys","restriction":"Array(String)"}],"args_string":"(smileys : Array(String))","args_html":"(smileys : Array(String))","location":{"filename":"src/privateparlor/config/config.cr","line_number":284,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L284"},"def":{"name":"smileys=","args":[{"name":"smileys","external_name":"smileys","restriction":"Array(String)"}],"visibility":"Public","body":"@smileys = smileys"}},{"html_id":"spam_interval_seconds:Int32-instance-method","name":"spam_interval_seconds","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":254,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L254"},"def":{"name":"spam_interval_seconds","return_type":"Int32","visibility":"Public","body":"@spam_interval_seconds"}},{"html_id":"spam_score_handler:SpamScoreHandler-instance-method","name":"spam_score_handler","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":257,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L257"},"def":{"name":"spam_score_handler","return_type":"SpamScoreHandler","visibility":"Public","body":"@spam_score_handler"}},{"html_id":"toggle_r9k_forwards:Bool|Nil-instance-method","name":"toggle_r9k_forwards","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":65,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L65"},"def":{"name":"toggle_r9k_forwards","return_type":"Bool | ::Nil","visibility":"Public","body":"@toggle_r9k_forwards"}},{"html_id":"toggle_r9k_media:Bool|Nil-instance-method","name":"toggle_r9k_media","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":62,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L62"},"def":{"name":"toggle_r9k_media","return_type":"Bool | ::Nil","visibility":"Public","body":"@toggle_r9k_media"}},{"html_id":"toggle_r9k_text:Bool|Nil-instance-method","name":"toggle_r9k_text","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":59,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L59"},"def":{"name":"toggle_r9k_text","return_type":"Bool | ::Nil","visibility":"Public","body":"@toggle_r9k_text"}},{"html_id":"token:String-instance-method","name":"token","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L5"},"def":{"name":"token","return_type":"String","visibility":"Public","body":"@token"}},{"html_id":"upvote_limit_interval:Int32-instance-method","name":"upvote_limit_interval","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":278,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L278"},"def":{"name":"upvote_limit_interval","return_type":"Int32","visibility":"Public","body":"@upvote_limit_interval"}},{"html_id":"valid_codepoints:Array(Range(Int32,Int32))-instance-method","name":"valid_codepoints","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":77,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L77"},"def":{"name":"valid_codepoints","return_type":"Array(Range(Int32, Int32))","visibility":"Public","body":"@valid_codepoints"}},{"html_id":"valid_codepoints=(valid_codepoints:Array(Range(Int32,Int32)))-instance-method","name":"valid_codepoints=","abstract":false,"args":[{"name":"valid_codepoints","external_name":"valid_codepoints","restriction":"Array(Range(Int32, Int32))"}],"args_string":"(valid_codepoints : Array(Range(Int32, Int32)))","args_html":"(valid_codepoints : Array(Range(Int32, Int32)))","location":{"filename":"src/privateparlor/config/config.cr","line_number":77,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L77"},"def":{"name":"valid_codepoints=","args":[{"name":"valid_codepoints","external_name":"valid_codepoints","restriction":"Array(Range(Int32, Int32))"}],"visibility":"Public","body":"@valid_codepoints = valid_codepoints"}},{"html_id":"warn_expire_hours:Int32-instance-method","name":"warn_expire_hours","abstract":false,"location":{"filename":"src/privateparlor/config/config.cr","line_number":248,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/config.cr#L248"},"def":{"name":"warn_expire_hours","return_type":"Int32","visibility":"Public","body":"@warn_expire_hours"}}]},{"html_id":"privateparlor/Configuration","path":"Configuration.html","kind":"module","full_name":"Configuration","name":"Configuration","abstract":false,"locations":[{"filename":"src/privateparlor/config/configuration.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/configuration.cr#L3"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"privateparlor/Configuration","kind":"module","full_name":"Configuration","name":"Configuration"}],"instance_methods":[{"html_id":"check_and_init_linked_network(config:Config):Config-instance-method","name":"check_and_init_linked_network","doc":"Checks the config for a hash of linked networks and initializes `linked_network` field.\n\nIf `intermediary_linked_network` is a hash, merge it into `linked_network`\n\nOtherwise if it is a string, try to open the file from the path and merge\nthe YAML dictionary there into  `linked_network`","summary":"<p>Checks the config for a hash of linked networks and initializes <code>linked_network</code> field.</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(config : Config) : Config","args_html":"(config : <a href=\"Config.html\">Config</a>) : <a href=\"Config.html\">Config</a>","location":{"filename":"src/privateparlor/config/configuration.cr","line_number":127,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/configuration.cr#L127"},"def":{"name":"check_and_init_linked_network","args":[{"name":"config","external_name":"config","restriction":"Config"}],"return_type":"Config","visibility":"Public","body":"if (links = config.intermediary_linked_network) && links.is_a?(String)\n  begin\n    hash = {} of String => String\n    File.open(links) do |file|\n      yaml = YAML.parse(file)\n      yaml[\"linked_network\"].as_h.each do |k, v|\n        hash[k.as_s] = v.as_s\n      end\n      config.linked_network.merge!(hash)\n    end\n  rescue ex : YAML::ParseException\n    Log.error(exception: ex) do\n      \"Could not parse the given value at row #{ex.line_number}. Check that \\\"linked_network\\\" is a valid dictionary.\"\n    end\n  rescue ex : File::NotFoundError | File::AccessDeniedError\n    Log.notice(exception: ex) do\n      \"Could not open linked network file, \\\"#{links}\\\"\"\n    end\n  end\nelse\n  if links.is_a?(Hash(String, String))\n    config.linked_network.merge!(links)\n  end\nend\nconfig\n"}},{"html_id":"check_and_init_ranks(config:Config):Config-instance-method","name":"check_and_init_ranks","doc":"Checks every intermediate rank for invalid or otherwise undefined permissions\nand initializes the Ranks hash\n\nReturns an updated `Config` object","summary":"<p>Checks every intermediate rank for invalid or otherwise undefined permissions and initializes the Ranks hash</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(config : Config) : Config","args_html":"(config : <a href=\"Config.html\">Config</a>) : <a href=\"Config.html\">Config</a>","location":{"filename":"src/privateparlor/config/configuration.cr","line_number":53,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/configuration.cr#L53"},"def":{"name":"check_and_init_ranks","args":[{"name":"config","external_name":"config","restriction":"Config"}],"return_type":"Config","visibility":"Public","body":"promote_keys = Set {CommandPermissions::Promote, CommandPermissions::PromoteLower, CommandPermissions::PromoteSame}\nranksay_keys = Set {CommandPermissions::Ranksay, CommandPermissions::RanksayLower}\nif config.ranks[config.default_rank]? == nil\n  Log.notice do\n    \"Default rank #{config.default_rank} does not exist in ranks, using User with rank 0 as default\"\n  end\n  config.default_rank = 0\n  config.ranks[0] = Rank.new(\"User\", Set {CommandPermissions::Upvote, CommandPermissions::Downvote, CommandPermissions::Sign, CommandPermissions::TSign}, Set {MessagePermissions::Text, MessagePermissions::Animation, MessagePermissions::Audio, MessagePermissions::Document, MessagePermissions::Video, MessagePermissions::VideoNote, MessagePermissions::Voice, MessagePermissions::Photo, MessagePermissions::MediaGroup, MessagePermissions::Poll, MessagePermissions::Forward, MessagePermissions::Sticker, MessagePermissions::Dice, MessagePermissions::Dart, MessagePermissions::Basketball, MessagePermissions::Soccerball, MessagePermissions::SlotMachine, MessagePermissions::Bowling, MessagePermissions::Venue, MessagePermissions::Location, MessagePermissions::Contact})\nend\nconfig.ranks.each do |key, rank|\n  permissions = rank.command_permissions\n  if (invalid_promote = rank.command_permissions & promote_keys) && invalid_promote.size > 1\n    Log.notice do\n      \"Removed the following mutually exclusive permissions from Rank #{rank.name}: [#{invalid_promote.join(\", \")}]\"\n    end\n    permissions = rank.command_permissions - promote_keys\n  end\n  if (invalid_ranksay = rank.command_permissions & ranksay_keys) && invalid_ranksay.size > 1\n    Log.notice do\n      \"Removed the following mutually exclusive permissions from Rank #{rank.name}: [#{invalid_ranksay.join(\", \")}]\"\n    end\n    permissions = rank.command_permissions - ranksay_keys\n  end\n  config.ranks[key] = Rank.new(rank.name, permissions, rank.message_permissions)\nend\nconfig\n"}},{"html_id":"check_config(config:Config):Config-instance-method","name":"check_config","doc":"Run additional checks on Config instance variables.\n\nCheck size of `config.smileys`; should be 4\nCheck contents of `config.entities` for mispellings or duplicates.\n\nReturns the given config, or an updated config if any values were invalid.","summary":"<p>Run additional checks on Config instance variables.</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(config : Config) : Config","args_html":"(config : <a href=\"Config.html\">Config</a>) : <a href=\"Config.html\">Config</a>","location":{"filename":"src/privateparlor/config/configuration.cr","line_number":25,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/configuration.cr#L25"},"def":{"name":"check_config","args":[{"name":"config","external_name":"config","restriction":"Config"}],"return_type":"Config","visibility":"Public","body":"message_entities = [\"mention\", \"hashtag\", \"cashtag\", \"bot_command\", \"url\", \"email\", \"phone_number\", \"bold\", \"italic\", \"underline\", \"strikethrough\", \"spoiler\", \"code\", \"pre\", \"text_link\", \"text_mention\", \"custom_emoji\"]\nif config.smileys.size != 4\n  Log.notice do\n    \"Not enough or too many smileys. Should be four, was #{config.smileys}; defaulting to [:), :|, :/, :(]\"\n  end\n  config.smileys = [\":)\", \":|\", \":/\", \":(\"]\nend\nif (config.entities & message_entities).size != config.entities.size\n  Log.notice do\n    \"Could not determine strip_format, was #{config.entities}; check for duplicates or mispellings. Using defaults.\"\n  end\n  config.entities = [\"bold\", \"italic\", \"text_link\"]\nend\nif config.karma_levels.empty? || (config.karma_levels.keys.sort! == config.karma_levels.keys)\nelse\n  Log.notice do\n    \"Karma level keys were not in ascending order; defaulting to no karma levels.\"\n  end\n  config.karma_levels = {} of Int32 => String\nend\nconfig = check_and_init_ranks(config)\nconfig = init_valid_codepoints(config)\nconfig = check_and_init_linked_network(config)\n"}},{"html_id":"init_valid_codepoints(config:Config):Config-instance-method","name":"init_valid_codepoints","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(config : Config) : Config","args_html":"(config : <a href=\"Config.html\">Config</a>) : <a href=\"Config.html\">Config</a>","location":{"filename":"src/privateparlor/config/configuration.cr","line_number":106,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/configuration.cr#L106"},"def":{"name":"init_valid_codepoints","args":[{"name":"config","external_name":"config","restriction":"Config"}],"return_type":"Config","visibility":"Public","body":"if codepoint_tuples = config.intermediate_valid_codepoints\nelse\n  return config\nend\nranges = [] of Range(Int32, Int32)\ncodepoint_tuples.each do |tuple|\n  ranges << (Range.new(tuple[0], tuple[1]))\nend\nconfig.valid_codepoints = ranges\nconfig\n"}},{"html_id":"parse_config:Config-instance-method","name":"parse_config","doc":"Parse config.yaml and returns a `Config` object.\n\nValues that aren't specified in the config file will be set to a default value.","summary":"<p>Parse config.yaml and returns a <code><a href=\"Config.html\">Config</a></code> object.</p>","abstract":false,"location":{"filename":"src/privateparlor/config/configuration.cr","line_number":9,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/configuration.cr#L9"},"def":{"name":"parse_config","return_type":"Config","visibility":"Public","body":"begin\n  check_config(Config.from_yaml(File.open(\"config.yaml\")))\nrescue ex : YAML::ParseException\n  Log.error(exception: ex) do\n    \"Could not parse the given value at row #{ex.line_number}. This could be because a required value was not set or the wrong type was given.\"\n  end\n  exit\nrescue ex : File::NotFoundError | File::AccessDeniedError\n  Log.error(exception: ex) do\n    \"Could not open \\\"./config.yaml\\\". Exiting...\"\n  end\n  exit\nend"}},{"html_id":"set_log(config:Config):Nil-instance-method","name":"set_log","doc":"Reset log with the severity level defined in `config.yaml`.\n\nA file can also be used to store log output. If the file does not exist, a new one will be made.","summary":"<p>Reset log with the severity level defined in <code>config.yaml</code>.</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(config : Config) : Nil","args_html":"(config : <a href=\"Config.html\">Config</a>) : Nil","location":{"filename":"src/privateparlor/config/configuration.cr","line_number":153,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/config/configuration.cr#L153"},"def":{"name":"set_log","args":[{"name":"config","external_name":"config","restriction":"Config"}],"return_type":"Nil","visibility":"Public","body":"if (config.log_level == Log::Severity::Info) && (config.log_file == nil)\n  return\nend\nLog.setup do |log|\n  if path = config.log_file\n    begin\n      if File.file?(path)\n        file = Log::IOBackend.new(File.open(path, \"a+\"))\n      else\n        file = Log::IOBackend.new(File.new(path, \"a+\"))\n      end\n    rescue ex : File::NotFoundError | File::AccessDeniedError\n      Log.error(exception: ex) do\n        \"Could not open/create log file\"\n      end\n    end\n    if file\n      log.bind(\"*\", config.log_level, file)\n    end\n  end\n  log.bind(\"*\", config.log_level, Log::IOBackend.new())\nend\n"}}]},{"html_id":"privateparlor/Database","path":"Database.html","kind":"class","full_name":"Database","name":"Database","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/database.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new(database:DB::Database)-class-method","name":"new","doc":"Create an instance of Database and create the appropriate schema in the SQLite database.","summary":"<p>Create an instance of Database and create the appropriate schema in the SQLite database.</p>","abstract":false,"args":[{"name":"database","external_name":"database","restriction":"DB::Database"}],"args_string":"(database : DB::Database)","args_html":"(database : DB::Database)","location":{"filename":"src/privateparlor/database.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L5"},"def":{"name":"new","args":[{"name":"database","external_name":"database","restriction":"DB::Database"}],"visibility":"Public","body":"_ = allocate\n_.initialize(database)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_user(id,username,realname,rank=0):User|Nil-instance-method","name":"add_user","doc":"Inserts a user with the given *id*, *username*, and *realname* into the database.\n\nReturns the new `User`.","summary":"<p>Inserts a user with the given <em>id</em>, <em>username</em>, and <em>realname</em> into the database.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":""},{"name":"username","external_name":"username","restriction":""},{"name":"realname","external_name":"realname","restriction":""},{"name":"rank","default_value":"0","external_name":"rank","restriction":""}],"args_string":"(id, username, realname, rank = 0) : User | Nil","args_html":"(id, username, realname, rank = <span class=\"n\">0</span>) : <a href=\"Database/User.html\">User</a> | Nil","location":{"filename":"src/privateparlor/database.cr","line_number":327,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L327"},"def":{"name":"add_user","args":[{"name":"id","external_name":"id","restriction":""},{"name":"username","external_name":"username","restriction":""},{"name":"realname","external_name":"realname","restriction":""},{"name":"rank","default_value":"0","external_name":"rank","restriction":""}],"return_type":"User | ::Nil","visibility":"Public","body":"begin\n  user = User.new(id, username, realname, rank)\n  {% if true %}\n      {% arr = [] of ArrayLiteral %}\n      {% for var in User.instance_vars %}\n        {% arr << \"?\" %}\n      {% end %}\n      {% arr = arr.join(\", \") %}\n\n      # Add user to database\n      db.exec(\"INSERT INTO users VALUES (#{{{ arr }}})\", args: user.to_array)\n    {% end %}\n  user\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    add_user(id, username, realname, rank)\n  end\nend"}},{"html_id":"db:DB::Database-instance-method","name":"db","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L2"},"def":{"name":"db","return_type":"DB::Database","visibility":"Public","body":"@db"}},{"html_id":"ensure_schema:Nil-instance-method","name":"ensure_schema","doc":"Ensures that the DB schema is usable by the program.\n\nThis is the same schema used in secretlounge-ng SQLite databases.","summary":"<p>Ensures that the DB schema is usable by the program.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":408,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L408"},"def":{"name":"ensure_schema","return_type":"Nil","visibility":"Public","body":"begin\n  db.exec(\"CREATE TABLE IF NOT EXISTS system_config (\\n      name TEXT NOT NULL,\\n      value TEXT NOT NULL,\\n      PRIMARY KEY (name)\\n    )\")\n  db.exec(\"CREATE TABLE IF NOT EXISTS users (\\n      id BIGINT NOT NULL,\\n      username TEXT,\\n      realname TEXT NOT NULL,\\n      rank INTEGER NOT NULL,\\n      joined TIMESTAMP NOT NULL,\\n      left TIMESTAMP,\\n      lastActive TIMESTAMP NOT NULL,\\n      cooldownUntil TIMESTAMP,\\n      blacklistReason TEXT,\\n      warnings INTEGER NOT NULL,\\n      warnExpiry TIMESTAMP,\\n      karma INTEGER NOT NULL,\\n      hideKarma TINYINT NOT NULL,\\n      debugEnabled TINYINT NOT NULL,\\n      tripcode TEXT,\\n      PRIMARY KEY(id)\\n    )\")\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    ensure_schema\n  end\nend"}},{"html_id":"expire_warnings(warn_expire_hours:Int32):Nil-instance-method","name":"expire_warnings","doc":"Queries the database for warned users and removes warnings they have expired.","summary":"<p>Queries the database for warned users and removes warnings they have expired.</p>","abstract":false,"args":[{"name":"warn_expire_hours","external_name":"warn_expire_hours","restriction":"Int32"}],"args_string":"(warn_expire_hours : Int32) : Nil","args_html":"(warn_expire_hours : Int32) : Nil","location":{"filename":"src/privateparlor/database.cr","line_number":377,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L377"},"def":{"name":"expire_warnings","args":[{"name":"warn_expire_hours","external_name":"warn_expire_hours","restriction":"Int32"}],"return_type":"Nil","visibility":"Public","body":"get_warned_users.each do |user|\n  if expiry = user.warn_expiry\n    if expiry <= Time.utc\n      user.remove_warning(1, warn_expire_hours)\n      modify_user(user)\n    end\n  end\nend"}},{"html_id":"get_blacklisted_users:Array(User)|Nil-instance-method","name":"get_blacklisted_users","doc":"Queries the database for blacklisted users who have been banned within the past 48 hours.\n\nReturns an array of `User` or `Nil` if no users were found.","summary":"<p>Queries the database for blacklisted users who have been banned within the past 48 hours.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":262,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L262"},"def":{"name":"get_blacklisted_users","return_type":"Array(User) | Nil","visibility":"Public","body":"db.query_all(\"SELECT * FROM users WHERE rank = -10 AND left > (?)\", (Time.utc - 48.hours), as: User)"}},{"html_id":"get_inactive_users(limit:Int32):Array(User)|Nil-instance-method","name":"get_inactive_users","abstract":false,"args":[{"name":"limit","external_name":"limit","restriction":"Int32"}],"args_string":"(limit : Int32) : Array(User) | Nil","args_html":"(limit : Int32) : Array(<a href=\"Database/User.html\">User</a>) | Nil","location":{"filename":"src/privateparlor/database.cr","line_number":277,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L277"},"def":{"name":"get_inactive_users","args":[{"name":"limit","external_name":"limit","restriction":"Int32"}],"return_type":"Array(User) | Nil","visibility":"Public","body":"db.query_all(\"SELECT * FROM users WHERE left is NULL AND lastActive < ?\", (Time.utc - limit.days), as: User)"}},{"html_id":"get_invalid_rank_users(values:Array(Int32)):Array(User)|Nil-instance-method","name":"get_invalid_rank_users","abstract":false,"args":[{"name":"values","external_name":"values","restriction":"Array(Int32)"}],"args_string":"(values : Array(Int32)) : Array(User) | Nil","args_html":"(values : Array(Int32)) : Array(<a href=\"Database/User.html\">User</a>) | Nil","location":{"filename":"src/privateparlor/database.cr","line_number":273,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L273"},"def":{"name":"get_invalid_rank_users","args":[{"name":"values","external_name":"values","restriction":"Array(Int32)"}],"return_type":"Array(User) | Nil","visibility":"Public","body":"db.query_all(\"SELECT * FROM users WHERE rank NOT IN (#{values.join(\", \") do\n  \"?\"\nend})\", args: values, as: User)"}},{"html_id":"get_motd:String|Nil-instance-method","name":"get_motd","doc":"Retrieves the motd/rules from the database.\n\nReturns the motd as a string, or returns nil if the motd could not be retrieved.","summary":"<p>Retrieves the motd/rules from the database.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":401,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L401"},"def":{"name":"get_motd","return_type":"String | Nil","visibility":"Public","body":"db.query_one?(\"SELECT value FROM system_config WHERE name = 'motd'\", as: String)"}},{"html_id":"get_prioritized_users(user:User|Nil=nil):Array(Int64)-instance-method","name":"get_prioritized_users","doc":"Queries the database for all user ids, ordered by highest ranking users first then most active users.","summary":"<p>Queries the database for all user ids, ordered by highest ranking users first then most active users.</p>","abstract":false,"args":[{"name":"user","default_value":"nil","external_name":"user","restriction":"User | ::Nil"}],"args_string":"(user : User | Nil = nil) : Array(Int64)","args_html":"(user : <a href=\"Database/User.html\">User</a> | Nil = <span class=\"n\">nil</span>) : Array(Int64)","location":{"filename":"src/privateparlor/database.cr","line_number":310,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L310"},"def":{"name":"get_prioritized_users","args":[{"name":"user","default_value":"nil","external_name":"user","restriction":"User | ::Nil"}],"return_type":"Array(Int64)","visibility":"Public","body":"if user.nil? || user.debug_enabled\n  db.query_all(\"SELECT id FROM users WHERE left IS NULL ORDER BY rank DESC, lastActive DESC\", &.read(Int64))\nelse\n  db.query_all(\"SELECT id\\n        FROM users\\n        WHERE left IS NULL AND id IS NOT ?\\n        ORDER BY rank DESC, lastActive DESC\", args: [user.id], &.read(Int64))\nend"}},{"html_id":"get_user(id):User|Nil-instance-method","name":"get_user","doc":"Queries the database for a user record with the given *id*.\n\nReturns a `User` object.","summary":"<p>Queries the database for a user record with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":""}],"args_string":"(id) : User | Nil","args_html":"(id) : <a href=\"Database/User.html\">User</a> | Nil","location":{"filename":"src/privateparlor/database.cr","line_number":250,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L250"},"def":{"name":"get_user","args":[{"name":"id","external_name":"id","restriction":""}],"return_type":"User | Nil","visibility":"Public","body":"db.query_one?(\"SELECT * FROM users WHERE id = ?\", id, as: User)"}},{"html_id":"get_user_by_arg(arg:String):User|Nil-instance-method","name":"get_user_by_arg","abstract":false,"args":[{"name":"arg","external_name":"arg","restriction":"String"}],"args_string":"(arg : String) : User | Nil","args_html":"(arg : String) : <a href=\"Database/User.html\">User</a> | Nil","location":{"filename":"src/privateparlor/database.cr","line_number":299,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L299"},"def":{"name":"get_user_by_arg","args":[{"name":"arg","external_name":"arg","restriction":"String"}],"return_type":"User | Nil","visibility":"Public","body":"if arg.size == 4\n  get_user_by_oid(arg)\nelse\n  if (val = arg.to_i64?) && (arg.matches?(/[0-9]{5,}/))\n    get_user(val)\n  else\n    get_user_by_name(arg)\n  end\nend"}},{"html_id":"get_user_by_name(username):User|Nil-instance-method","name":"get_user_by_name","doc":"Queries the database for a user with a given *username*.\n\nReturns a `User` object or Nil if no user was found.","summary":"<p>Queries the database for a user with a given <em>username</em>.</p>","abstract":false,"args":[{"name":"username","external_name":"username","restriction":""}],"args_string":"(username) : User | Nil","args_html":"(username) : <a href=\"Database/User.html\">User</a> | Nil","location":{"filename":"src/privateparlor/database.cr","line_number":284,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L284"},"def":{"name":"get_user_by_name","args":[{"name":"username","external_name":"username","restriction":""}],"return_type":"User | Nil","visibility":"Public","body":"if username.starts_with?(\"@\")\n  username = username[1..]\nend\ndb.query_one?(\"SELECT * FROM users WHERE LOWER(username) = ?\", username.downcase, as: User)\n"}},{"html_id":"get_user_by_oid(oid:String):User|Nil-instance-method","name":"get_user_by_oid","abstract":false,"args":[{"name":"oid","external_name":"oid","restriction":"String"}],"args_string":"(oid : String) : User | Nil","args_html":"(oid : String) : <a href=\"Database/User.html\">User</a> | Nil","location":{"filename":"src/privateparlor/database.cr","line_number":291,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L291"},"def":{"name":"get_user_by_oid","args":[{"name":"oid","external_name":"oid","restriction":"String"}],"return_type":"User | Nil","visibility":"Public","body":"(db.query_all(\"SELECT * FROM users WHERE left IS NULL ORDER BY lastActive DESC\", as: User)).each do |user|\n  if user.get_obfuscated_id == oid\n    return user\n  end\nend"}},{"html_id":"get_user_counts:NamedTuple-instance-method","name":"get_user_counts","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":254,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L254"},"def":{"name":"get_user_counts","return_type":"NamedTuple","visibility":"Public","body":"db.query_one(\"SELECT COUNT(id), COUNT(left), (SELECT COUNT(id) FROM users WHERE rank = -10) FROM users\", as: {total: Int32, left: Int32, blacklisted: Int32})"}},{"html_id":"get_warned_users:Array(User)|Nil-instance-method","name":"get_warned_users","doc":"Queries the database for all warned users that are in the chat.\n\nReturns an array of `User` or `Nil` if no users were found.","summary":"<p>Queries the database for all warned users that are in the chat.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":269,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L269"},"def":{"name":"get_warned_users","return_type":"Array(User) | Nil","visibility":"Public","body":"db.query_all(\"SELECT * FROM users WHERE warnings > 0 AND left is NULL\", as: User)"}},{"html_id":"modify_user(user:User):Nil-instance-method","name":"modify_user","doc":"Updates a user record in the database with the current state of *user*.","summary":"<p>Updates a user record in the database with the current state of <em>user</em>.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"User"}],"args_string":"(user : User) : Nil","args_html":"(user : <a href=\"Database/User.html\">User</a>) : Nil","location":{"filename":"src/privateparlor/database.cr","line_number":350,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L350"},"def":{"name":"modify_user","args":[{"name":"user","external_name":"user","restriction":"User"}],"return_type":"Nil","visibility":"Public","body":"begin\n  {% if true %}\n      {% arr = [] of ArrayLiteral %}\n      {% for var in User.instance_vars[1..-1] %}\n        {% arr << \"#{var.name.camelcase(lower: true)} = ?\" %}\n      {% end %}\n      {% arr = arr.join(\", \") %}\n      # Modify user\n      db.exec(\"UPDATE users SET #{{{ arr }}} WHERE id = ?\", args: user.to_array.rotate)\n    {% end %}\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    modify_user(user)\n  end\nend"}},{"html_id":"no_users?:Bool-instance-method","name":"no_users?","doc":"Queries the database for any rows in the user table\n\nReturns true if can't move to next row (table is empty). False otherwise.","summary":"<p>Queries the database for any rows in the user table</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":370,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L370"},"def":{"name":"no_users?","return_type":"Bool","visibility":"Public","body":"!(db.query(\"SELECT id FROM users\") do |rs|\n  rs.move_next\nend)"}},{"html_id":"set_motd(text:String):Nil-instance-method","name":"set_motd","doc":"Sets the motd/rules to the given string.","summary":"<p>Sets the motd/rules to the given string.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Nil","args_html":"(text : String) : Nil","location":{"filename":"src/privateparlor/database.cr","line_number":389,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L389"},"def":{"name":"set_motd","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"begin\n  db.exec(\"REPLACE INTO system_config VALUES ('motd', ?)\", text)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    set_motd(text)\n  end\nend"}}],"types":[{"html_id":"privateparlor/Database/User","path":"Database/User.html","kind":"class","full_name":"Database::User","name":"User","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/DB/Mappable","kind":"module","full_name":"DB::Mappable","name":"Mappable"},{"html_id":"privateparlor/DB/Serializable","kind":"module","full_name":"DB::Serializable","name":"Serializable"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/database.cr","line_number":11,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L11"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"privateparlor/DB/Mappable","kind":"module","full_name":"DB::Mappable","name":"Mappable"},{"html_id":"privateparlor/DB/Serializable","kind":"module","full_name":"DB::Serializable","name":"Serializable"}],"namespace":{"html_id":"privateparlor/Database","kind":"class","full_name":"Database","name":"Database"},"class_methods":[{"html_id":"from_rs(rs:DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : DB::ResultSet)","args_html":"(rs : DB::ResultSet)","location":{"filename":"src/privateparlor/database.cr","line_number":12,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L12"},"def":{"name":"from_rs","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"begin\n  objs = Array(self).new\n  rs.each do\n    objs << (self.new(rs))\n  end\n  objs\nensure\n  rs.close\nend"}}],"constructors":[{"html_id":"new(rs:DB::ResultSet)-class-method","name":"new","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : DB::ResultSet)","args_html":"(rs : DB::ResultSet)","location":{"filename":"src/privateparlor/database.cr","line_number":12,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L12"},"def":{"name":"new","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"instance = allocate\ninstance.initialize(__set_for_db_serializable: rs)\nif instance.responds_to?(:finalize)\n  GC.add_finalizer(instance)\nend\ninstance\n"}},{"html_id":"new(id:Int64,username:Nil|String=nil,realname:String=\"\",rank:Int32=0,joined:Time=Time.utc,left:Time|Nil=nil,last_active:Time=Time.utc,cooldown_until:Time|Nil=nil,blacklist_reason:Nil|String=nil,warnings:Int32=0,warn_expiry:Time|Nil=nil,karma:Int32=0,hide_karma:Bool|Nil=false,debug_enabled:Bool|Nil=false,tripcode:Nil|String=nil)-class-method","name":"new","doc":"Create an instance of `User`","summary":"<p>Create an instance of <code><a href=\"../Database/User.html\">User</a></code></p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::Int64"},{"name":"username","default_value":"nil","external_name":"username","restriction":"::Nil | ::String"},{"name":"realname","default_value":"\"\"","external_name":"realname","restriction":"::String"},{"name":"rank","default_value":"0","external_name":"rank","restriction":"::Int32"},{"name":"joined","default_value":"Time.utc","external_name":"joined","restriction":"::Time"},{"name":"left","default_value":"nil","external_name":"left","restriction":"::Time | ::Nil"},{"name":"last_active","default_value":"Time.utc","external_name":"last_active","restriction":"::Time"},{"name":"cooldown_until","default_value":"nil","external_name":"cooldown_until","restriction":"::Time | ::Nil"},{"name":"blacklist_reason","default_value":"nil","external_name":"blacklist_reason","restriction":"::Nil | ::String"},{"name":"warnings","default_value":"0","external_name":"warnings","restriction":"::Int32"},{"name":"warn_expiry","default_value":"nil","external_name":"warn_expiry","restriction":"::Time | ::Nil"},{"name":"karma","default_value":"0","external_name":"karma","restriction":"::Int32"},{"name":"hide_karma","default_value":"false","external_name":"hide_karma","restriction":"::Bool | ::Nil"},{"name":"debug_enabled","default_value":"false","external_name":"debug_enabled","restriction":"::Bool | ::Nil"},{"name":"tripcode","default_value":"nil","external_name":"tripcode","restriction":"::Nil | ::String"}],"args_string":"(id : Int64, username : Nil | String = nil, realname : String = \"\", rank : Int32 = 0, joined : Time = Time.utc, left : Time | Nil = nil, last_active : Time = Time.utc, cooldown_until : Time | Nil = nil, blacklist_reason : Nil | String = nil, warnings : Int32 = 0, warn_expiry : Time | Nil = nil, karma : Int32 = 0, hide_karma : Bool | Nil = false, debug_enabled : Bool | Nil = false, tripcode : Nil | String = nil)","args_html":"(id : Int64, username : Nil | String = <span class=\"n\">nil</span>, realname : String = <span class=\"s\">&quot;&quot;</span>, rank : Int32 = <span class=\"n\">0</span>, joined : Time = <span class=\"t\">Time</span>.utc, left : Time | Nil = <span class=\"n\">nil</span>, last_active : Time = <span class=\"t\">Time</span>.utc, cooldown_until : Time | Nil = <span class=\"n\">nil</span>, blacklist_reason : Nil | String = <span class=\"n\">nil</span>, warnings : Int32 = <span class=\"n\">0</span>, warn_expiry : Time | Nil = <span class=\"n\">nil</span>, karma : Int32 = <span class=\"n\">0</span>, hide_karma : Bool | Nil = <span class=\"n\">false</span>, debug_enabled : Bool | Nil = <span class=\"n\">false</span>, tripcode : Nil | String = <span class=\"n\">nil</span>)","location":{"filename":"src/privateparlor/database.cr","line_number":37,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L37"},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::Int64"},{"name":"username","default_value":"nil","external_name":"username","restriction":"::Nil | ::String"},{"name":"realname","default_value":"\"\"","external_name":"realname","restriction":"::String"},{"name":"rank","default_value":"0","external_name":"rank","restriction":"::Int32"},{"name":"joined","default_value":"Time.utc","external_name":"joined","restriction":"::Time"},{"name":"left","default_value":"nil","external_name":"left","restriction":"::Time | ::Nil"},{"name":"last_active","default_value":"Time.utc","external_name":"last_active","restriction":"::Time"},{"name":"cooldown_until","default_value":"nil","external_name":"cooldown_until","restriction":"::Time | ::Nil"},{"name":"blacklist_reason","default_value":"nil","external_name":"blacklist_reason","restriction":"::Nil | ::String"},{"name":"warnings","default_value":"0","external_name":"warnings","restriction":"::Int32"},{"name":"warn_expiry","default_value":"nil","external_name":"warn_expiry","restriction":"::Time | ::Nil"},{"name":"karma","default_value":"0","external_name":"karma","restriction":"::Int32"},{"name":"hide_karma","default_value":"false","external_name":"hide_karma","restriction":"::Bool | ::Nil"},{"name":"debug_enabled","default_value":"false","external_name":"debug_enabled","restriction":"::Bool | ::Nil"},{"name":"tripcode","default_value":"nil","external_name":"tripcode","restriction":"::Nil | ::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, username, realname, rank, joined, left, last_active, cooldown_until, blacklist_reason, warnings, warn_expiry, karma, hide_karma, debug_enabled, tripcode)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"blacklist(reason:String|Nil):Nil-instance-method","name":"blacklist","doc":"Set user's rank to blacklisted, force leave, and update blacklist reason.","summary":"<p>Set user's rank to blacklisted, force leave, and update blacklist reason.</p>","abstract":false,"args":[{"name":"reason","external_name":"reason","restriction":"String | Nil"}],"args_string":"(reason : String | Nil) : Nil","args_html":"(reason : String | Nil) : Nil","location":{"filename":"src/privateparlor/database.cr","line_number":201,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L201"},"def":{"name":"blacklist","args":[{"name":"reason","external_name":"reason","restriction":"String | Nil"}],"return_type":"Nil","visibility":"Public","body":"@rank = -10\nself.set_left\n@blacklist_reason = reason\n"}},{"html_id":"blacklist_reason:String|Nil-instance-method","name":"blacklist_reason","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":25,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L25"},"def":{"name":"blacklist_reason","return_type":"String | ::Nil","visibility":"Public","body":"@blacklist_reason"}},{"html_id":"blacklisted?:Bool-instance-method","name":"blacklisted?","doc":"Returns `true` if *rank* is -10; user is blacklisted.\n\nReturns `false` otherwise.","summary":"<p>Returns <code>true</code> if <em>rank</em> is -10; user is blacklisted.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":210,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L210"},"def":{"name":"blacklisted?","return_type":"Bool","visibility":"Public","body":"@rank == -10"}},{"html_id":"can_chat?(limit:Time::Span):Bool-instance-method","name":"can_chat?","doc":"Returns `true` if user is joined, not in cooldown, not blacklisted, and not limited; user can chat\n\nReturns false otherwise.","summary":"<p>Returns <code>true</code> if user is joined, not in cooldown, not blacklisted, and not limited; user can chat</p>","abstract":false,"args":[{"name":"limit","external_name":"limit","restriction":"Time::Span"}],"args_string":"(limit : Time::Span) : Bool","args_html":"(limit : Time::Span) : Bool","location":{"filename":"src/privateparlor/database.cr","line_number":231,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L231"},"def":{"name":"can_chat?","args":[{"name":"limit","external_name":"limit","restriction":"Time::Span"}],"return_type":"Bool","visibility":"Public","body":"if self.rank > 0\n  self.can_chat?\nelse\n  ((self.remove_cooldown && (!self.blacklisted?)) && (!self.left?)) && ((Time.utc - self.joined) > limit)\nend"}},{"html_id":"can_chat?:Bool-instance-method","name":"can_chat?","doc":"Returns `true` if user is joined, not in cooldown, and not blacklisted; user can chat\n\nReturns false otherwise.","summary":"<p>Returns <code>true</code> if user is joined, not in cooldown, and not blacklisted; user can chat</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":224,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L224"},"def":{"name":"can_chat?","return_type":"Bool","visibility":"Public","body":"(self.remove_cooldown && (!self.blacklisted?)) && (!self.left?)"}},{"html_id":"can_use_command?:Bool-instance-method","name":"can_use_command?","doc":"Returns `true` if user is joined and not blacklisted; user can use commands\n\nReturns false otherwise.","summary":"<p>Returns <code>true</code> if user is joined and not blacklisted; user can use commands</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":242,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L242"},"def":{"name":"can_use_command?","return_type":"Bool","visibility":"Public","body":"(!self.blacklisted?) && (!self.left?)"}},{"html_id":"cooldown(cooldown_time:Int32):Time::Span-instance-method","name":"cooldown","abstract":false,"args":[{"name":"cooldown_time","external_name":"cooldown_time","restriction":"Int32"}],"args_string":"(cooldown_time : Int32) : Time::Span","args_html":"(cooldown_time : Int32) : Time::Span","location":{"filename":"src/privateparlor/database.cr","line_number":168,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L168"},"def":{"name":"cooldown","args":[{"name":"cooldown_time","external_name":"cooldown_time","restriction":"Int32"}],"return_type":"Time::Span","visibility":"Public","body":"@cooldown_until = Time.utc + cooldown_time.seconds\ncooldown_time.seconds\n"}},{"html_id":"cooldown_and_warn(cooldown_time_begin:Array(Int32),linear_m:Int32,linear_b:Int32,warn_expire_hours:Int32,penalty:Int32):Time::Span-instance-method","name":"cooldown_and_warn","doc":"Sets user's cooldown and increments total warnings","summary":"<p>Sets user's cooldown and increments total warnings</p>","abstract":false,"args":[{"name":"cooldown_time_begin","external_name":"cooldown_time_begin","restriction":"Array(Int32)"},{"name":"linear_m","external_name":"linear_m","restriction":"Int32"},{"name":"linear_b","external_name":"linear_b","restriction":"Int32"},{"name":"warn_expire_hours","external_name":"warn_expire_hours","restriction":"Int32"},{"name":"penalty","external_name":"penalty","restriction":"Int32"}],"args_string":"(cooldown_time_begin : Array(Int32), linear_m : Int32, linear_b : Int32, warn_expire_hours : Int32, penalty : Int32) : Time::Span","args_html":"(cooldown_time_begin : Array(Int32), linear_m : Int32, linear_b : Int32, warn_expire_hours : Int32, penalty : Int32) : Time::Span","location":{"filename":"src/privateparlor/database.cr","line_number":145,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L145"},"def":{"name":"cooldown_and_warn","args":[{"name":"cooldown_time_begin","external_name":"cooldown_time_begin","restriction":"Array(Int32)"},{"name":"linear_m","external_name":"linear_m","restriction":"Int32"},{"name":"linear_b","external_name":"linear_b","restriction":"Int32"},{"name":"warn_expire_hours","external_name":"warn_expire_hours","restriction":"Int32"},{"name":"penalty","external_name":"penalty","restriction":"Int32"}],"return_type":"Time::Span","visibility":"Public","body":"if @warnings < cooldown_time_begin.size\n  cooldown_time = cooldown_time_begin[@warnings]\nelse\n  cooldown_time = (linear_m * (@warnings - cooldown_time_begin.size)) + linear_b\nend\n@cooldown_until = Time.utc + cooldown_time.minutes\n@warnings = @warnings + 1\n@warn_expiry = Time.utc + warn_expire_hours.hours\nself.decrement_karma(penalty)\ncooldown_time.minutes\n"}},{"html_id":"cooldown_and_warn(cooldown_time:Int32,warn_expire_hours:Int32,penalty:Int32):Time::Span-instance-method","name":"cooldown_and_warn","abstract":false,"args":[{"name":"cooldown_time","external_name":"cooldown_time","restriction":"Int32"},{"name":"warn_expire_hours","external_name":"warn_expire_hours","restriction":"Int32"},{"name":"penalty","external_name":"penalty","restriction":"Int32"}],"args_string":"(cooldown_time : Int32, warn_expire_hours : Int32, penalty : Int32) : Time::Span","args_html":"(cooldown_time : Int32, warn_expire_hours : Int32, penalty : Int32) : Time::Span","location":{"filename":"src/privateparlor/database.cr","line_number":159,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L159"},"def":{"name":"cooldown_and_warn","args":[{"name":"cooldown_time","external_name":"cooldown_time","restriction":"Int32"},{"name":"warn_expire_hours","external_name":"warn_expire_hours","restriction":"Int32"},{"name":"penalty","external_name":"penalty","restriction":"Int32"}],"return_type":"Time::Span","visibility":"Public","body":"@cooldown_until = Time.utc + cooldown_time.seconds\n@warnings = @warnings + 1\n@warn_expiry = Time.utc + warn_expire_hours.hours\nself.decrement_karma(penalty)\ncooldown_time.seconds\n"}},{"html_id":"cooldown_until:Time|Nil-instance-method","name":"cooldown_until","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":23,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L23"},"def":{"name":"cooldown_until","return_type":"Time | ::Nil","visibility":"Public","body":"@cooldown_until"}},{"html_id":"debug_enabled:Bool|Nil-instance-method","name":"debug_enabled","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":33,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L33"},"def":{"name":"debug_enabled","return_type":"Bool | ::Nil","visibility":"Public","body":"@debug_enabled"}},{"html_id":"decrement_karma(amount:Int32=1):Nil-instance-method","name":"decrement_karma","doc":"Decrement the user's karma by a given amount (1 by default)","summary":"<p>Decrement the user's karma by a given amount (1 by default)</p>","abstract":false,"args":[{"name":"amount","default_value":"1","external_name":"amount","restriction":"Int32"}],"args_string":"(amount : Int32 = 1) : Nil","args_html":"(amount : Int32 = <span class=\"n\">1</span>) : Nil","location":{"filename":"src/privateparlor/database.cr","line_number":140,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L140"},"def":{"name":"decrement_karma","args":[{"name":"amount","default_value":"1","external_name":"amount","restriction":"Int32"}],"return_type":"Nil","visibility":"Public","body":"@karma = @karma - amount"}},{"html_id":"get_formatted_name:String-instance-method","name":"get_formatted_name","doc":"Returns a string containing the username with an \"@\" appended to it if the user has a username.\n\nOtherwise, the user's realname is returned.","summary":"<p>Returns a string containing the username with an &quot;@&quot; appended to it if the user has a username.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":71,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L71"},"def":{"name":"get_formatted_name","return_type":"String","visibility":"Public","body":"if username = @username\n  \"@\" + username\nelse\n  @realname\nend"}},{"html_id":"get_obfuscated_id:String-instance-method","name":"get_obfuscated_id","doc":"Get the user's obfuscated ID","summary":"<p>Get the user's obfuscated ID</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":80,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L80"},"def":{"name":"get_obfuscated_id","return_type":"String","visibility":"Public","body":"(Random.new(@id + Time.utc.at_beginning_of_day.to_unix)).base64(3)"}},{"html_id":"get_obfuscated_karma:Int32-instance-method","name":"get_obfuscated_karma","doc":"Get the user's obfuscated karma","summary":"<p>Get the user's obfuscated karma</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":85,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L85"},"def":{"name":"get_obfuscated_karma","return_type":"Int32","visibility":"Public","body":"offset = ((@karma * 0.2).abs + 2).round.to_i\n(@karma + (Random.rand(0..(offset + 1)))) - offset\n"}},{"html_id":"hide_karma:Bool|Nil-instance-method","name":"hide_karma","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":31,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L31"},"def":{"name":"hide_karma","return_type":"Bool | ::Nil","visibility":"Public","body":"@hide_karma"}},{"html_id":"id:Int64-instance-method","name":"id","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":14,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L14"},"def":{"name":"id","return_type":"Int64","visibility":"Public","body":"@id"}},{"html_id":"increment_karma(amount:Int32=1):Nil-instance-method","name":"increment_karma","doc":"Increment the user's karma by a given amount (1 by default)","summary":"<p>Increment the user's karma by a given amount (1 by default)</p>","abstract":false,"args":[{"name":"amount","default_value":"1","external_name":"amount","restriction":"Int32"}],"args_string":"(amount : Int32 = 1) : Nil","args_html":"(amount : Int32 = <span class=\"n\">1</span>) : Nil","location":{"filename":"src/privateparlor/database.cr","line_number":135,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L135"},"def":{"name":"increment_karma","args":[{"name":"amount","default_value":"1","external_name":"amount","restriction":"Int32"}],"return_type":"Nil","visibility":"Public","body":"@karma = @karma + amount"}},{"html_id":"joined:Time-instance-method","name":"joined","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":18,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L18"},"def":{"name":"joined","return_type":"Time","visibility":"Public","body":"@joined"}},{"html_id":"karma:Int32-instance-method","name":"karma","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":29,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L29"},"def":{"name":"karma","return_type":"Int32","visibility":"Public","body":"@karma"}},{"html_id":"last_active:Time-instance-method","name":"last_active","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":21,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L21"},"def":{"name":"last_active","return_type":"Time","visibility":"Public","body":"@last_active"}},{"html_id":"left:Time|Nil-instance-method","name":"left","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":19,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L19"},"def":{"name":"left","return_type":"Time | ::Nil","visibility":"Public","body":"@left"}},{"html_id":"left?:Bool-instance-method","name":"left?","doc":"Returns `true` if *left* is not nil; user has left the chat.\n\nReturns `false` otherwise.","summary":"<p>Returns <code>true</code> if <em>left</em> is not nil; user has left the chat.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":217,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L217"},"def":{"name":"left?","return_type":"Bool","visibility":"Public","body":"@left != nil"}},{"html_id":"rank:Int32-instance-method","name":"rank","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":17,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L17"},"def":{"name":"rank","return_type":"Int32","visibility":"Public","body":"@rank"}},{"html_id":"realname:String-instance-method","name":"realname","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":16,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L16"},"def":{"name":"realname","return_type":"String","visibility":"Public","body":"@realname"}},{"html_id":"rejoin:Nil-instance-method","name":"rejoin","doc":"Set *left* to nil, meaning that User has joined the chat.","summary":"<p>Set <em>left</em> to nil, meaning that User has joined the chat.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":91,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L91"},"def":{"name":"rejoin","return_type":"Nil","visibility":"Public","body":"@left = nil"}},{"html_id":"remove_cooldown(override:Bool=false):Bool-instance-method","name":"remove_cooldown","doc":"Removes a cooldown from a user if it has expired.\n\nReturns true if the cooldown can be expired, false otherwise","summary":"<p>Removes a cooldown from a user if it has expired.</p>","abstract":false,"args":[{"name":"override","default_value":"false","external_name":"override","restriction":"Bool"}],"args_string":"(override : Bool = false) : Bool","args_html":"(override : Bool = <span class=\"n\">false</span>) : Bool","location":{"filename":"src/privateparlor/database.cr","line_number":177,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L177"},"def":{"name":"remove_cooldown","args":[{"name":"override","default_value":"false","external_name":"override","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"if cooldown = @cooldown_until\n  if cooldown < Time.utc || override\n    @cooldown_until = nil\n  else\n    return false\n  end\nend\ntrue\n"}},{"html_id":"remove_warning(amount:Int32,warn_expire_hours:Int32):Nil-instance-method","name":"remove_warning","doc":"Removes one or multiple warnings from a user and resets the `warn_expiry`","summary":"<p>Removes one or multiple warnings from a user and resets the <code><a href=\"../Database/User.html#warn_expiry%3ATime%7CNil-instance-method\">#warn_expiry</a></code></p>","abstract":false,"args":[{"name":"amount","external_name":"amount","restriction":"Int32"},{"name":"warn_expire_hours","external_name":"warn_expire_hours","restriction":"Int32"}],"args_string":"(amount : Int32, warn_expire_hours : Int32) : Nil","args_html":"(amount : Int32, warn_expire_hours : Int32) : Nil","location":{"filename":"src/privateparlor/database.cr","line_number":190,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L190"},"def":{"name":"remove_warning","args":[{"name":"amount","external_name":"amount","restriction":"Int32"},{"name":"warn_expire_hours","external_name":"warn_expire_hours","restriction":"Int32"}],"return_type":"Nil","visibility":"Public","body":"@warnings = @warnings - amount\nif @warnings > 0\n  @warn_expiry = Time.utc + warn_expire_hours.hours\nelse\n  @warn_expiry = nil\nend\n"}},{"html_id":"set_active:Nil-instance-method","name":"set_active","doc":"Set *last_active* to the current time","summary":"<p>Set <em>last_active</em> to the current time</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":102,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L102"},"def":{"name":"set_active","return_type":"Nil","visibility":"Public","body":"@last_active = Time.utc"}},{"html_id":"set_left:Nil-instance-method","name":"set_left","doc":"Set *left* to the current time; user has left the chat.","summary":"<p>Set <em>left</em> to the current time; user has left the chat.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":107,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L107"},"def":{"name":"set_left","return_type":"Nil","visibility":"Public","body":"@left = Time.utc"}},{"html_id":"set_rank(rank_value:Int32):Nil-instance-method","name":"set_rank","doc":"Set *rank* to the given `Ranks` value.","summary":"<p>Set <em>rank</em> to the given <code>Ranks</code> value.</p>","abstract":false,"args":[{"name":"rank_value","external_name":"rank_value","restriction":"Int32"}],"args_string":"(rank_value : Int32) : Nil","args_html":"(rank_value : Int32) : Nil","location":{"filename":"src/privateparlor/database.cr","line_number":112,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L112"},"def":{"name":"set_rank","args":[{"name":"rank_value","external_name":"rank_value","restriction":"Int32"}],"return_type":"Nil","visibility":"Public","body":"if @rank <= rank_value\n  @rank = rank_value\nelse\n  @rank = rank_value\nend"}},{"html_id":"set_tripcode(tripcode:String):Nil-instance-method","name":"set_tripcode","abstract":false,"args":[{"name":"tripcode","external_name":"tripcode","restriction":"String"}],"args_string":"(tripcode : String) : Nil","args_html":"(tripcode : String) : Nil","location":{"filename":"src/privateparlor/database.cr","line_number":120,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L120"},"def":{"name":"set_tripcode","args":[{"name":"tripcode","external_name":"tripcode","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"@tripcode = tripcode"}},{"html_id":"to_array-instance-method","name":"to_array","doc":"Returns an array with all the values in `User`. Used for Database query arguments.","summary":"<p>Returns an array with all the values in <code><a href=\"../Database/User.html\">User</a></code>.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":57,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L57"},"def":{"name":"to_array","visibility":"Public","body":"{% if true %}\n        [\n        {% for var in User.instance_vars[0..-2] %}\n          @{{ var.id }},\n        {% end %}\n          @{{ User.instance_vars.last.id }}\n        ]\n      {% end %}"}},{"html_id":"toggle_debug:Nil-instance-method","name":"toggle_debug","doc":"Set *debug_enabled* to its opposite value.","summary":"<p>Set <em>debug_enabled</em> to its opposite value.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":130,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L130"},"def":{"name":"toggle_debug","return_type":"Nil","visibility":"Public","body":"@debug_enabled = !debug_enabled"}},{"html_id":"toggle_karma:Nil-instance-method","name":"toggle_karma","doc":"Set *hide_karma* to its opposite value.","summary":"<p>Set <em>hide_karma</em> to its opposite value.</p>","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":125,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L125"},"def":{"name":"toggle_karma","return_type":"Nil","visibility":"Public","body":"@hide_karma = !hide_karma"}},{"html_id":"tripcode:String|Nil-instance-method","name":"tripcode","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":34,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L34"},"def":{"name":"tripcode","return_type":"String | ::Nil","visibility":"Public","body":"@tripcode"}},{"html_id":"update_names(username:String|Nil,fullname:String):Nil-instance-method","name":"update_names","doc":"Updates *username* and *real name*","summary":"<p>Updates <em>username</em> and <em>real name</em></p>","abstract":false,"args":[{"name":"username","external_name":"username","restriction":"String | Nil"},{"name":"fullname","external_name":"fullname","restriction":"String"}],"args_string":"(username : String | Nil, fullname : String) : Nil","args_html":"(username : String | Nil, fullname : String) : Nil","location":{"filename":"src/privateparlor/database.cr","line_number":96,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L96"},"def":{"name":"update_names","args":[{"name":"username","external_name":"username","restriction":"String | Nil"},{"name":"fullname","external_name":"fullname","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"@username = username\n@realname = fullname\n"}},{"html_id":"username:String|Nil-instance-method","name":"username","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":15,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L15"},"def":{"name":"username","return_type":"String | ::Nil","visibility":"Public","body":"@username"}},{"html_id":"warn_expiry:Time|Nil-instance-method","name":"warn_expiry","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":28,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L28"},"def":{"name":"warn_expiry","return_type":"Time | ::Nil","visibility":"Public","body":"@warn_expiry"}},{"html_id":"warnings:Int32-instance-method","name":"warnings","abstract":false,"location":{"filename":"src/privateparlor/database.cr","line_number":26,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/database.cr#L26"},"def":{"name":"warnings","return_type":"Int32","visibility":"Public","body":"@warnings"}}]}]},{"html_id":"privateparlor/DatabaseHistory","path":"DatabaseHistory.html","kind":"class","full_name":"DatabaseHistory","name":"DatabaseHistory","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/history/database_history.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new(database:DB::Database,message_life:Time::Span)-class-method","name":"new","doc":"Create an instance of DatabaseHistory and create the appropriate schema in the SQLite database.","summary":"<p>Create an instance of DatabaseHistory and create the appropriate schema in the SQLite database.</p>","abstract":false,"args":[{"name":"database","external_name":"database","restriction":"DB::Database"},{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"args_string":"(database : DB::Database, message_life : Time::Span)","args_html":"(database : DB::Database, message_life : Time::Span)","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L6"},"def":{"name":"new","args":[{"name":"database","external_name":"database","restriction":"DB::Database"},{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"visibility":"Public","body":"_ = allocate\n_.initialize(database, message_life)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_rating(msid:Int64,uid:Int64):Bool-instance-method","name":"add_rating","doc":"Adds a rating entry to the karma table with the given data\n\nReturns true if the user was successfully added to the karma table; false if the user was already in it.","summary":"<p>Adds a rating entry to the karma table with the given data</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"uid","external_name":"uid","restriction":"Int64"}],"args_string":"(msid : Int64, uid : Int64) : Bool","args_html":"(msid : Int64, uid : Int64) : Bool","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":105,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L105"},"def":{"name":"add_rating","args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"uid","external_name":"uid","restriction":"Int64"}],"return_type":"Bool","visibility":"Public","body":"begin\n  db.exec(\"INSERT INTO karma VALUES (?, ?)\", args: [msid, uid])\n  true\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    return add_rating(msid, uid)\n  end\n  false\nend"}},{"html_id":"add_to_cache(origin_msid:Int64,msid:Int64,receiver_id:Int64):Nil-instance-method","name":"add_to_cache","doc":"Adds receiver_id and its associated msid to the receivers table","summary":"<p>Adds receiver_id and its associated msid to the receivers table</p>","abstract":false,"args":[{"name":"origin_msid","external_name":"origin_msid","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"}],"args_string":"(origin_msid : Int64, msid : Int64, receiver_id : Int64) : Nil","args_html":"(origin_msid : Int64, msid : Int64, receiver_id : Int64) : Nil","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":30,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L30"},"def":{"name":"add_to_cache","args":[{"name":"origin_msid","external_name":"origin_msid","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"begin\n  db.exec(\"INSERT INTO receivers VALUES (?, ?, ?)\", args: [msid, receiver_id, origin_msid])\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    add_to_cache(origin_msid, msid, receiver_id)\n  end\nend"}},{"html_id":"add_warning(msid:Int64):Nil-instance-method","name":"add_warning","doc":"Set the warned attribute to true in message group associated with the given MSID.","summary":"<p>Set the warned attribute to true in message group associated with the given MSID.</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Nil","args_html":"(msid : Int64) : Nil","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":117,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L117"},"def":{"name":"add_warning","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"begin\n  db.exec(\"UPDATE message_groups\\n      SET warned = TRUE\\n      WHERE messageGroupID = ?\", get_origin_msid(msid))\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    add_warning(msid)\n  end\nend"}},{"html_id":"db:DB::Database-instance-method","name":"db","abstract":false,"location":{"filename":"src/privateparlor/history/database_history.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L2"},"def":{"name":"db","return_type":"DB::Database","visibility":"Public","body":"@db"}},{"html_id":"del_message_group(msid:Int64):Int64|Nil-instance-method","name":"del_message_group","doc":"Delete message group","summary":"<p>Delete message group</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Int64 | Nil","args_html":"(msid : Int64) : Int64 | Nil","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":143,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L143"},"def":{"name":"del_message_group","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64 | ::Nil","visibility":"Public","body":"origin_msid = get_origin_msid(msid)\ndelete_database_message_group(origin_msid)\norigin_msid\n"}},{"html_id":"delete_database_message_group(origin_msid:Int64|Nil)-instance-method","name":"delete_database_message_group","abstract":false,"args":[{"name":"origin_msid","external_name":"origin_msid","restriction":"Int64 | ::Nil"}],"args_string":"(origin_msid : Int64 | Nil)","args_html":"(origin_msid : Int64 | Nil)","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":151,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L151"},"def":{"name":"delete_database_message_group","args":[{"name":"origin_msid","external_name":"origin_msid","restriction":"Int64 | ::Nil"}],"visibility":"Public","body":"begin\n  db.exec(\"DELETE FROM message_groups WHERE messageGroupID = ?\", origin_msid)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    delete_database_message_group(origin_msid)\n  end\nend"}},{"html_id":"delete_expired_messages:Nil-instance-method","name":"delete_expired_messages","abstract":false,"location":{"filename":"src/privateparlor/history/database_history.cr","line_number":177,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L177"},"def":{"name":"delete_expired_messages","return_type":"Nil","visibility":"Public","body":"begin\n  db.exec(\"DELETE FROM message_groups WHERE sentTime <= ?\", Time.utc - @lifespan)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    delete_expired_messages\n  end\nend"}},{"html_id":"ensure_schema:Nil-instance-method","name":"ensure_schema","doc":"Ensures that the DB schema for persisting message history is usable by the program.","summary":"<p>Ensures that the DB schema for persisting message history is usable by the program.</p>","abstract":false,"location":{"filename":"src/privateparlor/history/database_history.cr","line_number":187,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L187"},"def":{"name":"ensure_schema","return_type":"Nil","visibility":"Public","body":"begin\n  db.exec(\"PRAGMA foreign_keys = ON\")\n  db.exec(\"CREATE TABLE IF NOT EXISTS message_groups (\\n      messageGroupID BIGINT NOT NULL,\\n      senderID BIGINT NOT NULL,\\n      sentTime TIMESTAMP NOT NULL,\\n      warned TINYINT NOT NULL,\\n      PRIMARY KEY (messageGroupID)\\n    )\")\n  db.exec(\"CREATE TABLE IF NOT EXISTS receivers (\\n      receiverMSID BIGINT NOT NULL,\\n      receiverID BIGINT NOT NULL,\\n      messageGroupID BIGINT NOT NULL,\\n      PRIMARY KEY (receiverMSID),\\n      FOREIGN KEY (messageGroupID) REFERENCES message_groups(messageGroupID)\\n      ON DELETE CASCADE\\n    )\")\n  db.exec(\"CREATE TABLE IF NOT EXISTS karma (\\n      messageGroupID BIGINT NOT NULL,\\n      userID BIGINT NOT NULL,\\n      PRIMARY KEY (messageGroupID),\\n      FOREIGN KEY (messageGroupID) REFERENCES receivers(receiverMSID)\\n      ON DELETE CASCADE\\n    )\")\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    ensure_schema\n  end\nend"}},{"html_id":"expire:Nil-instance-method","name":"expire","doc":"Expire messages","summary":"<p>Expire messages</p>","abstract":false,"location":{"filename":"src/privateparlor/history/database_history.cr","line_number":161,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L161"},"def":{"name":"expire","return_type":"Nil","visibility":"Public","body":"count = db.query_one(\"SELECT COUNT(messageGroupID)\\n      FROM message_groups\\n      WHERE sentTime <= ?\", Time.utc - @lifespan, as: Int32)\ndelete_expired_messages\nif count > 0\n  Log.debug do\n    \"Expired #{count} messages from the cache\"\n  end\nend\n"}},{"html_id":"get_all_msids(msid:Int64):Hash-instance-method","name":"get_all_msids","doc":"Get all receivers for a message group associated with the given MSID","summary":"<p>Get all receivers for a message group associated with the given MSID</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Hash","args_html":"(msid : Int64) : Hash","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":58,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L58"},"def":{"name":"get_all_msids","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Hash","visibility":"Public","body":"origin_msid = get_origin_msid(msid)\n(db.query_all(\"SELECT senderID, messageGroupID\\n      FROM message_groups\\n      WHERE messageGroupID = ?\\n      UNION\\n      SELECT receiverID, receiverMSID\\n      FROM receivers\\n      WHERE messageGroupID = ?\", origin_msid, origin_msid, as: {Int64, Int64})).to_h\n"}},{"html_id":"get_msid(msid:Int64,receiver_id:Int64):Int64|Nil-instance-method","name":"get_msid","doc":"Get receiver msid from the given MSID and receiver ID","summary":"<p>Get receiver msid from the given MSID and receiver ID</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"}],"args_string":"(msid : Int64, receiver_id : Int64) : Int64 | Nil","args_html":"(msid : Int64, receiver_id : Int64) : Int64 | Nil","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":75,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L75"},"def":{"name":"get_msid","args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"}],"return_type":"Int64 | Nil","visibility":"Public","body":"(get_all_msids(msid))[receiver_id]?"}},{"html_id":"get_msids_from_user(uid:Int64):Set(Int64)-instance-method","name":"get_msids_from_user","doc":"Get all MSIDs sent by a user","summary":"<p>Get all MSIDs sent by a user</p>","abstract":false,"args":[{"name":"uid","external_name":"uid","restriction":"Int64"}],"args_string":"(uid : Int64) : Set(Int64)","args_html":"(uid : Int64) : Set(Int64)","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":92,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L92"},"def":{"name":"get_msids_from_user","args":[{"name":"uid","external_name":"uid","restriction":"Int64"}],"return_type":"Set(Int64)","visibility":"Public","body":"(db.query_all(\"SELECT messageGroupID\\n      FROM message_groups\\n      WHERE senderID = ?\", uid, as: Int64)).to_set"}},{"html_id":"get_origin_msid(msid:Int64):Int64|Nil-instance-method","name":"get_origin_msid","doc":"Returns the messageGroupID from the given MSID, which may or may not be in in the receivers table","summary":"<p>Returns the messageGroupID from the given MSID, which may or may not be in in the receivers table</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Int64 | Nil","args_html":"(msid : Int64) : Int64 | Nil","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":43,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L43"},"def":{"name":"get_origin_msid","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64 | Nil","visibility":"Public","body":"db.query_one?(\"SELECT messageGroupID\\n      FROM receivers\\n      where receiverMSID = ?\\n      UNION\\n      select messageGroupID\\n      FROM message_groups\\n      WHERE messageGroupID = ?\", msid, msid, as: Int64)"}},{"html_id":"get_sender_id(msid:Int64):Int64|Nil-instance-method","name":"get_sender_id","doc":"Get sender_id of a specific message group","summary":"<p>Get sender_id of a specific message group</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Int64 | Nil","args_html":"(msid : Int64) : Int64 | Nil","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":80,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L80"},"def":{"name":"get_sender_id","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64 | Nil","visibility":"Public","body":"db.query_one?(\"SELECT DISTINCT senderID\\n      FROM message_groups\\n      JOIN receivers ON receivers.messageGroupID = message_groups.messageGroupID\\n      WHERE receivers.receiverMSID = ? OR message_groups.messageGroupID = ?\", msid, msid, as: Int64)"}},{"html_id":"get_warning(msid:Int64):Bool|Nil-instance-method","name":"get_warning","doc":"Returns true if the associated message group was warned; false otherwise.","summary":"<p>Returns true if the associated message group was warned; false otherwise.</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Bool | Nil","args_html":"(msid : Int64) : Bool | Nil","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":132,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L132"},"def":{"name":"get_warning","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Bool | Nil","visibility":"Public","body":"db.query_one?(\"SELECT warned\\n      FROM message_groups\\n      WHERE messageGroupID = ?\", get_origin_msid(msid), as: Bool)"}},{"html_id":"lifespan:Time::Span-instance-method","name":"lifespan","abstract":false,"location":{"filename":"src/privateparlor/history/database_history.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L3"},"def":{"name":"lifespan","return_type":"Time::Span","visibility":"Public","body":"@lifespan"}},{"html_id":"new_message(sender_id:Int64,msid:Int64):Int64-instance-method","name":"new_message","doc":"Adds a new entry to the message_groups table with the *sender_id* and its associated *msid*\n\nReturns the original msid of this message group","summary":"<p>Adds a new entry to the message_groups table with the <em>sender_id</em> and its associated <em>msid</em></p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(sender_id : Int64, msid : Int64) : Int64","args_html":"(sender_id : Int64, msid : Int64) : Int64","location":{"filename":"src/privateparlor/history/database_history.cr","line_number":15,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/database_history.cr#L15"},"def":{"name":"new_message","args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64","visibility":"Public","body":"begin\n  db.exec(\"INSERT INTO message_groups VALUES (?, ?, ?, ?)\", args: [msid, sender_id, Time.utc, false])\n  msid\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    return new_message(sender_id, msid)\n  end\n  msid\nend"}}]},{"html_id":"privateparlor/DatabaseWarden","path":"DatabaseWarden.html","kind":"module","full_name":"DatabaseWarden","name":"DatabaseWarden","abstract":false,"locations":[{"filename":"src/management/database_warden.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"privateparlor/DatabaseWarden","kind":"module","full_name":"DatabaseWarden","name":"DatabaseWarden"}],"instance_methods":[{"html_id":"ban_user(db:DB::Database,id:Int64,db_name:String,reason:String=\"\"):DB::ExecResult|Nil-instance-method","name":"ban_user","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"db_name","external_name":"db_name","restriction":"String"},{"name":"reason","default_value":"\"\"","external_name":"reason","restriction":"String"}],"args_string":"(db : DB::Database, id : Int64, db_name : String, reason : String = \"\") : DB::ExecResult | Nil","args_html":"(db : DB::Database, id : Int64, db_name : String, reason : String = <span class=\"s\">&quot;&quot;</span>) : DB::ExecResult | Nil","location":{"filename":"src/management/database_warden.cr","line_number":78,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L78"},"def":{"name":"ban_user","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"db_name","external_name":"db_name","restriction":"String"},{"name":"reason","default_value":"\"\"","external_name":"reason","restriction":"String"}],"return_type":"DB::ExecResult | ::Nil","visibility":"Public","body":"begin\n  db.exec(\"UPDATE users SET rank = ?, left = ?, blacklistReason = ? WHERE id = ?\", -10, Time.utc, reason, id)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    ban_user(db, id, db_name)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when modifying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"ban_user(db:DB::Database,name:String,db_name:String):DB::ExecResult|Nil-instance-method","name":"ban_user","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"name","external_name":"name","restriction":"String"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"args_string":"(db : DB::Database, name : String, db_name : String) : DB::ExecResult | Nil","args_html":"(db : DB::Database, name : String, db_name : String) : DB::ExecResult | Nil","location":{"filename":"src/management/database_warden.cr","line_number":88,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L88"},"def":{"name":"ban_user","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"name","external_name":"name","restriction":"String"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"return_type":"DB::ExecResult | ::Nil","visibility":"Public","body":"begin\n  db.exec(\"UPDATE users SET rank = ?, left = ? WHERE realname = ? OR username = ?\", -10, Time.utc, name, name)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    ban_user(db, name, db_name)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when modifying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"create_banned_user(db:DB::Database,id:Int64,db_name:String,reason:String=\"\"):DB::ExecResult|Nil-instance-method","name":"create_banned_user","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"db_name","external_name":"db_name","restriction":"String"},{"name":"reason","default_value":"\"\"","external_name":"reason","restriction":"String"}],"args_string":"(db : DB::Database, id : Int64, db_name : String, reason : String = \"\") : DB::ExecResult | Nil","args_html":"(db : DB::Database, id : Int64, db_name : String, reason : String = <span class=\"s\">&quot;&quot;</span>) : DB::ExecResult | Nil","location":{"filename":"src/management/database_warden.cr","line_number":98,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L98"},"def":{"name":"create_banned_user","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"db_name","external_name":"db_name","restriction":"String"},{"name":"reason","default_value":"\"\"","external_name":"reason","restriction":"String"}],"return_type":"DB::ExecResult | ::Nil","visibility":"Public","body":"begin\n  db.exec(\"INSERT INTO users (id, realname, rank, joined, left, lastActive, warnings, karma, hideKarma, debugEnabled, blacklistReason) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\", id, \"BLACKLISTED\", -10, Time.utc, Time.utc, Time.utc, 0, 0, 0, 0, reason)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    create_banned_user(db, id, db_name, reason)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when modifying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"find_user(db:DB::Database,id:Int64,db_name:String):User|Nil-instance-method","name":"find_user","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"args_string":"(db : DB::Database, id : Int64, db_name : String) : User | Nil","args_html":"(db : DB::Database, id : Int64, db_name : String) : <a href=\"User.html\">User</a> | Nil","location":{"filename":"src/management/database_warden.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L6"},"def":{"name":"find_user","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"return_type":"User | ::Nil","visibility":"Public","body":"begin\n  db.query_one?(\"SELECT * FROM users WHERE id = ?\", id, as: User)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    find_user(db, id, db_name)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when querying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"find_user(db:DB::Database,name:String,db_name:String):User|Nil-instance-method","name":"find_user","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"name","external_name":"name","restriction":"String"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"args_string":"(db : DB::Database, name : String, db_name : String) : User | Nil","args_html":"(db : DB::Database, name : String, db_name : String) : <a href=\"User.html\">User</a> | Nil","location":{"filename":"src/management/database_warden.cr","line_number":16,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L16"},"def":{"name":"find_user","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"name","external_name":"name","restriction":"String"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"return_type":"User | ::Nil","visibility":"Public","body":"begin\n  db.query_one?(\"SELECT * FROM users WHERE realname = ? OR username = ?\", name, name, as: User)\nrescue DB::Error\n  STDERR.puts(\"ERROR: Querying \\\"#{db_name}\\\" database for user #{name} returned multiple users. Please use a user ID for this operation.\")\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    find_user(db, name, db_name)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when querying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"get_banned_users(db:DB::Database,db_name:String,time:Time):Array(User)|Nil-instance-method","name":"get_banned_users","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"db_name","external_name":"db_name","restriction":"String"},{"name":"time","external_name":"time","restriction":"Time"}],"args_string":"(db : DB::Database, db_name : String, time : Time) : Array(User) | Nil","args_html":"(db : DB::Database, db_name : String, time : Time) : Array(<a href=\"User.html\">User</a>) | Nil","location":{"filename":"src/management/database_warden.cr","line_number":141,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L141"},"def":{"name":"get_banned_users","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"db_name","external_name":"db_name","restriction":"String"},{"name":"time","external_name":"time","restriction":"Time"}],"return_type":"Array(User) | ::Nil","visibility":"Public","body":"begin\n  db.query_all(\"SELECT * FROM users WHERE rank = -10 AND left >= ?\", time, as: User)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    get_banned_users(db, db_name, time)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when querying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"get_banned_users(db:DB::Database,db_name:String):Array(User)|Nil-instance-method","name":"get_banned_users","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"args_string":"(db : DB::Database, db_name : String) : Array(User) | Nil","args_html":"(db : DB::Database, db_name : String) : Array(<a href=\"User.html\">User</a>) | Nil","location":{"filename":"src/management/database_warden.cr","line_number":131,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L131"},"def":{"name":"get_banned_users","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"return_type":"Array(User) | ::Nil","visibility":"Public","body":"begin\n  db.query_all(\"SELECT * FROM users WHERE rank = -10\", as: User)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    get_banned_users(db, db_name)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when querying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"list_banned_users(db:DB::Database,db_name:String):Array(User)|Nil-instance-method","name":"list_banned_users","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"args_string":"(db : DB::Database, db_name : String) : Array(User) | Nil","args_html":"(db : DB::Database, db_name : String) : Array(<a href=\"User.html\">User</a>) | Nil","location":{"filename":"src/management/database_warden.cr","line_number":38,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L38"},"def":{"name":"list_banned_users","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"return_type":"Array(User) | ::Nil","visibility":"Public","body":"begin\n  db.query_all(\"SELECT * FROM users WHERE rank = -10\", as: User)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    list_banned_users(db, db_name)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when querying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"list_ranked_users(db:DB::Database,db_name:String):Array(User)|Nil-instance-method","name":"list_ranked_users","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"args_string":"(db : DB::Database, db_name : String) : Array(User) | Nil","args_html":"(db : DB::Database, db_name : String) : Array(<a href=\"User.html\">User</a>) | Nil","location":{"filename":"src/management/database_warden.cr","line_number":28,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L28"},"def":{"name":"list_ranked_users","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"return_type":"Array(User) | ::Nil","visibility":"Public","body":"begin\n  db.query_all(\"SELECT * FROM users WHERE rank > 0\", as: User)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    list_ranked_users(db, db_name)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when querying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"set_user_rank(db:DB::Database,id:Int64,rank:Int32,db_name:String):DB::ExecResult|Nil-instance-method","name":"set_user_rank","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"args_string":"(db : DB::Database, id : Int64, rank : Int32, db_name : String) : DB::ExecResult | Nil","args_html":"(db : DB::Database, id : Int64, rank : Int32, db_name : String) : DB::ExecResult | Nil","location":{"filename":"src/management/database_warden.cr","line_number":48,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L48"},"def":{"name":"set_user_rank","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"return_type":"DB::ExecResult | ::Nil","visibility":"Public","body":"begin\n  db.exec(\"UPDATE users SET rank = ? WHERE id = ?\", rank, id)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    set_user_rank(db, id, rank, db_name)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when modifying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"set_user_rank(db:DB::Database,name:String,rank:Int32,db_name:String):DB::ExecResult|Nil-instance-method","name":"set_user_rank","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"name","external_name":"name","restriction":"String"},{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"args_string":"(db : DB::Database, name : String, rank : Int32, db_name : String) : DB::ExecResult | Nil","args_html":"(db : DB::Database, name : String, rank : Int32, db_name : String) : DB::ExecResult | Nil","location":{"filename":"src/management/database_warden.cr","line_number":58,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L58"},"def":{"name":"set_user_rank","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"name","external_name":"name","restriction":"String"},{"name":"rank","external_name":"rank","restriction":"Int32"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"return_type":"DB::ExecResult | ::Nil","visibility":"Public","body":"begin\n  db.exec(\"UPDATE users SET rank = ? WHERE realname = ? OR username = ?\", rank, name, name)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    set_user_rank(db, name, rank, db_name)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when modifying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"unban_user(db:DB::Database,id:Int64,db_name:String):DB::ExecResult|Nil-instance-method","name":"unban_user","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"args_string":"(db : DB::Database, id : Int64, db_name : String) : DB::ExecResult | Nil","args_html":"(db : DB::Database, id : Int64, db_name : String) : DB::ExecResult | Nil","location":{"filename":"src/management/database_warden.cr","line_number":111,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L111"},"def":{"name":"unban_user","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"return_type":"DB::ExecResult | ::Nil","visibility":"Public","body":"begin\n  db.exec(\"UPDATE users SET rank = ? WHERE id = ?\", 0, id)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    unban_user(db, id, db_name)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when modifying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}},{"html_id":"unban_user(db:DB::Database,name:String,db_name:String):DB::ExecResult|Nil-instance-method","name":"unban_user","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"name","external_name":"name","restriction":"String"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"args_string":"(db : DB::Database, name : String, db_name : String) : DB::ExecResult | Nil","args_html":"(db : DB::Database, name : String, db_name : String) : DB::ExecResult | Nil","location":{"filename":"src/management/database_warden.cr","line_number":121,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/database_warden.cr#L121"},"def":{"name":"unban_user","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"name","external_name":"name","restriction":"String"},{"name":"db_name","external_name":"db_name","restriction":"String"}],"return_type":"DB::ExecResult | ::Nil","visibility":"Public","body":"begin\n  db.exec(\"UPDATE users SET rank = ? WHERE realname = ? OR username = ?\", 0, name, name)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    unban_user(db, name, db_name)\n  else\n    STDERR.puts(\"ERROR: Exception occurred when modifying the \\\"#{db_name}\\\" database; ensure that it contains a valid Private Parlor schema\")\n  end\nend"}}]},{"html_id":"privateparlor/Format","path":"Format.html","kind":"module","full_name":"Format","name":"Format","abstract":false,"ancestors":[{"html_id":"privateparlor/Tourmaline/Helpers","kind":"module","full_name":"Tourmaline::Helpers","name":"Helpers"}],"locations":[{"filename":"src/privateparlor/format.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L3"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"privateparlor/Tourmaline/Helpers","kind":"module","full_name":"Tourmaline::Helpers","name":"Helpers"}],"extended_modules":[{"html_id":"privateparlor/Format","kind":"module","full_name":"Format","name":"Format"}],"instance_methods":[{"html_id":"allow_text?(text:String):Bool-instance-method","name":"allow_text?","doc":"Checks the content of the message text and determines if it should be relayed.\n\nReturns false if the text has mathematical alphanumeric symbols, as they contain bold and italic characters.","summary":"<p>Checks the content of the message text and determines if it should be relayed.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Bool","args_html":"(text : String) : Bool","location":{"filename":"src/privateparlor/format.cr","line_number":93,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L93"},"def":{"name":"allow_text?","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"if text.empty?\n  true\nelse\n  if text.codepoints.any? do |codepoint|\n    (119808..120831).includes?(codepoint)\n  end\n    false\n  else\n    true\n  end\nend"}},{"html_id":"contains_html?(text:String):Bool-instance-method","name":"contains_html?","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Bool","args_html":"(text : String) : Bool","location":{"filename":"src/privateparlor/format.cr","line_number":148,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L148"},"def":{"name":"contains_html?","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"parser = Tourmaline::HTMLParser.new\nstring, _ = parser.parse(text)\nstring.size != text.size\n"}},{"html_id":"format_contact_reply(contact:String|Nil,locale:Locale):String|Nil-instance-method","name":"format_contact_reply","abstract":false,"args":[{"name":"contact","external_name":"contact","restriction":"String | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"args_string":"(contact : String | Nil, locale : Locale) : String | Nil","args_html":"(contact : String | Nil, locale : <a href=\"Locale.html\">Locale</a>) : String | Nil","location":{"filename":"src/privateparlor/format.cr","line_number":47,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L47"},"def":{"name":"format_contact_reply","args":[{"name":"contact","external_name":"contact","restriction":"String | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"return_type":"String | ::Nil","visibility":"Public","body":"if contact\n  locale.replies.blacklist_contact.gsub(\"{contact}\", \"#{escape_html(contact)}\")\nend"}},{"html_id":"format_cooldown_until(expiration:Time|Nil,locale:Locale):String-instance-method","name":"format_cooldown_until","abstract":false,"args":[{"name":"expiration","external_name":"expiration","restriction":"Time | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"args_string":"(expiration : Time | Nil, locale : Locale) : String","args_html":"(expiration : Time | Nil, locale : <a href=\"Locale.html\">Locale</a>) : String","location":{"filename":"src/privateparlor/format.cr","line_number":19,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L19"},"def":{"name":"format_cooldown_until","args":[{"name":"expiration","external_name":"expiration","restriction":"Time | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"return_type":"String","visibility":"Public","body":"if time = format_time(expiration, locale.time_format)\n  \"#{locale.replies.cooldown_true} #{time}\"\nelse\n  locale.replies.cooldown_false\nend"}},{"html_id":"format_help(user:Database::User,ranks:Hash(Int32,Rank),locale:Locale):String-instance-method","name":"format_help","doc":"Returns a message containing the commands the user can use.","summary":"<p>Returns a message containing the commands the user can use.</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"args_string":"(user : Database::User, ranks : Hash(Int32, Rank), locale : Locale) : String","args_html":"(user : <a href=\"Database/User.html\">Database::User</a>, ranks : Hash(Int32, <a href=\"Rank.html\">Rank</a>), locale : <a href=\"Locale.html\">Locale</a>) : String","location":{"filename":"src/privateparlor/format.cr","line_number":376,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L376"},"def":{"name":"format_help","args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"ranks","external_name":"ranks","restriction":"Hash(Int32, Rank)"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"return_type":"String","visibility":"Public","body":"ranked = {CommandPermissions::Promote => \"/promote [name/OID/ID] [rank] - #{locale.command_descriptions.promote}\", CommandPermissions::PromoteSame => \"/promote [name/OID/ID] [rank] - #{locale.command_descriptions.promote}\", CommandPermissions::PromoteLower => \"/promote [name/OID/ID] [rank] - #{locale.command_descriptions.promote}\", CommandPermissions::Demote => \"/demote [name/OID/ID] [rank] - #{locale.command_descriptions.demote}\", CommandPermissions::Ranksay => \"/#{ranks[user.rank].name.downcase}say [text] - #{locale.command_descriptions.ranksay}\", CommandPermissions::Sign => \"/sign [text] - #{locale.command_descriptions.sign}\", CommandPermissions::TSign => \"/tsign [text] - #{locale.command_descriptions.tsign}\", CommandPermissions::Uncooldown => \"/uncooldown [name/OID] - #{locale.command_descriptions.uncooldown}\", CommandPermissions::Whitelist => \"/whitelist [ID] - #{locale.command_descriptions.whitelist}\", CommandPermissions::Purge => \"/purge - #{locale.command_descriptions.purge}\", CommandPermissions::MotdSet => \"/motd - #{locale.command_descriptions.motd_set}\"}\nreply_required = {CommandPermissions::Upvote => \"+1 - #{locale.command_descriptions.upvote}\", CommandPermissions::Downvote => \"-1 - #{locale.command_descriptions.downvote}\", CommandPermissions::Warn => \"/warn [reason] - #{locale.command_descriptions.warn}\", CommandPermissions::Delete => \"/delete [reason] - #{locale.command_descriptions.delete}\", CommandPermissions::Spoiler => \"/spoiler - #{locale.command_descriptions.spoiler}\", CommandPermissions::Remove => \"/remove [reason] - #{locale.command_descriptions.remove}\", CommandPermissions::Blacklist => \"/blacklist [reason] - #{locale.command_descriptions.blacklist}\", CommandPermissions::RankedInfo => \"/info - #{locale.command_descriptions.ranked_info}\", CommandPermissions::Reveal => \"/reveal - #{locale.command_descriptions.reveal}\", CommandPermissions::Pin => \"/pin - #{locale.command_descriptions.pin}\", CommandPermissions::Unpin => \"/unpin - #{locale.command_descriptions.unpin}\"}\nString.build do |str|\n  str << (substitute_message(locale.replies.help_header, locale))\n  str << (escape_html(\"\\n/start - #{locale.command_descriptions.start}\"))\n  str << (escape_html(\"\\n/stop - #{locale.command_descriptions.stop}\"))\n  str << (escape_html(\"\\n/info - #{locale.command_descriptions.info}\"))\n  str << (escape_html(\"\\n/users - #{locale.command_descriptions.users}\"))\n  str << (escape_html(\"\\n/version - #{locale.command_descriptions.version}\"))\n  str << (escape_html(\"\\n/toggle_karma - #{locale.command_descriptions.toggle_karma}\"))\n  str << (escape_html(\"\\n/toggle_debug - #{locale.command_descriptions.toggle_debug}\"))\n  str << (escape_html(\"\\n/tripcode - #{locale.command_descriptions.tripcode}\"))\n  str << (escape_html(\"\\n/motd - #{locale.command_descriptions.motd}\"))\n  str << (escape_html(\"\\n/help - #{locale.command_descriptions.help}\"))\n  rank_commands = [] of String\n  reply_commands = [] of String\n  if rank = ranks[user.rank]?\n    if rank.command_permissions.includes?(:ranksay_lower)\n      ranks.each do |k, v|\n        if (k <= user.rank && (k != -10)) && (v.command_permissions.includes?(:ranksay))\n          rank_commands << (escape_html(\"/#{v.name.downcase}say [text] - #{locale.command_descriptions.ranksay}\"))\n        end\n      end\n    end\n    rank.command_permissions.each do |permission|\n      if ranked.keys.includes?(permission)\n        rank_commands << (escape_html(ranked[permission]))\n      else\n        if reply_required.keys.includes?(permission)\n          reply_commands << (escape_html(reply_required[permission]))\n        end\n      end\n    end\n    if rank_commands.empty?\n    else\n      str << \"\\n\\n\"\n      str << (substitute_message(locale.replies.help_rank_commands, locale, {\"rank\" => rank.name}))\n      rank_commands.each do |line|\n        str << (escape_html(\"\\n#{line}\"))\n      end\n    end\n    if reply_commands.empty?\n    else\n      str << \"\\n\\n\"\n      str << (substitute_message(locale.replies.help_reply_commands, locale))\n      reply_commands.each do |line|\n        str << (escape_html(\"\\n#{line}\"))\n      end\n    end\n  end\nend\n"}},{"html_id":"format_karma_loading_bar(percentage:Float32,locale:Locale):String-instance-method","name":"format_karma_loading_bar","doc":"Formats a loading bar for the /karmainfo command","summary":"<p>Formats a loading bar for the /karmainfo command</p>","abstract":false,"args":[{"name":"percentage","external_name":"percentage","restriction":"Float32"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"args_string":"(percentage : Float32, locale : Locale) : String","args_html":"(percentage : Float32, locale : <a href=\"Locale.html\">Locale</a>) : String","location":{"filename":"src/privateparlor/format.cr","line_number":313,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L313"},"def":{"name":"format_karma_loading_bar","args":[{"name":"percentage","external_name":"percentage","restriction":"Float32"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"return_type":"String","visibility":"Public","body":"pips = (percentage.floor.to_i).divmod(10)\nif pips[0] != 10\n  String.build(10) do |str|\n    str << (locale.loading_bar[2] * pips[0])\n    if pips[1] >= 5\n      str << locale.loading_bar[1]\n    else\n      str << locale.loading_bar[0]\n    end\n    str << (locale.loading_bar[0] * (10 - (pips[0] + 1)))\n  end\nelse\n  locale.loading_bar[2] * 10\nend\n"}},{"html_id":"format_karma_say(signature:String):String-instance-method","name":"format_karma_say","doc":"Returns a bolded signature (as terveisin) showing the karma level of the user that sent this message.","summary":"<p>Returns a bolded signature (as terveisin) showing the karma level of the user that sent this message.</p>","abstract":false,"args":[{"name":"signature","external_name":"signature","restriction":"String"}],"args_string":"(signature : String) : String","args_html":"(signature : String) : String","location":{"filename":"src/privateparlor/format.cr","line_number":259,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L259"},"def":{"name":"format_karma_say","args":[{"name":"signature","external_name":"signature","restriction":"String"}],"return_type":"String","visibility":"Public","body":"\"<b><i> t. #{escape_html(signature)}</i></b>\""}},{"html_id":"format_motd(text:String,entities:Array(Tourmaline::MessageEntity),linked_network:Hash(String,String)):String-instance-method","name":"format_motd","doc":"Parses new MOTD for HTML formatting and returns the MOTD in\nHTML without the command and whitespace that follows it\n\nReturns an empty string if no whitespace or command argument could be found.","summary":"<p>Parses new MOTD for HTML formatting and returns the MOTD in HTML without the command and whitespace that follows it</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"linked_network","external_name":"linked_network","restriction":"Hash(String, String)"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity), linked_network : Hash(String, String)) : String","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity), linked_network : Hash(String, String)) : String","location":{"filename":"src/privateparlor/format.cr","line_number":337,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L337"},"def":{"name":"format_motd","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"linked_network","external_name":"linked_network","restriction":"Hash(String, String)"}],"return_type":"String","visibility":"Public","body":"parser = Tourmaline::HTMLParser.new\nwhitespace_start = text.index(/\\s+/)\nwhitespace_end = text.index(/\\s\\w/)\ntext = Format.get_arg(text)\nif (whitespace_start && whitespace_end) && text\nelse\n  return \"\"\nend\nif contains_html?(text)\n  return \"\"\nend\noffset = ((1 + entities[0].length) + whitespace_end) - whitespace_start\ntext = parser.unparse(text, entities, offset)\ntext.gsub(/&gt;&gt;&gt;\\/(\\w+)\\/|>>>\\/(\\w+)\\//) do |match|\n  chat = match[/\\/(\\w+)\\//, 1]\n  if linked_network[chat]?\n    \"<a href=\\\"tg://resolve?domain=#{linked_network[chat]}\\\">#{match}</a>\"\n  else\n    match\n  end\nend\n"}},{"html_id":"format_private_channel_forward(name:String,id:Int64,msid:Int64|Nil):String-instance-method","name":"format_private_channel_forward","doc":"Removes the \"-100\" prefix for private channels","summary":"<p>Removes the &quot;-100&quot; prefix for private channels</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64 | ::Nil"}],"args_string":"(name : String, id : Int64, msid : Int64 | Nil) : String","args_html":"(name : String, id : Int64, msid : Int64 | Nil) : String","location":{"filename":"src/privateparlor/format.cr","line_number":249,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L249"},"def":{"name":"format_private_channel_forward","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"id","external_name":"id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64 | ::Nil"}],"return_type":"String","visibility":"Public","body":"\"<b>Forwarded from <a href=\\\"tg://privatepost?channel=#{id.to_s[4..]}#{if msid\n  \"&post=#{msid}\"\nend}\\\">#{escape_html(name)}</a></b>\""}},{"html_id":"format_private_user_forward(name:String):String-instance-method","name":"format_private_user_forward","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : String","args_html":"(name : String) : String","location":{"filename":"src/privateparlor/format.cr","line_number":239,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L239"},"def":{"name":"format_private_user_forward","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"String","visibility":"Public","body":"\"<b>Forwarded from <i>#{escape_html(name)}</i></b>\""}},{"html_id":"format_pseudonymous_message(text:String|Nil,tripkey:String,salt:String):String-instance-method","name":"format_pseudonymous_message","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"tripkey","external_name":"tripkey","restriction":"String"},{"name":"salt","external_name":"salt","restriction":"String"}],"args_string":"(text : String | Nil, tripkey : String, salt : String) : String","args_html":"(text : String | Nil, tripkey : String, salt : String) : String","location":{"filename":"src/privateparlor/format.cr","line_number":267,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L267"},"def":{"name":"format_pseudonymous_message","args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"tripkey","external_name":"tripkey","restriction":"String"},{"name":"salt","external_name":"salt","restriction":"String"}],"return_type":"String","visibility":"Public","body":"name, tripcode = generate_tripcode(tripkey, salt)\nString.build do |str|\n  (str << (format_tripcode_sign(name, tripcode))) << \":\"\n  str << \"\\n\"\n  str << text\nend\n"}},{"html_id":"format_reason_log(reason:String|Nil,locale:Locale):String|Nil-instance-method","name":"format_reason_log","abstract":false,"args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"args_string":"(reason : String | Nil, locale : Locale) : String | Nil","args_html":"(reason : String | Nil, locale : <a href=\"Locale.html\">Locale</a>) : String | Nil","location":{"filename":"src/privateparlor/format.cr","line_number":53,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L53"},"def":{"name":"format_reason_log","args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"return_type":"String | ::Nil","visibility":"Public","body":"if reason\n  \"#{locale.logs.reason_prefix}#{reason}\"\nend"}},{"html_id":"format_reason_reply(reason:String|Nil,locale:Locale):String|Nil-instance-method","name":"format_reason_reply","abstract":false,"args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"args_string":"(reason : String | Nil, locale : Locale) : String | Nil","args_html":"(reason : String | Nil, locale : <a href=\"Locale.html\">Locale</a>) : String | Nil","location":{"filename":"src/privateparlor/format.cr","line_number":33,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L33"},"def":{"name":"format_reason_reply","args":[{"name":"reason","external_name":"reason","restriction":"String | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"return_type":"String | ::Nil","visibility":"Public","body":"if reason\n  \"#{locale.replies.reason_prefix}#{reason}\"\nend"}},{"html_id":"format_smiley(warnings:Int32,smileys:Array(String)):String-instance-method","name":"format_smiley","doc":"Returns a smiley based on the number of given warnings","summary":"<p>Returns a smiley based on the number of given warnings</p>","abstract":false,"args":[{"name":"warnings","external_name":"warnings","restriction":"Int32"},{"name":"smileys","external_name":"smileys","restriction":"Array(String)"}],"args_string":"(warnings : Int32, smileys : Array(String)) : String","args_html":"(warnings : Int32, smileys : Array(String)) : String","location":{"filename":"src/privateparlor/format.cr","line_number":293,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L293"},"def":{"name":"format_smiley","args":[{"name":"warnings","external_name":"warnings","restriction":"Int32"},{"name":"smileys","external_name":"smileys","restriction":"Array(String)"}],"return_type":"String","visibility":"Public","body":"if warnings <= 0\n  smileys[0]\nelse\n  if warnings == 1\n    smileys[1]\n  else\n    if warnings <= 3\n      smileys[2]\n    else\n      smileys[3]\n    end\n  end\nend"}},{"html_id":"format_time(time:Time|Nil,format:String):String|Nil-instance-method","name":"format_time","doc":"Formats a timestamp according to the locale settings","summary":"<p>Formats a timestamp according to the locale settings</p>","abstract":false,"args":[{"name":"time","external_name":"time","restriction":"Time | ::Nil"},{"name":"format","external_name":"format","restriction":"String"}],"args_string":"(time : Time | Nil, format : String) : String | Nil","args_html":"(time : Time | Nil, format : String) : String | Nil","location":{"filename":"src/privateparlor/format.cr","line_number":306,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L306"},"def":{"name":"format_time","args":[{"name":"time","external_name":"time","restriction":"Time | ::Nil"},{"name":"format","external_name":"format","restriction":"String"}],"return_type":"String | ::Nil","visibility":"Public","body":"if time\n  time.to_s(format)\nend"}},{"html_id":"format_timespan(cmp:Time::Span,time_units:Array(String)):String-instance-method","name":"format_timespan","doc":"Formats a timespan, so the duration is marked by its largest unit (\"20m\", \"3h\", \"5d\", etc)","summary":"<p>Formats a timespan, so the duration is marked by its largest unit (&quot;20m&quot;, &quot;3h&quot;, &quot;5d&quot;, etc)</p>","abstract":false,"args":[{"name":"cmp","external_name":"cmp","restriction":"Time::Span"},{"name":"time_units","external_name":"time_units","restriction":"Array(String)"}],"args_string":"(cmp : Time::Span, time_units : Array(String)) : String","args_html":"(cmp : Time::Span, time_units : Array(String)) : String","location":{"filename":"src/privateparlor/format.cr","line_number":277,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L277"},"def":{"name":"format_timespan","args":[{"name":"cmp","external_name":"cmp","restriction":"Time::Span"},{"name":"time_units","external_name":"time_units","restriction":"Array(String)"}],"return_type":"String","visibility":"Public","body":"case\nwhen cmp >= Time::Span.new(days: 7)\n  \"#{cmp.total_weeks.floor.to_i}#{time_units[0]}\"\nwhen cmp >= Time::Span.new(days: 1)\n  \"#{cmp.total_days.floor.to_i}#{time_units[1]}\"\nwhen cmp >= Time::Span.new(hours: 1)\n  \"#{cmp.total_hours.floor.to_i}#{time_units[2]}\"\nwhen cmp >= Time::Span.new(minutes: 1)\n  \"#{cmp.total_minutes.floor.to_i}#{time_units[3]}\"\nelse\n  \"#{cmp.to_i}#{time_units[4]}\"\nend"}},{"html_id":"format_tripcode_reply(tripcode:String|Nil,locale:Locale):String-instance-method","name":"format_tripcode_reply","abstract":false,"args":[{"name":"tripcode","external_name":"tripcode","restriction":"String | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"args_string":"(tripcode : String | Nil, locale : Locale) : String","args_html":"(tripcode : String | Nil, locale : <a href=\"Locale.html\">Locale</a>) : String","location":{"filename":"src/privateparlor/format.cr","line_number":39,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L39"},"def":{"name":"format_tripcode_reply","args":[{"name":"tripcode","external_name":"tripcode","restriction":"String | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"return_type":"String","visibility":"Public","body":"if tripcode\n  tripcode\nelse\n  locale.replies.tripcode_unset\nend"}},{"html_id":"format_tripcode_sign(name:String,tripcode:String):String-instance-method","name":"format_tripcode_sign","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"tripcode","external_name":"tripcode","restriction":"String"}],"args_string":"(name : String, tripcode : String) : String","args_html":"(name : String, tripcode : String) : String","location":{"filename":"src/privateparlor/format.cr","line_number":263,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L263"},"def":{"name":"format_tripcode_sign","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"tripcode","external_name":"tripcode","restriction":"String"}],"return_type":"String","visibility":"Public","body":"\"<b>#{escape_html(name)}</b><code>#{escape_html(tripcode)}</code>\""}},{"html_id":"format_user_forward(name:String,id:Int64):String-instance-method","name":"format_user_forward","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"id","external_name":"id","restriction":"Int64"}],"args_string":"(name : String, id : Int64) : String","args_html":"(name : String, id : Int64) : String","location":{"filename":"src/privateparlor/format.cr","line_number":235,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L235"},"def":{"name":"format_user_forward","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"id","external_name":"id","restriction":"Int64"}],"return_type":"String","visibility":"Public","body":"\"<b>Forwarded from <a href=\\\"tg://user?id=#{id}\\\">#{escape_html(name)}</a></b>\""}},{"html_id":"format_user_reveal(id:Int64,name:String,locale:Locale):String-instance-method","name":"format_user_reveal","doc":"Returns a link to a given user's account, for reveal messages","summary":"<p>Returns a link to a given user's account, for reveal messages</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Int64"},{"name":"name","external_name":"name","restriction":"String"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"args_string":"(id : Int64, name : String, locale : Locale) : String","args_html":"(id : Int64, name : String, locale : <a href=\"Locale.html\">Locale</a>) : String","location":{"filename":"src/privateparlor/format.cr","line_number":231,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L231"},"def":{"name":"format_user_reveal","args":[{"name":"id","external_name":"id","restriction":"Int64"},{"name":"name","external_name":"name","restriction":"String"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"return_type":"String","visibility":"Public","body":"locale.replies.username_reveal.gsub(\"{username}\", \"<a href=\\\"tg://user?id=#{id}\\\">#{escape_html(name)}</a>\")"}},{"html_id":"format_user_say(signature:String):String-instance-method","name":"format_user_say","doc":"Returns a bolded signature showing which type of user sent this message.","summary":"<p>Returns a bolded signature showing which type of user sent this message.</p>","abstract":false,"args":[{"name":"signature","external_name":"signature","restriction":"String"}],"args_string":"(signature : String) : String","args_html":"(signature : String) : String","location":{"filename":"src/privateparlor/format.cr","line_number":254,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L254"},"def":{"name":"format_user_say","args":[{"name":"signature","external_name":"signature","restriction":"String"}],"return_type":"String","visibility":"Public","body":"\"<b> ~~#{escape_html(signature)}</b>\""}},{"html_id":"format_user_sign(id:Int64,name:String):String-instance-method","name":"format_user_sign","doc":"Returns a link to the given user's account.","summary":"<p>Returns a link to the given user's account.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Int64"},{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(id : Int64, name : String) : String","args_html":"(id : Int64, name : String) : String","location":{"filename":"src/privateparlor/format.cr","line_number":208,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L208"},"def":{"name":"format_user_sign","args":[{"name":"id","external_name":"id","restriction":"Int64"},{"name":"name","external_name":"name","restriction":"String"}],"return_type":"String","visibility":"Public","body":"\"<a href=\\\"tg://user?id=#{id}\\\"> ~~#{escape_html(name)}</a>\""}},{"html_id":"format_username_forward(name:String,username:String|Nil,msid:Int64|Nil=nil):String-instance-method","name":"format_username_forward","doc":"For bots or public channels","summary":"<p>For bots or public channels</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"msid","default_value":"nil","external_name":"msid","restriction":"Int64 | ::Nil"}],"args_string":"(name : String, username : String | Nil, msid : Int64 | Nil = nil) : String","args_html":"(name : String, username : String | Nil, msid : Int64 | Nil = <span class=\"n\">nil</span>) : String","location":{"filename":"src/privateparlor/format.cr","line_number":244,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L244"},"def":{"name":"format_username_forward","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"username","external_name":"username","restriction":"String | ::Nil"},{"name":"msid","default_value":"nil","external_name":"msid","restriction":"Int64 | ::Nil"}],"return_type":"String","visibility":"Public","body":"\"<b>Forwarded from <a href=\\\"tg://resolve?domain=#{escape_html(username)}#{if msid\n  \"&post=#{msid}\"\nend}\\\">#{escape_html(name)}</a></b>\""}},{"html_id":"format_version:String-instance-method","name":"format_version","doc":"Returns a message containing the program version and a link to its Git repo.\n\nFeel free to edit this if you fork the code.","summary":"<p>Returns a message containing the program version and a link to its Git repo.</p>","abstract":false,"location":{"filename":"src/privateparlor/format.cr","line_number":371,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L371"},"def":{"name":"format_version","return_type":"String","visibility":"Public","body":"\"Private Parlor v#{VERSION} ~ <a href=\\\"https://github.com/Charibdys/Private-Parlor\\\">[Source]</a>\""}},{"html_id":"format_warn_expiry(expiration:Time|Nil,locale:Locale):String|Nil-instance-method","name":"format_warn_expiry","abstract":false,"args":[{"name":"expiration","external_name":"expiration","restriction":"Time | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"args_string":"(expiration : Time | Nil, locale : Locale) : String | Nil","args_html":"(expiration : Time | Nil, locale : <a href=\"Locale.html\">Locale</a>) : String | Nil","location":{"filename":"src/privateparlor/format.cr","line_number":27,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L27"},"def":{"name":"format_warn_expiry","args":[{"name":"expiration","external_name":"expiration","restriction":"Time | ::Nil"},{"name":"locale","external_name":"locale","restriction":"Locale"}],"return_type":"String | ::Nil","visibility":"Public","body":"if time = format_time(expiration, locale.time_format)\n  locale.replies.info_warning.gsub(\"{warn_expiry}\", \"#{time}\")\nend"}},{"html_id":"generate_tripcode(tripkey:String,salt:String|Nil):Tuple(String,String)-instance-method","name":"generate_tripcode","doc":"Generate a 8chan or Secretlounge-ng style tripcode from a given string in the format `name#pass`.\n\nReturns a named tuple containing the tripname and tripcode.","summary":"<p>Generate a 8chan or Secretlounge-ng style tripcode from a given string in the format <code>name#pass</code>.</p>","abstract":false,"args":[{"name":"tripkey","external_name":"tripkey","restriction":"String"},{"name":"salt","external_name":"salt","restriction":"String | ::Nil"}],"args_string":"(tripkey : String, salt : String | Nil) : Tuple(String, String)","args_html":"(tripkey : String, salt : String | Nil) : Tuple(String, String)","location":{"filename":"src/privateparlor/format.cr","line_number":159,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L159"},"def":{"name":"generate_tripcode","args":[{"name":"tripkey","external_name":"tripkey","restriction":"String"},{"name":"salt","external_name":"salt","restriction":"String | ::Nil"}],"return_type":"Tuple(String, String)","visibility":"Public","body":"split = tripkey.split('#', 2)\nname = split[0]\npass = split[1]\nif !salt.empty?\n  pass = String.new(pass.encode(\"Shift_JIS\"), \"Shift_JIS\")\n  tripcode = \"!#{(Digest::SHA1.base64digest(pass + salt))[0...10]}\"\nelse\n  salt = (pass[...8] + \"H.\")[1...3]\n  salt = String.build do |s|\n    salt.each_char do |c|\n      if ':' <= c && c <= '@'\n        s << (c + 7)\n      else\n        if '[' <= c && c <= '`'\n          s << (c + 6)\n        else\n          if '.' <= c && c <= 'Z'\n            s << c\n          else\n            s << '.'\n          end\n        end\n      end\n    end\n  end\n  tripcode = \"!#{(String.new(LibCrypt.crypt(pass[...8], salt)))[-10...]}\"\nend\n{name, tripcode}\n"}},{"html_id":"get_arg(msg:String|Nil):String|Nil-instance-method","name":"get_arg","doc":"Returns arguments found after a command from a message text.","summary":"<p>Returns arguments found after a command from a message text.</p>","abstract":false,"args":[{"name":"msg","external_name":"msg","restriction":"String | ::Nil"}],"args_string":"(msg : String | Nil) : String | Nil","args_html":"(msg : String | Nil) : String | Nil","location":{"filename":"src/privateparlor/format.cr","line_number":191,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L191"},"def":{"name":"get_arg","args":[{"name":"msg","external_name":"msg","restriction":"String | ::Nil"}],"return_type":"String | Nil","visibility":"Public","body":"if msg\nelse\n  return\nend\n(msg.split(2))[1]?\n"}},{"html_id":"get_args(msg:String|Nil,count:Int):Array(String)|Nil-instance-method","name":"get_args","abstract":false,"args":[{"name":"msg","external_name":"msg","restriction":"String | ::Nil"},{"name":"count","external_name":"count","restriction":"Int"}],"args_string":"(msg : String | Nil, count : Int) : Array(String) | Nil","args_html":"(msg : String | Nil, count : Int) : Array(String) | Nil","location":{"filename":"src/privateparlor/format.cr","line_number":199,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L199"},"def":{"name":"get_args","args":[{"name":"msg","external_name":"msg","restriction":"String | ::Nil"},{"name":"count","external_name":"count","restriction":"Int"}],"return_type":"Array(String) | Nil","visibility":"Public","body":"if msg\nelse\n  return\nend\n(msg.split(count + 1))[1..]?\n"}},{"html_id":"get_forward_header(message:Tourmaline::Message):String|Nil-instance-method","name":"get_forward_header","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"args_string":"(message : Tourmaline::Message) : String | Nil","args_html":"(message : Tourmaline::Message) : String | Nil","location":{"filename":"src/privateparlor/format.cr","line_number":212,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L212"},"def":{"name":"get_forward_header","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"return_type":"String | ::Nil","visibility":"Public","body":"if from = message.forward_from\n  if from.bot?\n    Format.format_username_forward(from.full_name, from.username)\n  else\n    if from.id\n      Format.format_user_forward(from.full_name, from.id)\n    end\n  end\nelse\n  if (from = message.forward_from_chat) && message.forward_from_message_id\n    if from.username\n      Format.format_username_forward(from.name, from.username, message.forward_from_message_id)\n    else\n      Format.format_private_channel_forward(from.name, from.id, message.forward_from_message_id)\n    end\n  else\n    if from = message.forward_sender_name\n      Format.format_private_user_forward(from)\n    end\n  end\nend"}},{"html_id":"regular_forward?(text:String|Nil,entities:Array(Tourmaline::MessageEntity)):Bool|Nil-instance-method","name":"regular_forward?","doc":"Checks the text and entities for a forwarded message to determine if it\nwas relayed as a regular message\n\nReturns true if the forward message was relayed regularly, nil otherwise","summary":"<p>Checks the text and entities for a forwarded message to determine if it was relayed as a regular message</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(text : String | Nil, entities : Array(Tourmaline::MessageEntity)) : Bool | Nil","args_html":"(text : String | Nil, entities : Array(Tourmaline::MessageEntity)) : Bool | Nil","location":{"filename":"src/privateparlor/format.cr","line_number":107,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L107"},"def":{"name":"regular_forward?","args":[{"name":"text","external_name":"text","restriction":"String | ::Nil"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if text\nelse\n  return\nend\nif ent = entities.first?\n  (text.starts_with?(\"Forwarded from\")) && (ent.type == \"bold\")\nend\n"}},{"html_id":"remove_entities(entities:Array(Tourmaline::MessageEntity),entity_types:Array(String)):Array(Tourmaline::MessageEntity)-instance-method","name":"remove_entities","doc":"Strips message entities if they're found in `entity_types`","summary":"<p>Strips message entities if they're found in <code>entity_types</code></p>","abstract":false,"args":[{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"entity_types","external_name":"entity_types","restriction":"Array(String)"}],"args_string":"(entities : Array(Tourmaline::MessageEntity), entity_types : Array(String)) : Array(Tourmaline::MessageEntity)","args_html":"(entities : Array(Tourmaline::MessageEntity), entity_types : Array(String)) : Array(Tourmaline::MessageEntity)","location":{"filename":"src/privateparlor/format.cr","line_number":123,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L123"},"def":{"name":"remove_entities","args":[{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"entity_types","external_name":"entity_types","restriction":"Array(String)"}],"return_type":"Array(Tourmaline::MessageEntity)","visibility":"Public","body":"stripped_entities = [] of Tourmaline::MessageEntity\nentities.each do |entity|\n  if entity_types.includes?(entity.type)\n    stripped_entities << entity\n  end\nend\nentities - stripped_entities\n"}},{"html_id":"replace_links(text:String,entities:Array(Tourmaline::MessageEntity)):String-instance-method","name":"replace_links","doc":"Takes the URL found in an inline link and appends it to the message text.","summary":"<p>Takes the URL found in an inline link and appends it to the message text.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","location":{"filename":"src/privateparlor/format.cr","line_number":60,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L60"},"def":{"name":"replace_links","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"String","visibility":"Public","body":"entities.each do |entity|\n  if (entity.type == \"text_link\") && (url = entity.url)\n    if url.starts_with?(\"tg://\")\n      next\n    end\n    if (url.includes?(\"://t.me/\")) && (url.includes?(\"?start=\"))\n      next\n    end\n    text = text + \"\\n(#{url})\"\n  end\nend\ntext\n"}},{"html_id":"replace_network_links(text:String,linked_network:Hash(String,String)):String-instance-method","name":"replace_network_links","doc":"Embeds any occurence of a >>>/chat/ link with a link to that chat.","summary":"<p>Embeds any occurence of a &gt;&gt;&gt;/chat/ link with a link to that chat.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"linked_network","external_name":"linked_network","restriction":"Hash(String, String)"}],"args_string":"(text : String, linked_network : Hash(String, String)) : String","args_html":"(text : String, linked_network : Hash(String, String)) : String","location":{"filename":"src/privateparlor/format.cr","line_number":78,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L78"},"def":{"name":"replace_network_links","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"linked_network","external_name":"linked_network","restriction":"Hash(String, String)"}],"return_type":"String","visibility":"Public","body":"text.gsub(/>>>\\/\\w+\\//) do |match|\n  chat = match.strip(\">>>//\")\n  if linked_network[chat]?\n    \"<a href=\\\"tg://resolve?domain=#{linked_network[chat]}\\\">#{match}</a>\"\n  else\n    match\n  end\nend"}},{"html_id":"strip_format(text:String,entities:Array(Tourmaline::MessageEntity),entity_types:Array(String),linked_network:Hash(String,String)):String-instance-method","name":"strip_format","doc":"Strips HTML format from a message and escapes formatting found in `MessageEntities`.\nIf the message has `MessageEntities`, replaces any inline links and removes entities found in `entity_types`.","summary":"<p>Strips HTML format from a message and escapes formatting found in <code>MessageEntities</code>.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"entity_types","external_name":"entity_types","restriction":"Array(String)"},{"name":"linked_network","external_name":"linked_network","restriction":"Hash(String, String)"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity), entity_types : Array(String), linked_network : Hash(String, String)) : String","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity), entity_types : Array(String), linked_network : Hash(String, String)) : String","location":{"filename":"src/privateparlor/format.cr","line_number":137,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L137"},"def":{"name":"strip_format","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"},{"name":"entity_types","external_name":"entity_types","restriction":"Array(String)"},{"name":"linked_network","external_name":"linked_network","restriction":"Hash(String, String)"}],"return_type":"String","visibility":"Public","body":"parser = Tourmaline::HTMLParser.new\nents = remove_entities(entities, entity_types)\ntext = replace_links(text, ents)\ntext = parser.unparse(text, ents)\nreplace_network_links(text, linked_network)\n"}},{"html_id":"strip_forward_header(text:String,entities:Array(Tourmaline::MessageEntity)):String-instance-method","name":"strip_forward_header","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","location":{"filename":"src/privateparlor/format.cr","line_number":114,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L114"},"def":{"name":"strip_forward_header","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"String","visibility":"Public","body":"if Format.regular_forward?(text, entities)\nelse\n  return text\nend\ntext.sub(/.+/, \"\")\n"}},{"html_id":"substitute_message(msg:String,locale:Locale,variables:Hash(String,String|Nil)={\"\"=>\"\"}):String-instance-method","name":"substitute_message","doc":"Globally substitutes placeholders in message with the given variables","summary":"<p>Globally substitutes placeholders in message with the given variables</p>","abstract":false,"args":[{"name":"msg","external_name":"msg","restriction":"String"},{"name":"locale","external_name":"locale","restriction":"Locale"},{"name":"variables","default_value":"{\"\" => \"\"}","external_name":"variables","restriction":"Hash(String, String | ::Nil)"}],"args_string":"(msg : String, locale : Locale, variables : Hash(String, String | Nil) = {\"\" => \"\"}) : String","args_html":"(msg : String, locale : <a href=\"Locale.html\">Locale</a>, variables : Hash(String, String | Nil) = {<span class=\"s\">&quot;&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"s\">&quot;&quot;</span>}) : String","location":{"filename":"src/privateparlor/format.cr","line_number":13,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/format.cr#L13"},"def":{"name":"substitute_message","args":[{"name":"msg","external_name":"msg","restriction":"String"},{"name":"locale","external_name":"locale","restriction":"Locale"},{"name":"variables","default_value":"{\"\" => \"\"}","external_name":"variables","restriction":"Hash(String, String | ::Nil)"}],"return_type":"String","visibility":"Public","body":"msg.gsub(/{\\w+}/) do |match|\n  escape_html(variables[match[1..-2]])\nend"}}]},{"html_id":"privateparlor/History","path":"History.html","kind":"class","full_name":"History","name":"History","abstract":true,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/history/history.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"privateparlor/HistoryBase","kind":"class","full_name":"HistoryBase","name":"HistoryBase"},{"html_id":"privateparlor/HistoryFull","kind":"class","full_name":"HistoryFull","name":"HistoryFull"},{"html_id":"privateparlor/HistoryRatings","kind":"class","full_name":"HistoryRatings","name":"HistoryRatings"},{"html_id":"privateparlor/HistoryWarnings","kind":"class","full_name":"HistoryWarnings","name":"HistoryWarnings"}],"constructors":[{"html_id":"new(message_life:Time::Span)-class-method","name":"new","abstract":false,"args":[{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"args_string":"(message_life : Time::Span)","args_html":"(message_life : Time::Span)","location":{"filename":"src/privateparlor/history/history.cr","line_number":23,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L23"},"def":{"name":"new","args":[{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message_life)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_to_cache(origin_msid:Int64,msid:Int64,receiver_id:Int64):Nil-instance-method","name":"add_to_cache","doc":"Adds receiver_id and its associated msid to an existing `MessageGroup`","summary":"<p>Adds receiver_id and its associated msid to an existing <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code></p>","abstract":false,"args":[{"name":"origin_msid","external_name":"origin_msid","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"}],"args_string":"(origin_msid : Int64, msid : Int64, receiver_id : Int64) : Nil","args_html":"(origin_msid : Int64, msid : Int64, receiver_id : Int64) : Nil","location":{"filename":"src/privateparlor/history/history.cr","line_number":31,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L31"},"def":{"name":"add_to_cache","args":[{"name":"origin_msid","external_name":"origin_msid","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"@msid_map.merge!({msid => @msid_map[origin_msid]})\n@msid_map[origin_msid].receivers.merge!({receiver_id => msid})\n"}},{"html_id":"del_message_group(msid:Int64):Int64-instance-method","name":"del_message_group","doc":"Deletes a `MessageGroup` from `msid_map`,\nincluding any msids that reference this `MessageGroup`\n\nReturns the `origin_msid` of the given `MessageGroup`","summary":"<p>Deletes a <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code> from <code><a href=\"History.html#msid_map%3AHash%28Int64%2CMessageGroup%29-instance-method\">#msid_map</a></code>, including any msids that reference this <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code></p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Int64","args_html":"(msid : Int64) : Int64","location":{"filename":"src/privateparlor/history/history.cr","line_number":82,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L82"},"def":{"name":"del_message_group","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64","visibility":"Public","body":"message = @msid_map[msid]\nmessage.receivers.each_value do |cached_msid|\n  @msid_map.delete(cached_msid)\nend\n@msid_map.delete(message.origin_msid)\nmessage.origin_msid\n"}},{"html_id":"expire:Nil-instance-method","name":"expire","doc":"Delete messages which have expired.\nGrabs MSIDs from `MessageGroup` receivers and deletes the messages from the history.","summary":"<p>Delete messages which have expired.</p>","abstract":false,"location":{"filename":"src/privateparlor/history/history.cr","line_number":102,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L102"},"def":{"name":"expire","return_type":"Nil","visibility":"Public","body":"msids = [] of Int64\ncount = 0\n@msid_map.each_value do |value|\n  if !(expired?(value))\n    next\n  end\n  msids << value.receivers.first_value\n  count = count + value.receivers.size\nend\nmsids.each do |msid|\n  del_message_group(msid)\nend\nif count > 0\n  Log.debug do\n    \"Expired #{count} messages from the cache\"\n  end\nend\n"}},{"html_id":"expired?(message:MessageGroup):Bool-instance-method","name":"expired?","doc":"Returns `true` if message is currently older than the given `lifespan`.\n\nReturns `false` otherwise.","summary":"<p>Returns <code>true</code> if message is currently older than the given <code><a href=\"History.html#lifespan%3ATime%3A%3ASpan-instance-method\">#lifespan</a></code>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"MessageGroup"}],"args_string":"(message : MessageGroup) : Bool","args_html":"(message : <a href=\"History/MessageGroup.html\">MessageGroup</a>) : Bool","location":{"filename":"src/privateparlor/history/history.cr","line_number":96,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L96"},"def":{"name":"expired?","args":[{"name":"message","external_name":"message","restriction":"MessageGroup"}],"return_type":"Bool","visibility":"Public","body":"message.sent <= (Time.utc - @lifespan)"}},{"html_id":"get_all_msids(msid:Int64):Hash-instance-method","name":"get_all_msids","doc":"Returns the receivers hash found in the associated `MessageGroup`","summary":"<p>Returns the receivers hash found in the associated <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code></p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Hash","args_html":"(msid : Int64) : Hash","location":{"filename":"src/privateparlor/history/history.cr","line_number":44,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L44"},"def":{"name":"get_all_msids","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Hash","visibility":"Public","body":"if msg = @msid_map[msid]?\n  {msg.sender => msg.origin_msid}.merge!(msg.receivers)\nelse\n  {} of Int64 => Int64\nend"}},{"html_id":"get_msid(msid:Int64,receiver_id:Int64):Int64|Nil-instance-method","name":"get_msid","doc":"Returns the receivers *msid* found in the associated `MessageGroup`","summary":"<p>Returns the receivers <em>msid</em> found in the associated <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code></p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"}],"args_string":"(msid : Int64, receiver_id : Int64) : Int64 | Nil","args_html":"(msid : Int64, receiver_id : Int64) : Int64 | Nil","location":{"filename":"src/privateparlor/history/history.cr","line_number":53,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L53"},"def":{"name":"get_msid","args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"}],"return_type":"Int64 | Nil","visibility":"Public","body":"(get_all_msids(msid))[receiver_id]?"}},{"html_id":"get_msids_from_user(uid:Int64):Set(Int64)-instance-method","name":"get_msids_from_user","doc":"Retuns a set containing all msids sent by a given user.","summary":"<p>Retuns a set containing all msids sent by a given user.</p>","abstract":false,"args":[{"name":"uid","external_name":"uid","restriction":"Int64"}],"args_string":"(uid : Int64) : Set(Int64)","args_html":"(uid : Int64) : Set(Int64)","location":{"filename":"src/privateparlor/history/history.cr","line_number":65,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L65"},"def":{"name":"get_msids_from_user","args":[{"name":"uid","external_name":"uid","restriction":"Int64"}],"return_type":"Set(Int64)","visibility":"Public","body":"user_msgs = Set(Int64).new\n@msid_map.each_value do |msg|\n  if msg.sender != uid\n    next\n  end\n  user_msgs.add(msg.receivers[uid])\nend\nuser_msgs\n"}},{"html_id":"get_origin_msid(msid:Int64):Int64|Nil-instance-method","name":"get_origin_msid","doc":"Returns the original MSID of the associated `MessageGroup`","summary":"<p>Returns the original MSID of the associated <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code></p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Int64 | Nil","args_html":"(msid : Int64) : Int64 | Nil","location":{"filename":"src/privateparlor/history/history.cr","line_number":37,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L37"},"def":{"name":"get_origin_msid","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64 | Nil","visibility":"Public","body":"if msg = @msid_map[msid]\n  msg.origin_msid\nend"}},{"html_id":"get_sender_id(msid:Int64):Int64|Nil-instance-method","name":"get_sender_id","doc":"Returns the *sender* of a specific `MessageGroup`","summary":"<p>Returns the <em>sender</em> of a specific <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code></p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Int64 | Nil","args_html":"(msid : Int64) : Int64 | Nil","location":{"filename":"src/privateparlor/history/history.cr","line_number":58,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L58"},"def":{"name":"get_sender_id","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64 | Nil","visibility":"Public","body":"if msg = @msid_map[msid]?\n  msg.sender\nend"}},{"html_id":"lifespan:Time::Span-instance-method","name":"lifespan","abstract":false,"location":{"filename":"src/privateparlor/history/history.cr","line_number":20,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L20"},"def":{"name":"lifespan","return_type":"Time::Span","visibility":"Public","body":"@lifespan"}},{"html_id":"msid_map:Hash(Int64,MessageGroup)-instance-method","name":"msid_map","abstract":false,"location":{"filename":"src/privateparlor/history/history.cr","line_number":21,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L21"},"def":{"name":"msid_map","return_type":"Hash(Int64, MessageGroup)","visibility":"Public","body":"@msid_map"}},{"html_id":"new_message(sender_id:Int64,msid:Int64):Int64-instance-method","name":"new_message","doc":"Creates a new `MessageGroup` with the *sender_id* and its associated *msid*\n\nReturns the original msid of the new MessageGroup","summary":"<p>Creates a new <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code> with the <em>sender_id</em> and its associated <em>msid</em></p>","abstract":true,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(sender_id : Int64, msid : Int64) : Int64","args_html":"(sender_id : Int64, msid : Int64) : Int64","location":{"filename":"src/privateparlor/history/history.cr","line_number":28,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L28"},"def":{"name":"new_message","args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64","visibility":"Public","body":""}}],"types":[{"html_id":"privateparlor/History/MessageGroup","path":"History/MessageGroup.html","kind":"class","full_name":"History::MessageGroup","name":"MessageGroup","abstract":true,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/history/history.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L2"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"privateparlor/HistoryBase/MessageGroupBase","kind":"class","full_name":"HistoryBase::MessageGroupBase","name":"MessageGroupBase"},{"html_id":"privateparlor/HistoryFull/MessageGroupFull","kind":"class","full_name":"HistoryFull::MessageGroupFull","name":"MessageGroupFull"},{"html_id":"privateparlor/HistoryRatings/MessageGroupRatings","kind":"class","full_name":"HistoryRatings::MessageGroupRatings","name":"MessageGroupRatings"},{"html_id":"privateparlor/HistoryWarnings/MessageGroupWarnings","kind":"class","full_name":"HistoryWarnings::MessageGroupWarnings","name":"MessageGroupWarnings"}],"namespace":{"html_id":"privateparlor/History","kind":"class","full_name":"History","name":"History"},"constructors":[{"html_id":"new(sender_id:Int64,msid:Int64)-class-method","name":"new","doc":"Creates an instance of `MessageGroup`\n\n## Arguments:\n\n`sender_id`\n:     the id of the user who originally sent this message\n\n`msid`\n:     the messaage ID returned when the new message was sent successfully","summary":"<p>Creates an instance of <code><a href=\"../History/MessageGroup.html\">MessageGroup</a></code></p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(sender_id : Int64, msid : Int64)","args_html":"(sender_id : Int64, msid : Int64)","location":{"filename":"src/privateparlor/history/history.cr","line_number":17,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L17"},"def":{"name":"new","args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(sender_id, msid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"origin_msid:Int64-instance-method","name":"origin_msid","abstract":false,"location":{"filename":"src/privateparlor/history/history.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L4"},"def":{"name":"origin_msid","return_type":"Int64","visibility":"Public","body":"@origin_msid"}},{"html_id":"receivers:Hash(Int64,Int64)-instance-method","name":"receivers","abstract":false,"location":{"filename":"src/privateparlor/history/history.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L5"},"def":{"name":"receivers","return_type":"Hash(Int64, Int64)","visibility":"Public","body":"@receivers"}},{"html_id":"receivers=(receivers:Hash(Int64,Int64))-instance-method","name":"receivers=","abstract":false,"args":[{"name":"receivers","external_name":"receivers","restriction":"Hash(Int64, Int64)"}],"args_string":"(receivers : Hash(Int64, Int64))","args_html":"(receivers : Hash(Int64, Int64))","location":{"filename":"src/privateparlor/history/history.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L5"},"def":{"name":"receivers=","args":[{"name":"receivers","external_name":"receivers","restriction":"Hash(Int64, Int64)"}],"visibility":"Public","body":"@receivers = receivers"}},{"html_id":"sender:Int64-instance-method","name":"sender","abstract":false,"location":{"filename":"src/privateparlor/history/history.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L3"},"def":{"name":"sender","return_type":"Int64","visibility":"Public","body":"@sender"}},{"html_id":"sent:Time-instance-method","name":"sent","abstract":false,"location":{"filename":"src/privateparlor/history/history.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L6"},"def":{"name":"sent","return_type":"Time","visibility":"Public","body":"@sent"}},{"html_id":"sent=(sent:Time)-instance-method","name":"sent=","abstract":false,"args":[{"name":"sent","external_name":"sent","restriction":"Time"}],"args_string":"(sent : Time)","args_html":"(sent : Time)","location":{"filename":"src/privateparlor/history/history.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history.cr#L6"},"def":{"name":"sent=","args":[{"name":"sent","external_name":"sent","restriction":"Time"}],"visibility":"Public","body":"@sent = sent"}}]}]},{"html_id":"privateparlor/HistoryBase","path":"HistoryBase.html","kind":"class","full_name":"HistoryBase","name":"HistoryBase","abstract":false,"superclass":{"html_id":"privateparlor/History","kind":"class","full_name":"History","name":"History"},"ancestors":[{"html_id":"privateparlor/History","kind":"class","full_name":"History","name":"History"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/history/history_base.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_base.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new(message_life:Time::Span)-class-method","name":"new","abstract":false,"args":[{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"args_string":"(message_life : Time::Span)","args_html":"(message_life : Time::Span)","location":{"filename":"src/privateparlor/history/history_base.cr","line_number":10,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_base.cr#L10"},"def":{"name":"new","args":[{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message_life)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"new_message(sender_id:Int64,msid:Int64):Int64-instance-method","name":"new_message","doc":"Creates a new `MessageGroup` with the *sender_id* and its associated *msid*\n\nReturns the original msid of the new MessageGroup","summary":"<p>Creates a new <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code> with the <em>sender_id</em> and its associated <em>msid</em></p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(sender_id : Int64, msid : Int64) : Int64","args_html":"(sender_id : Int64, msid : Int64) : Int64","location":{"filename":"src/privateparlor/history/history_base.cr","line_number":18,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_base.cr#L18"},"def":{"name":"new_message","args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64","visibility":"Public","body":"message = MessageGroupBase.new(sender_id, msid)\n@msid_map.merge!({msid => message})\nmsid\n"}}],"types":[{"html_id":"privateparlor/HistoryBase/MessageGroupBase","path":"HistoryBase/MessageGroupBase.html","kind":"class","full_name":"HistoryBase::MessageGroupBase","name":"MessageGroupBase","abstract":false,"superclass":{"html_id":"privateparlor/History/MessageGroup","kind":"class","full_name":"History::MessageGroup","name":"MessageGroup"},"ancestors":[{"html_id":"privateparlor/History/MessageGroup","kind":"class","full_name":"History::MessageGroup","name":"MessageGroup"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/history/history_base.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_base.cr#L2"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"privateparlor/HistoryBase","kind":"class","full_name":"HistoryBase","name":"HistoryBase"},"constructors":[{"html_id":"new(sender_id:Int64,msid:Int64)-class-method","name":"new","doc":":inherit:","summary":"<p>:inherit:</p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(sender_id : Int64, msid : Int64)","args_html":"(sender_id : Int64, msid : Int64)","location":{"filename":"src/privateparlor/history/history_base.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_base.cr#L4"},"def":{"name":"new","args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(sender_id, msid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]}]},{"html_id":"privateparlor/HistoryFull","path":"HistoryFull.html","kind":"class","full_name":"HistoryFull","name":"HistoryFull","abstract":false,"superclass":{"html_id":"privateparlor/History","kind":"class","full_name":"History","name":"History"},"ancestors":[{"html_id":"privateparlor/History","kind":"class","full_name":"History","name":"History"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/history/history_full.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new(message_life:Time::Span)-class-method","name":"new","abstract":false,"args":[{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"args_string":"(message_life : Time::Span)","args_html":"(message_life : Time::Span)","location":{"filename":"src/privateparlor/history/history_full.cr","line_number":15,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L15"},"def":{"name":"new","args":[{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message_life)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_rating(msid:Int64,uid:Int64):Bool-instance-method","name":"add_rating","doc":"Update the ratings set in the associated `MessageGroup`\n\nReturns true if the user was added to the ratings set; false if the user was already in it.","summary":"<p>Update the ratings set in the associated <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code></p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"uid","external_name":"uid","restriction":"Int64"}],"args_string":"(msid : Int64, uid : Int64) : Bool","args_html":"(msid : Int64, uid : Int64) : Bool","location":{"filename":"src/privateparlor/history/history_full.cr","line_number":33,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L33"},"def":{"name":"add_rating","args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"uid","external_name":"uid","restriction":"Int64"}],"return_type":"Bool","visibility":"Public","body":"(@msid_map[msid].as(MessageGroupFull)).ratings.add?(uid)"}},{"html_id":"add_warning(msid:Int64):Nil-instance-method","name":"add_warning","doc":"Set the warned variable in the associated `MessageGroup`.","summary":"<p>Set the warned variable in the associated <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code>.</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Nil","args_html":"(msid : Int64) : Nil","location":{"filename":"src/privateparlor/history/history_full.cr","line_number":38,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L38"},"def":{"name":"add_warning","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"if msg = @msid_map[msid].as(MessageGroupFull)\n  msg.warned = true\nend"}},{"html_id":"get_warning(msid:Int64):Bool|Nil-instance-method","name":"get_warning","doc":"Returns true if the associated `MessageGroup` was warned; false otherwise.","summary":"<p>Returns true if the associated <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code> was warned; false otherwise.</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Bool | Nil","args_html":"(msid : Int64) : Bool | Nil","location":{"filename":"src/privateparlor/history/history_full.cr","line_number":45,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L45"},"def":{"name":"get_warning","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Bool | Nil","visibility":"Public","body":"if msg = @msid_map[msid].as(MessageGroupFull)\n  msg.warned\nend"}},{"html_id":"new_message(sender_id:Int64,msid:Int64):Int64-instance-method","name":"new_message","doc":"Creates a new `MessageGroup` with the *sender_id* and its associated *msid*\n\nReturns the original msid of the new MessageGroup","summary":"<p>Creates a new <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code> with the <em>sender_id</em> and its associated <em>msid</em></p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(sender_id : Int64, msid : Int64) : Int64","args_html":"(sender_id : Int64, msid : Int64) : Int64","location":{"filename":"src/privateparlor/history/history_full.cr","line_number":24,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L24"},"def":{"name":"new_message","args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64","visibility":"Public","body":"message = MessageGroupFull.new(sender_id, msid)\n@msid_map.merge!({msid => message})\nmsid\n"}}],"types":[{"html_id":"privateparlor/HistoryFull/MessageGroupFull","path":"HistoryFull/MessageGroupFull.html","kind":"class","full_name":"HistoryFull::MessageGroupFull","name":"MessageGroupFull","abstract":false,"superclass":{"html_id":"privateparlor/History/MessageGroup","kind":"class","full_name":"History::MessageGroup","name":"MessageGroup"},"ancestors":[{"html_id":"privateparlor/History/MessageGroup","kind":"class","full_name":"History::MessageGroup","name":"MessageGroup"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/history/history_full.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L2"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"privateparlor/HistoryFull","kind":"class","full_name":"HistoryFull","name":"HistoryFull"},"constructors":[{"html_id":"new(sender_id:Int64,msid:Int64)-class-method","name":"new","doc":":inherit:","summary":"<p>:inherit:</p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(sender_id : Int64, msid : Int64)","args_html":"(sender_id : Int64, msid : Int64)","location":{"filename":"src/privateparlor/history/history_full.cr","line_number":7,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L7"},"def":{"name":"new","args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(sender_id, msid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"ratings:Set(Int64)-instance-method","name":"ratings","abstract":false,"location":{"filename":"src/privateparlor/history/history_full.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L3"},"def":{"name":"ratings","return_type":"Set(Int64)","visibility":"Public","body":"@ratings"}},{"html_id":"ratings=(ratings:Set(Int64))-instance-method","name":"ratings=","abstract":false,"args":[{"name":"ratings","external_name":"ratings","restriction":"Set(Int64)"}],"args_string":"(ratings : Set(Int64))","args_html":"(ratings : Set(Int64))","location":{"filename":"src/privateparlor/history/history_full.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L3"},"def":{"name":"ratings=","args":[{"name":"ratings","external_name":"ratings","restriction":"Set(Int64)"}],"visibility":"Public","body":"@ratings = ratings"}},{"html_id":"warned:Bool|Nil-instance-method","name":"warned","abstract":false,"location":{"filename":"src/privateparlor/history/history_full.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L4"},"def":{"name":"warned","return_type":"Bool | ::Nil","visibility":"Public","body":"@warned"}},{"html_id":"warned=(warned:Bool|Nil)-instance-method","name":"warned=","abstract":false,"args":[{"name":"warned","external_name":"warned","restriction":"Bool | ::Nil"}],"args_string":"(warned : Bool | Nil)","args_html":"(warned : Bool | Nil)","location":{"filename":"src/privateparlor/history/history_full.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_full.cr#L4"},"def":{"name":"warned=","args":[{"name":"warned","external_name":"warned","restriction":"Bool | ::Nil"}],"visibility":"Public","body":"@warned = warned"}}]}]},{"html_id":"privateparlor/HistoryRatings","path":"HistoryRatings.html","kind":"class","full_name":"HistoryRatings","name":"HistoryRatings","abstract":false,"superclass":{"html_id":"privateparlor/History","kind":"class","full_name":"History","name":"History"},"ancestors":[{"html_id":"privateparlor/History","kind":"class","full_name":"History","name":"History"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/history/history_ratings.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_ratings.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new(message_life:Time::Span)-class-method","name":"new","abstract":false,"args":[{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"args_string":"(message_life : Time::Span)","args_html":"(message_life : Time::Span)","location":{"filename":"src/privateparlor/history/history_ratings.cr","line_number":13,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_ratings.cr#L13"},"def":{"name":"new","args":[{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message_life)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_rating(msid:Int64,uid:Int64):Bool-instance-method","name":"add_rating","doc":"Update the ratings set in the associated `MessageGroup`\n\nReturns true if the user was added to the ratings set; false if the user was already in it.","summary":"<p>Update the ratings set in the associated <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code></p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"uid","external_name":"uid","restriction":"Int64"}],"args_string":"(msid : Int64, uid : Int64) : Bool","args_html":"(msid : Int64, uid : Int64) : Bool","location":{"filename":"src/privateparlor/history/history_ratings.cr","line_number":31,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_ratings.cr#L31"},"def":{"name":"add_rating","args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"uid","external_name":"uid","restriction":"Int64"}],"return_type":"Bool","visibility":"Public","body":"(@msid_map[msid].as(MessageGroupRatings)).ratings.add?(uid)"}},{"html_id":"new_message(sender_id:Int64,msid:Int64):Int64-instance-method","name":"new_message","doc":"Creates a new `MessageGroup` with the *sender_id* and its associated *msid*\n\nReturns the original msid of the new MessageGroup","summary":"<p>Creates a new <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code> with the <em>sender_id</em> and its associated <em>msid</em></p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(sender_id : Int64, msid : Int64) : Int64","args_html":"(sender_id : Int64, msid : Int64) : Int64","location":{"filename":"src/privateparlor/history/history_ratings.cr","line_number":22,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_ratings.cr#L22"},"def":{"name":"new_message","args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64","visibility":"Public","body":"message = MessageGroupRatings.new(sender_id, msid)\n@msid_map.merge!({msid => message})\nmsid\n"}}],"types":[{"html_id":"privateparlor/HistoryRatings/MessageGroupRatings","path":"HistoryRatings/MessageGroupRatings.html","kind":"class","full_name":"HistoryRatings::MessageGroupRatings","name":"MessageGroupRatings","abstract":false,"superclass":{"html_id":"privateparlor/History/MessageGroup","kind":"class","full_name":"History::MessageGroup","name":"MessageGroup"},"ancestors":[{"html_id":"privateparlor/History/MessageGroup","kind":"class","full_name":"History::MessageGroup","name":"MessageGroup"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/history/history_ratings.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_ratings.cr#L2"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"privateparlor/HistoryRatings","kind":"class","full_name":"HistoryRatings","name":"HistoryRatings"},"constructors":[{"html_id":"new(sender_id:Int64,msid:Int64)-class-method","name":"new","doc":":inherit:","summary":"<p>:inherit:</p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(sender_id : Int64, msid : Int64)","args_html":"(sender_id : Int64, msid : Int64)","location":{"filename":"src/privateparlor/history/history_ratings.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_ratings.cr#L6"},"def":{"name":"new","args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(sender_id, msid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"ratings:Set(Int64)-instance-method","name":"ratings","abstract":false,"location":{"filename":"src/privateparlor/history/history_ratings.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_ratings.cr#L3"},"def":{"name":"ratings","return_type":"Set(Int64)","visibility":"Public","body":"@ratings"}},{"html_id":"ratings=(ratings:Set(Int64))-instance-method","name":"ratings=","abstract":false,"args":[{"name":"ratings","external_name":"ratings","restriction":"Set(Int64)"}],"args_string":"(ratings : Set(Int64))","args_html":"(ratings : Set(Int64))","location":{"filename":"src/privateparlor/history/history_ratings.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_ratings.cr#L3"},"def":{"name":"ratings=","args":[{"name":"ratings","external_name":"ratings","restriction":"Set(Int64)"}],"visibility":"Public","body":"@ratings = ratings"}}]}]},{"html_id":"privateparlor/HistoryWarnings","path":"HistoryWarnings.html","kind":"class","full_name":"HistoryWarnings","name":"HistoryWarnings","abstract":false,"superclass":{"html_id":"privateparlor/History","kind":"class","full_name":"History","name":"History"},"ancestors":[{"html_id":"privateparlor/History","kind":"class","full_name":"History","name":"History"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/history/history_warnings.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_warnings.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new(message_life:Time::Span)-class-method","name":"new","abstract":false,"args":[{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"args_string":"(message_life : Time::Span)","args_html":"(message_life : Time::Span)","location":{"filename":"src/privateparlor/history/history_warnings.cr","line_number":13,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_warnings.cr#L13"},"def":{"name":"new","args":[{"name":"message_life","external_name":"message_life","restriction":"Time::Span"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message_life)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_warning(msid:Int64):Nil-instance-method","name":"add_warning","doc":"Set the warned variable in the associated `MessageGroup`.","summary":"<p>Set the warned variable in the associated <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code>.</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Nil","args_html":"(msid : Int64) : Nil","location":{"filename":"src/privateparlor/history/history_warnings.cr","line_number":29,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_warnings.cr#L29"},"def":{"name":"add_warning","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"if msg = @msid_map[msid].as(MessageGroupWarnings)\n  msg.warned = true\nend"}},{"html_id":"get_warning(msid:Int64):Bool|Nil-instance-method","name":"get_warning","doc":"Returns true if the associated `MessageGroup` was warned; false otherwise.","summary":"<p>Returns true if the associated <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code> was warned; false otherwise.</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(msid : Int64) : Bool | Nil","args_html":"(msid : Int64) : Bool | Nil","location":{"filename":"src/privateparlor/history/history_warnings.cr","line_number":36,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_warnings.cr#L36"},"def":{"name":"get_warning","args":[{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Bool | Nil","visibility":"Public","body":"if msg = @msid_map[msid].as(MessageGroupWarnings)\n  msg.warned\nend"}},{"html_id":"new_message(sender_id:Int64,msid:Int64):Int64-instance-method","name":"new_message","doc":"Creates a new `MessageGroup` with the *sender_id* and its associated *msid*\n\nReturns the original msid of the new MessageGroup","summary":"<p>Creates a new <code><a href=\"History/MessageGroup.html\">MessageGroup</a></code> with the <em>sender_id</em> and its associated <em>msid</em></p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(sender_id : Int64, msid : Int64) : Int64","args_html":"(sender_id : Int64, msid : Int64) : Int64","location":{"filename":"src/privateparlor/history/history_warnings.cr","line_number":22,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_warnings.cr#L22"},"def":{"name":"new_message","args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Int64","visibility":"Public","body":"message = MessageGroupWarnings.new(sender_id, msid)\n@msid_map.merge!({msid => message})\nmsid\n"}}],"types":[{"html_id":"privateparlor/HistoryWarnings/MessageGroupWarnings","path":"HistoryWarnings/MessageGroupWarnings.html","kind":"class","full_name":"HistoryWarnings::MessageGroupWarnings","name":"MessageGroupWarnings","abstract":false,"superclass":{"html_id":"privateparlor/History/MessageGroup","kind":"class","full_name":"History::MessageGroup","name":"MessageGroup"},"ancestors":[{"html_id":"privateparlor/History/MessageGroup","kind":"class","full_name":"History::MessageGroup","name":"MessageGroup"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/history/history_warnings.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_warnings.cr#L2"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"privateparlor/HistoryWarnings","kind":"class","full_name":"HistoryWarnings","name":"HistoryWarnings"},"constructors":[{"html_id":"new(sender_id:Int64,msid:Int64)-class-method","name":"new","doc":":inherit:","summary":"<p>:inherit:</p>","abstract":false,"args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(sender_id : Int64, msid : Int64)","args_html":"(sender_id : Int64, msid : Int64)","location":{"filename":"src/privateparlor/history/history_warnings.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_warnings.cr#L6"},"def":{"name":"new","args":[{"name":"sender_id","external_name":"sender_id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(sender_id, msid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"warned:Bool|Nil-instance-method","name":"warned","abstract":false,"location":{"filename":"src/privateparlor/history/history_warnings.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_warnings.cr#L3"},"def":{"name":"warned","return_type":"Bool | ::Nil","visibility":"Public","body":"@warned"}},{"html_id":"warned=(warned:Bool|Nil)-instance-method","name":"warned=","abstract":false,"args":[{"name":"warned","external_name":"warned","restriction":"Bool | ::Nil"}],"args_string":"(warned : Bool | Nil)","args_html":"(warned : Bool | Nil)","location":{"filename":"src/privateparlor/history/history_warnings.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/history/history_warnings.cr#L3"},"def":{"name":"warned=","args":[{"name":"warned","external_name":"warned","restriction":"Bool | ::Nil"}],"visibility":"Public","body":"@warned = warned"}}]}]},{"html_id":"privateparlor/Locale","path":"Locale.html","kind":"class","full_name":"Locale","name":"Locale","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/locale/locale.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/locale.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/privateparlor/locale/locale.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/locale.cr#L2"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"command_descriptions:CommandDescriptions-instance-method","name":"command_descriptions","abstract":false,"location":{"filename":"src/privateparlor/locale/locale.cr","line_number":23,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/locale.cr#L23"},"def":{"name":"command_descriptions","return_type":"CommandDescriptions","visibility":"Public","body":"@command_descriptions"}},{"html_id":"loading_bar:Array(String)-instance-method","name":"loading_bar","abstract":false,"location":{"filename":"src/privateparlor/locale/locale.cr","line_number":14,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/locale.cr#L14"},"def":{"name":"loading_bar","return_type":"Array(String)","visibility":"Public","body":"@loading_bar"}},{"html_id":"logs:Logs-instance-method","name":"logs","abstract":false,"location":{"filename":"src/privateparlor/locale/locale.cr","line_number":20,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/locale.cr#L20"},"def":{"name":"logs","return_type":"Logs","visibility":"Public","body":"@logs"}},{"html_id":"replies:Replies-instance-method","name":"replies","abstract":false,"location":{"filename":"src/privateparlor/locale/locale.cr","line_number":17,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/locale.cr#L17"},"def":{"name":"replies","return_type":"Replies","visibility":"Public","body":"@replies"}},{"html_id":"time_format:String-instance-method","name":"time_format","abstract":false,"location":{"filename":"src/privateparlor/locale/locale.cr","line_number":8,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/locale.cr#L8"},"def":{"name":"time_format","return_type":"String","visibility":"Public","body":"@time_format"}},{"html_id":"time_units:Array(String)-instance-method","name":"time_units","abstract":false,"location":{"filename":"src/privateparlor/locale/locale.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/locale.cr#L5"},"def":{"name":"time_units","return_type":"Array(String)","visibility":"Public","body":"@time_units"}},{"html_id":"toggle:Array(String)-instance-method","name":"toggle","abstract":false,"location":{"filename":"src/privateparlor/locale/locale.cr","line_number":11,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/locale.cr#L11"},"def":{"name":"toggle","return_type":"Array(String)","visibility":"Public","body":"@toggle"}}]},{"html_id":"privateparlor/Localization","path":"Localization.html","kind":"module","full_name":"Localization","name":"Localization","abstract":false,"locations":[{"filename":"src/privateparlor/locale/localization.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/localization.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"privateparlor/Localization","kind":"module","full_name":"Localization","name":"Localization"}],"instance_methods":[{"html_id":"parse_locale(language_code:String):Locale-instance-method","name":"parse_locale","abstract":false,"args":[{"name":"language_code","external_name":"language_code","restriction":"String"}],"args_string":"(language_code : String) : Locale","args_html":"(language_code : String) : <a href=\"Locale.html\">Locale</a>","location":{"filename":"src/privateparlor/locale/localization.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/localization.cr#L4"},"def":{"name":"parse_locale","args":[{"name":"language_code","external_name":"language_code","restriction":"String"}],"return_type":"Locale","visibility":"Public","body":"begin\n  Locale.from_yaml(File.open(\"./locales/#{language_code}.yaml\"))\nrescue ex : YAML::ParseException\n  Log.error(exception: ex) do\n    \"Could not parse the given value at row #{ex.line_number}. This could be because a required value was not set or the wrong type was given.\"\n  end\n  exit\nrescue ex : File::NotFoundError | File::AccessDeniedError\n  Log.error(exception: ex) do\n    \"Could not open \\\"./locales/#{language_code}.yaml\\\". Exiting...\"\n  end\n  exit\nend"}}]},{"html_id":"privateparlor/Logs","path":"Logs.html","kind":"class","full_name":"Logs","name":"Logs","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/locale/logs.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/privateparlor/locale/logs.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L2"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"blacklisted:String-instance-method","name":"blacklisted","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":35,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L35"},"def":{"name":"blacklisted","return_type":"String","visibility":"Public","body":"@blacklisted"}},{"html_id":"demoted:String-instance-method","name":"demoted","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":20,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L20"},"def":{"name":"demoted","return_type":"String","visibility":"Public","body":"@demoted"}},{"html_id":"force_leave:String-instance-method","name":"force_leave","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":65,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L65"},"def":{"name":"force_leave","return_type":"String","visibility":"Public","body":"@force_leave"}},{"html_id":"joined:String-instance-method","name":"joined","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":8,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L8"},"def":{"name":"joined","return_type":"String","visibility":"Public","body":"@joined"}},{"html_id":"left:String-instance-method","name":"left","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":14,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L14"},"def":{"name":"left","return_type":"String","visibility":"Public","body":"@left"}},{"html_id":"message_deleted:String-instance-method","name":"message_deleted","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":26,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L26"},"def":{"name":"message_deleted","return_type":"String","visibility":"Public","body":"@message_deleted"}},{"html_id":"message_removed:String-instance-method","name":"message_removed","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":29,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L29"},"def":{"name":"message_removed","return_type":"String","visibility":"Public","body":"@message_removed"}},{"html_id":"motd_set:String-instance-method","name":"motd_set","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":59,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L59"},"def":{"name":"motd_set","return_type":"String","visibility":"Public","body":"@motd_set"}},{"html_id":"pinned:String-instance-method","name":"pinned","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":53,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L53"},"def":{"name":"pinned","return_type":"String","visibility":"Public","body":"@pinned"}},{"html_id":"promoted:String-instance-method","name":"promoted","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":17,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L17"},"def":{"name":"promoted","return_type":"String","visibility":"Public","body":"@promoted"}},{"html_id":"ranked_message:String-instance-method","name":"ranked_message","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":62,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L62"},"def":{"name":"ranked_message","return_type":"String","visibility":"Public","body":"@ranked_message"}},{"html_id":"reason_prefix:String-instance-method","name":"reason_prefix","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":41,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L41"},"def":{"name":"reason_prefix","return_type":"String","visibility":"Public","body":"@reason_prefix"}},{"html_id":"rejoined:String-instance-method","name":"rejoined","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":11,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L11"},"def":{"name":"rejoined","return_type":"String","visibility":"Public","body":"@rejoined"}},{"html_id":"removed_cooldown:String-instance-method","name":"removed_cooldown","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":32,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L32"},"def":{"name":"removed_cooldown","return_type":"String","visibility":"Public","body":"@removed_cooldown"}},{"html_id":"revealed:String-instance-method","name":"revealed","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":50,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L50"},"def":{"name":"revealed","return_type":"String","visibility":"Public","body":"@revealed"}},{"html_id":"spoiled:String-instance-method","name":"spoiled","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":44,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L44"},"def":{"name":"spoiled","return_type":"String","visibility":"Public","body":"@spoiled"}},{"html_id":"start:String-instance-method","name":"start","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L5"},"def":{"name":"start","return_type":"String","visibility":"Public","body":"@start"}},{"html_id":"unpinned:String-instance-method","name":"unpinned","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":56,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L56"},"def":{"name":"unpinned","return_type":"String","visibility":"Public","body":"@unpinned"}},{"html_id":"unspoiled:String-instance-method","name":"unspoiled","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":47,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L47"},"def":{"name":"unspoiled","return_type":"String","visibility":"Public","body":"@unspoiled"}},{"html_id":"warned:String-instance-method","name":"warned","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":23,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L23"},"def":{"name":"warned","return_type":"String","visibility":"Public","body":"@warned"}},{"html_id":"whitelisted:String-instance-method","name":"whitelisted","abstract":false,"location":{"filename":"src/privateparlor/locale/logs.cr","line_number":38,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/logs.cr#L38"},"def":{"name":"whitelisted","return_type":"String","visibility":"Public","body":"@whitelisted"}}]},{"html_id":"privateparlor/MessagePermissions","path":"MessagePermissions.html","kind":"enum","full_name":"MessagePermissions","name":"MessagePermissions","abstract":false,"ancestors":[{"html_id":"privateparlor/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"privateparlor/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"privateparlor/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Text","name":"Text","value":"0"},{"id":"Animation","name":"Animation","value":"1"},{"id":"Audio","name":"Audio","value":"2"},{"id":"Document","name":"Document","value":"3"},{"id":"Video","name":"Video","value":"4"},{"id":"VideoNote","name":"VideoNote","value":"5"},{"id":"Voice","name":"Voice","value":"6"},{"id":"Photo","name":"Photo","value":"7"},{"id":"MediaGroup","name":"MediaGroup","value":"8"},{"id":"Poll","name":"Poll","value":"9"},{"id":"Forward","name":"Forward","value":"10"},{"id":"Sticker","name":"Sticker","value":"11"},{"id":"Dice","name":"Dice","value":"12"},{"id":"Dart","name":"Dart","value":"13"},{"id":"Basketball","name":"Basketball","value":"14"},{"id":"Soccerball","name":"Soccerball","value":"15"},{"id":"SlotMachine","name":"SlotMachine","value":"16"},{"id":"Bowling","name":"Bowling","value":"17"},{"id":"Venue","name":"Venue","value":"18"},{"id":"Location","name":"Location","value":"19"},{"id":"Contact","name":"Contact","value":"20"}],"instance_methods":[{"html_id":"animation?-instance-method","name":"animation?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L3"},"def":{"name":"animation?","visibility":"Public","body":"self == Animation"}},{"html_id":"audio?-instance-method","name":"audio?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L4"},"def":{"name":"audio?","visibility":"Public","body":"self == Audio"}},{"html_id":"basketball?-instance-method","name":"basketball?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":16,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L16"},"def":{"name":"basketball?","visibility":"Public","body":"self == Basketball"}},{"html_id":"bowling?-instance-method","name":"bowling?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":19,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L19"},"def":{"name":"bowling?","visibility":"Public","body":"self == Bowling"}},{"html_id":"contact?-instance-method","name":"contact?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":22,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L22"},"def":{"name":"contact?","visibility":"Public","body":"self == Contact"}},{"html_id":"dart?-instance-method","name":"dart?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":15,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L15"},"def":{"name":"dart?","visibility":"Public","body":"self == Dart"}},{"html_id":"dice?-instance-method","name":"dice?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":14,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L14"},"def":{"name":"dice?","visibility":"Public","body":"self == Dice"}},{"html_id":"document?-instance-method","name":"document?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L5"},"def":{"name":"document?","visibility":"Public","body":"self == Document"}},{"html_id":"forward?-instance-method","name":"forward?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":12,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L12"},"def":{"name":"forward?","visibility":"Public","body":"self == Forward"}},{"html_id":"location?-instance-method","name":"location?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":21,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L21"},"def":{"name":"location?","visibility":"Public","body":"self == Location"}},{"html_id":"media_group?-instance-method","name":"media_group?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":10,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L10"},"def":{"name":"media_group?","visibility":"Public","body":"self == MediaGroup"}},{"html_id":"photo?-instance-method","name":"photo?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":9,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L9"},"def":{"name":"photo?","visibility":"Public","body":"self == Photo"}},{"html_id":"poll?-instance-method","name":"poll?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":11,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L11"},"def":{"name":"poll?","visibility":"Public","body":"self == Poll"}},{"html_id":"slot_machine?-instance-method","name":"slot_machine?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":18,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L18"},"def":{"name":"slot_machine?","visibility":"Public","body":"self == SlotMachine"}},{"html_id":"soccerball?-instance-method","name":"soccerball?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":17,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L17"},"def":{"name":"soccerball?","visibility":"Public","body":"self == Soccerball"}},{"html_id":"sticker?-instance-method","name":"sticker?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":13,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L13"},"def":{"name":"sticker?","visibility":"Public","body":"self == Sticker"}},{"html_id":"text?-instance-method","name":"text?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L2"},"def":{"name":"text?","visibility":"Public","body":"self == Text"}},{"html_id":"venue?-instance-method","name":"venue?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":20,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L20"},"def":{"name":"venue?","visibility":"Public","body":"self == Venue"}},{"html_id":"video?-instance-method","name":"video?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L6"},"def":{"name":"video?","visibility":"Public","body":"self == Video"}},{"html_id":"video_note?-instance-method","name":"video_note?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":7,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L7"},"def":{"name":"video_note?","visibility":"Public","body":"self == VideoNote"}},{"html_id":"voice?-instance-method","name":"voice?","abstract":false,"location":{"filename":"src/privateparlor/rank/message_permissions.cr","line_number":8,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/message_permissions.cr#L8"},"def":{"name":"voice?","visibility":"Public","body":"self == Voice"}}]},{"html_id":"privateparlor/MessageProc","path":"MessageProc.html","kind":"alias","full_name":"MessageProc","name":"MessageProc","abstract":false,"locations":[{"filename":"src/privateparlor/telegram.cr","line_number":7,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L7"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":true,"aliased":"(Proc(Int64, (Int64 | Nil), Array(Tourmaline::Message)) | Proc(Int64, (Int64 | Nil), Tourmaline::Message))","aliased_html":"Int64, Int64? -> Array(Tourmaline::Message) | Int64, Int64? -> Tourmaline::Message","const":false},{"html_id":"privateparlor/MessageQueue","path":"MessageQueue.html","kind":"class","full_name":"MessageQueue","name":"MessageQueue","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/queue/message_queue.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/message_queue.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/privateparlor/queue/message_queue.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/message_queue.cr#L5"},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"add_to_queue(cached_msid:Int64|Array(Int64),sender_id:Int64|Nil,receiver_ids:Array(Int64),reply_msid:Nil,func:MessageProc):Nil-instance-method","name":"add_to_queue","doc":"Creates a new `QueuedMessage` and pushes it to the back of the queue.","summary":"<p>Creates a new <code><a href=\"QueuedMessage.html\">QueuedMessage</a></code> and pushes it to the back of the queue.</p>","abstract":false,"args":[{"name":"cached_msid","external_name":"cached_msid","restriction":"Int64 | Array(Int64)"},{"name":"sender_id","external_name":"sender_id","restriction":"Int64 | Nil"},{"name":"receiver_ids","external_name":"receiver_ids","restriction":"Array(Int64)"},{"name":"reply_msid","external_name":"reply_msid","restriction":"Nil"},{"name":"func","external_name":"func","restriction":"MessageProc"}],"args_string":"(cached_msid : Int64 | Array(Int64), sender_id : Int64 | Nil, receiver_ids : Array(Int64), reply_msid : Nil, func : MessageProc) : Nil","args_html":"(cached_msid : Int64 | Array(Int64), sender_id : Int64 | Nil, receiver_ids : Array(Int64), reply_msid : Nil, func : <a href=\"MessageProc.html\">MessageProc</a>) : Nil","location":{"filename":"src/privateparlor/queue/message_queue.cr","line_number":19,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/message_queue.cr#L19"},"def":{"name":"add_to_queue","args":[{"name":"cached_msid","external_name":"cached_msid","restriction":"Int64 | Array(Int64)"},{"name":"sender_id","external_name":"sender_id","restriction":"Int64 | Nil"},{"name":"receiver_ids","external_name":"receiver_ids","restriction":"Array(Int64)"},{"name":"reply_msid","external_name":"reply_msid","restriction":"Nil"},{"name":"func","external_name":"func","restriction":"MessageProc"}],"return_type":"Nil","visibility":"Public","body":"@queue_mutex.synchronize do\n  receiver_ids.each do |receiver_id|\n    @queue.push(QueuedMessage.new(cached_msid, sender_id, receiver_id, nil, func))\n  end\nend"}},{"html_id":"add_to_queue(cached_msid:Int64|Array(Int64),sender_id:Int64|Nil,receiver_ids:Array(Int64),reply_msids:Hash(Int64,Int64),func:MessageProc):Nil-instance-method","name":"add_to_queue","doc":"Creates a new `QueuedMessage` with a reply and pushes it to the back of the queue.","summary":"<p>Creates a new <code><a href=\"QueuedMessage.html\">QueuedMessage</a></code> with a reply and pushes it to the back of the queue.</p>","abstract":false,"args":[{"name":"cached_msid","external_name":"cached_msid","restriction":"Int64 | Array(Int64)"},{"name":"sender_id","external_name":"sender_id","restriction":"Int64 | Nil"},{"name":"receiver_ids","external_name":"receiver_ids","restriction":"Array(Int64)"},{"name":"reply_msids","external_name":"reply_msids","restriction":"Hash(Int64, Int64)"},{"name":"func","external_name":"func","restriction":"MessageProc"}],"args_string":"(cached_msid : Int64 | Array(Int64), sender_id : Int64 | Nil, receiver_ids : Array(Int64), reply_msids : Hash(Int64, Int64), func : MessageProc) : Nil","args_html":"(cached_msid : Int64 | Array(Int64), sender_id : Int64 | Nil, receiver_ids : Array(Int64), reply_msids : Hash(Int64, Int64), func : <a href=\"MessageProc.html\">MessageProc</a>) : Nil","location":{"filename":"src/privateparlor/queue/message_queue.cr","line_number":28,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/message_queue.cr#L28"},"def":{"name":"add_to_queue","args":[{"name":"cached_msid","external_name":"cached_msid","restriction":"Int64 | Array(Int64)"},{"name":"sender_id","external_name":"sender_id","restriction":"Int64 | Nil"},{"name":"receiver_ids","external_name":"receiver_ids","restriction":"Array(Int64)"},{"name":"reply_msids","external_name":"reply_msids","restriction":"Hash(Int64, Int64)"},{"name":"func","external_name":"func","restriction":"MessageProc"}],"return_type":"Nil","visibility":"Public","body":"@queue_mutex.synchronize do\n  receiver_ids.each do |receiver_id|\n    @queue.push(QueuedMessage.new(cached_msid, sender_id, receiver_id, reply_msids[receiver_id], func))\n  end\nend"}},{"html_id":"add_to_queue_priority(receiver_id:Int64,reply_msid:Int64|Nil,func:MessageProc):Nil-instance-method","name":"add_to_queue_priority","doc":"Creates a new `QueuedMessage` and pushes it to the front of the queue.","summary":"<p>Creates a new <code><a href=\"QueuedMessage.html\">QueuedMessage</a></code> and pushes it to the front of the queue.</p>","abstract":false,"args":[{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"},{"name":"reply_msid","external_name":"reply_msid","restriction":"Int64 | Nil"},{"name":"func","external_name":"func","restriction":"MessageProc"}],"args_string":"(receiver_id : Int64, reply_msid : Int64 | Nil, func : MessageProc) : Nil","args_html":"(receiver_id : Int64, reply_msid : Int64 | Nil, func : <a href=\"MessageProc.html\">MessageProc</a>) : Nil","location":{"filename":"src/privateparlor/queue/message_queue.cr","line_number":37,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/message_queue.cr#L37"},"def":{"name":"add_to_queue_priority","args":[{"name":"receiver_id","external_name":"receiver_id","restriction":"Int64"},{"name":"reply_msid","external_name":"reply_msid","restriction":"Int64 | Nil"},{"name":"func","external_name":"func","restriction":"MessageProc"}],"return_type":"Nil","visibility":"Public","body":"@queue_mutex.synchronize do\n  @queue.unshift(QueuedMessage.new(nil, nil, receiver_id, reply_msid, func))\nend"}},{"html_id":"get_message:QueuedMessage|Nil-instance-method","name":"get_message","abstract":false,"location":{"filename":"src/privateparlor/queue/message_queue.cr","line_number":43,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/message_queue.cr#L43"},"def":{"name":"get_message","return_type":"QueuedMessage | ::Nil","visibility":"Public","body":"msg = nil\n@queue_mutex.synchronize do\n  msg = @queue.shift?\nend\nmsg\n"}},{"html_id":"queue:Deque(QueuedMessage)-instance-method","name":"queue","abstract":false,"location":{"filename":"src/privateparlor/queue/message_queue.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/message_queue.cr#L2"},"def":{"name":"queue","return_type":"Deque(QueuedMessage)","visibility":"Public","body":"@queue"}},{"html_id":"queue_mutex:Mutex-instance-method","name":"queue_mutex","abstract":false,"location":{"filename":"src/privateparlor/queue/message_queue.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/message_queue.cr#L3"},"def":{"name":"queue_mutex","return_type":"Mutex","visibility":"Public","body":"@queue_mutex"}},{"html_id":"reject_messsages(&):Nil-instance-method","name":"reject_messsages","abstract":false,"location":{"filename":"src/privateparlor/queue/message_queue.cr","line_number":10,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/message_queue.cr#L10"},"def":{"name":"reject_messsages","yields":1,"block_arity":1,"return_type":"Nil","visibility":"Public","body":"@queue_mutex.synchronize do\n  @queue.reject! do |msg|\n    yield msg\n  end\nend"}}]},{"html_id":"privateparlor/PrivateParlor","path":"PrivateParlor.html","kind":"class","full_name":"PrivateParlor","name":"PrivateParlor","abstract":false,"superclass":{"html_id":"privateparlor/Tourmaline/Client","kind":"class","full_name":"Tourmaline::Client","name":"Client"},"ancestors":[{"html_id":"privateparlor/Tourmaline","kind":"module","full_name":"Tourmaline","name":"Tourmaline"},{"html_id":"privateparlor/Tourmaline/Annotations","kind":"module","full_name":"Tourmaline::Annotations","name":"Annotations"},{"html_id":"privateparlor/Tourmaline/Handlers","kind":"module","full_name":"Tourmaline::Handlers","name":"Handlers"},{"html_id":"privateparlor/Tourmaline/Client","kind":"class","full_name":"Tourmaline::Client","name":"Client"},{"html_id":"privateparlor/Tourmaline/EventHandler/Annotator","kind":"module","full_name":"Tourmaline::EventHandler::Annotator","name":"Annotator"},{"html_id":"privateparlor/Tourmaline/Client/TDLightMethods","kind":"module","full_name":"Tourmaline::Client::TDLightMethods","name":"TDLightMethods"},{"html_id":"privateparlor/Tourmaline/Client/WebhookMethods","kind":"module","full_name":"Tourmaline::Client::WebhookMethods","name":"WebhookMethods"},{"html_id":"privateparlor/Tourmaline/Client/StickerMethods","kind":"module","full_name":"Tourmaline::Client::StickerMethods","name":"StickerMethods"},{"html_id":"privateparlor/Tourmaline/Client/PollMethods","kind":"module","full_name":"Tourmaline::Client::PollMethods","name":"PollMethods"},{"html_id":"privateparlor/Tourmaline/Client/PaymentMethods","kind":"module","full_name":"Tourmaline::Client::PaymentMethods","name":"PaymentMethods"},{"html_id":"privateparlor/Tourmaline/Client/PassportMethods","kind":"module","full_name":"Tourmaline::Client::PassportMethods","name":"PassportMethods"},{"html_id":"privateparlor/Tourmaline/Client/GameMethods","kind":"module","full_name":"Tourmaline::Client::GameMethods","name":"GameMethods"},{"html_id":"privateparlor/Tourmaline/Client/CoreMethods","kind":"module","full_name":"Tourmaline::Client::CoreMethods","name":"CoreMethods"},{"html_id":"privateparlor/Tourmaline/Logger","kind":"module","full_name":"Tourmaline::Logger","name":"Logger"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/telegram.cr","line_number":9,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L9"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"privateparlor/Tourmaline","kind":"module","full_name":"Tourmaline","name":"Tourmaline"}],"constructors":[{"html_id":"new(config:Config)-class-method","name":"new","doc":"Creates a new instance of `PrivateParlor`.\n\n## Arguments:\n\n`config`\n:     a `Config` from parsing the `config.yaml` file","summary":"<p>Creates a new instance of <code><a href=\"PrivateParlor.html\">PrivateParlor</a></code>.</p>","abstract":false,"args":[{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(config : Config)","args_html":"(config : <a href=\"Config.html\">Config</a>)","location":{"filename":"src/privateparlor/telegram.cr","line_number":60,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L60"},"def":{"name":"new","args":[{"name":"config","external_name":"config","restriction":"Config"}],"visibility":"Public","body":"_ = allocate\n_.initialize(config)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"access:AuthorizedRanks-instance-method","name":"access","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":12,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L12"},"def":{"name":"access","return_type":"AuthorizedRanks","visibility":"Public","body":"@access"}},{"html_id":"albums:Hash(String,Album)-instance-method","name":"albums","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":17,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L17"},"def":{"name":"albums","return_type":"Hash(String, Album)","visibility":"Public","body":"@albums"}},{"html_id":"allow_media_spoilers:Bool|Nil-instance-method","name":"allow_media_spoilers","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":27,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L27"},"def":{"name":"allow_media_spoilers","return_type":"Bool | ::Nil","visibility":"Public","body":"@allow_media_spoilers"}},{"html_id":"blacklist_command(ctx:CommandHandler::Context):Nil-instance-method","name":"blacklist_command","doc":"Blacklists a user from the chat, deletes the reply, and removes all the user's incoming and outgoing messages from the queue.\n\nChecks for the following permissions: `blacklist`\n\nIf `blacklist`, allows the user to blacklist another user.","summary":"<p>Blacklists a user from the chat, deletes the reply, and removes all the user's incoming and outgoing messages from the queue.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1079,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1079"},"def":{"name":"blacklist_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :blacklist)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif reply = message.reply_message\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.no_reply)\nend\nif reply_user = database.get_user(@history.get_sender_id(reply.message_id))\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.not_in_cache)\nend\nif reply_user.rank < user.rank\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nuser.set_active\n@database.modify_user(user)\nreason = Format.get_arg(ctx.message.text)\nreply_user.blacklist(reason)\n@database.modify_user(reply_user)\n@queue.reject_messsages do |msg|\n  (msg.receiver == reply_user.id) || (msg.sender == reply_user.id)\nend\ncached_msid = delete_messages(reply.message_id, reply_user.id, reply_user.debug_enabled)\nrelay_to_one(cached_msid, reply_user.id, @locale.replies.blacklisted, {\"contact\" => Format.format_contact_reply(@blacklist_contact, @locale), \"reason\" => Format.format_reason_reply(reason, @locale)})\nlog_output(@locale.logs.blacklisted, {\"id\" => reply_user.id.to_s, \"name\" => reply_user.get_formatted_name, \"invoker\" => user.get_formatted_name, \"reason\" => Format.format_reason_log(reason, @locale)})\nrelay_to_one(message.message_id, user.id, @locale.replies.success)\n"}},{"html_id":"blacklist_contact:String|Nil-instance-method","name":"blacklist_contact","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":41,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L41"},"def":{"name":"blacklist_contact","return_type":"String | ::Nil","visibility":"Public","body":"@blacklist_contact"}},{"html_id":"check_r9k_media(file_id:String,user:Database::User):Bool|Nil-instance-method","name":"check_r9k_media","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"}],"args_string":"(file_id : String, user : Database::User) : Bool | Nil","args_html":"(file_id : String, user : <a href=\"Database/User.html\">Database::User</a>) : Bool | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1735,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1735"},"def":{"name":"check_r9k_media","args":[{"name":"file_id","external_name":"file_id","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if Robot9000.unoriginal_media?(@database.db, file_id)\n  return\nend\nRobot9000.add_file_id(@database.db, file_id)\ntrue\n"}},{"html_id":"check_text(text:String,user:Database::User,msid:Int64,entities:Array(Tourmaline::MessageEntity)):String|Nil-instance-method","name":"check_text","doc":"Checks if the text contains a special font or starts a sign command.\n\nReturns the given text or a formatted text if it is allowed; nil if otherwise or a sign command could not be used.","summary":"<p>Checks if the text contains a special font or starts a sign command.</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(text : String, user : Database::User, msid : Int64, entities : Array(Tourmaline::MessageEntity)) : String | Nil","args_html":"(text : String, user : <a href=\"Database/User.html\">Database::User</a>, msid : Int64, entities : Array(Tourmaline::MessageEntity)) : String | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1399,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1399"},"def":{"name":"check_text","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"String | ::Nil","visibility":"Public","body":"if (Format.contains_html?(text)) || (!(Format.allow_text?(text)))\n  return relay_to_one(msid, user.id, @locale.replies.rejected_message)\nend\ntext = Format.strip_format(text, entities, @entity_types, @linked_network)\nif text.starts_with?('/')\n  handle_embedded_command(text, user, msid)\nelse\n  text\nend\n"}},{"html_id":"command_disabled(ctx:CommandHandler::Context):Nil-instance-method","name":"command_disabled","doc":"Sends a message to the user if a disabled command is used","summary":"<p>Sends a message to the user if a disabled command is used</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1386,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1386"},"def":{"name":"command_disabled","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nuser.set_active\n@database.modify_user(user)\nrelay_to_one(message.message_id, user.id, @locale.replies.command_disabled)\n"}},{"html_id":"cooldown_time_begin:Array(Int32)-instance-method","name":"cooldown_time_begin","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":20,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L20"},"def":{"name":"cooldown_time_begin","return_type":"Array(Int32)","visibility":"Public","body":"@cooldown_time_begin"}},{"html_id":"cooldown_time_linear_b:Int32-instance-method","name":"cooldown_time_linear_b","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":22,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L22"},"def":{"name":"cooldown_time_linear_b","return_type":"Int32","visibility":"Public","body":"@cooldown_time_linear_b"}},{"html_id":"cooldown_time_linear_m:Int32-instance-method","name":"cooldown_time_linear_m","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":21,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L21"},"def":{"name":"cooldown_time_linear_m","return_type":"Int32","visibility":"Public","body":"@cooldown_time_linear_m"}},{"html_id":"database:Database-instance-method","name":"database","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":10,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L10"},"def":{"name":"database","return_type":"Database","visibility":"Public","body":"@database"}},{"html_id":"default_rank:Int32-instance-method","name":"default_rank","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":45,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L45"},"def":{"name":"default_rank","return_type":"Int32","visibility":"Public","body":"@default_rank"}},{"html_id":"delete_command(ctx:CommandHandler::Context):Nil-instance-method","name":"delete_command","doc":"Delete a message from a user, give a warning and a cooldown.\n\nChecks for the following permissions: `delete`\n\nIf `delete`, allows the user to delete a message","summary":"<p>Delete a message from a user, give a warning and a cooldown.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":917,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L917"},"def":{"name":"delete_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :delete)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif reply = message.reply_message\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.no_reply)\nend\nif reply_user = database.get_user(@history.get_sender_id(reply.message_id))\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.not_in_cache)\nend\nuser.set_active\n@database.modify_user(user)\nreason = Format.get_arg(message.text)\ncached_msid = delete_messages(reply.message_id, reply_user.id, reply_user.debug_enabled)\nduration = Format.format_timespan(reply_user.cooldown_and_warn(cooldown_time_begin, cooldown_time_linear_m, cooldown_time_linear_b, warn_expire_hours, karma_warn_penalty), @locale.time_units)\n@database.modify_user(reply_user)\nrelay_to_one(cached_msid, reply_user.id, @locale.replies.message_deleted, {\"reason\" => Format.format_reason_reply(reason, @locale), \"duration\" => duration})\nlog_output(@locale.logs.message_deleted, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name, \"msid\" => cached_msid.to_s, \"oid\" => reply_user.get_obfuscated_id, \"duration\" => duration, \"reason\" => Format.format_reason_log(reason, @locale)})\nrelay_to_one(message.message_id, user.id, @locale.replies.success)\n"}},{"html_id":"delete_messages(msid:Int64,user_id:Int64,debug_enabled:Bool|Nil):Int64|Nil-instance-method","name":"delete_messages","doc":"Deletes the given message for all receivers and removes it from the message history.\n\nReturns the sender's (user_id) original message id upon success.","summary":"<p>Deletes the given message for all receivers and removes it from the message history.</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"user_id","external_name":"user_id","restriction":"Int64"},{"name":"debug_enabled","external_name":"debug_enabled","restriction":"Bool | ::Nil"}],"args_string":"(msid : Int64, user_id : Int64, debug_enabled : Bool | Nil) : Int64 | Nil","args_html":"(msid : Int64, user_id : Int64, debug_enabled : Bool | Nil) : Int64 | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2402,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2402"},"def":{"name":"delete_messages","args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"user_id","external_name":"user_id","restriction":"Int64"},{"name":"debug_enabled","external_name":"debug_enabled","restriction":"Bool | ::Nil"}],"return_type":"Int64 | ::Nil","visibility":"Public","body":"if reply_msids = @history.get_all_msids(msid)\n  if !debug_enabled\n    reply_msids.delete(user_id)\n  end\n  reply_msids.each do |receiver_id, receiver_msid|\n    delete_message(receiver_id, receiver_msid)\n  end\n  @history.del_message_group(msid)\nend"}},{"html_id":"demote_command(ctx:CommandHandler::Context):Nil-instance-method","name":"demote_command","doc":"Demotes a user to a given rank.\n\nChecks for the following permissions: `demote`\n\nIf used with a reply, the reply user is demoted to either the user rank or a given rank.","summary":"<p>Demotes a user to a given rank.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":776,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L776"},"def":{"name":"demote_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :demote)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif reply = message.reply_message\n  demote_from_reply(user, Format.get_arg(ctx.message.text), message.message_id, reply.message_id)\nelse\n  demote_from_args(user, Format.get_args(message.text, count: 2), message.message_id)\nend\n"}},{"html_id":"demote_from_args(user:Database::User,args:Array(String)|Nil,msid:Int64):Nil-instance-method","name":"demote_from_args","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"args","external_name":"args","restriction":"Array(String) | Nil"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(user : Database::User, args : Array(String) | Nil, msid : Int64) : Nil","args_html":"(user : <a href=\"Database/User.html\">Database::User</a>, args : Array(String) | Nil, msid : Int64) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":825,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L825"},"def":{"name":"demote_from_args","args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"args","external_name":"args","restriction":"Array(String) | Nil"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"if args && (args.size == 2)\nelse\n  return relay_to_one(msid, user.id, @locale.replies.missing_args)\nend\nif tuple = @access.find_rank(args[1].downcase, args[1].to_i?)\nelse\n  return relay_to_one(msid, user.id, @locale.replies.no_rank_found, {\"ranks\" => @access.rank_names(limit: user.rank).to_s})\nend\nif demoted_user = database.get_user_by_arg(args[0])\nelse\n  return relay_to_one(msid, user.id, @locale.replies.no_user_found)\nend\nif @access.can_demote?(tuple[0], user.rank, demoted_user.rank)\nelse\n  return relay_to_one(msid, user.id, @locale.replies.fail)\nend\nuser.set_active\n@database.modify_user(user)\ndemoted_user.set_rank(tuple[0])\n@database.modify_user(demoted_user)\nlog_output(@locale.logs.demoted, {\"id\" => demoted_user.id.to_s, \"name\" => demoted_user.get_formatted_name, \"rank\" => tuple[1].name, \"invoker\" => user.get_formatted_name})\nrelay_to_one(msid, user.id, @locale.replies.success)\n"}},{"html_id":"demote_from_reply(user:Database::User,arg:String|Nil,msid:Int64,reply:Int64):Nil-instance-method","name":"demote_from_reply","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"arg","external_name":"arg","restriction":"String | ::Nil"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"reply","external_name":"reply","restriction":"Int64"}],"args_string":"(user : Database::User, arg : String | Nil, msid : Int64, reply : Int64) : Nil","args_html":"(user : <a href=\"Database/User.html\">Database::User</a>, arg : String | Nil, msid : Int64, reply : Int64) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":791,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L791"},"def":{"name":"demote_from_reply","args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"arg","external_name":"arg","restriction":"String | ::Nil"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"reply","external_name":"reply","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"if arg.nil?\n  tuple = {@default_rank, @access.ranks[@default_rank]}\nelse\n  if arg\n    tuple = @access.find_rank(arg.downcase, arg.to_i?)\n  else\n    return relay_to_one(msid, user.id, @locale.replies.missing_args)\n  end\nend\nif tuple\nelse\n  return relay_to_one(msid, user.id, @locale.replies.no_rank_found, {\"ranks\" => @access.rank_names(limit: user.rank).to_s})\nend\nif demoted_user = database.get_user(@history.get_sender_id(reply))\nelse\n  return relay_to_one(msid, user.id, @locale.replies.not_in_cache)\nend\nif @access.can_demote?(tuple[0], user.rank, demoted_user.rank)\nelse\n  return relay_to_one(msid, user.id, @locale.replies.fail)\nend\nuser.set_active\n@database.modify_user(user)\ndemoted_user.set_rank(tuple[0])\n@database.modify_user(demoted_user)\nlog_output(@locale.logs.demoted, {\"id\" => demoted_user.id.to_s, \"name\" => demoted_user.get_formatted_name, \"rank\" => tuple[1].name, \"invoker\" => user.get_formatted_name})\nrelay_to_one(msid, user.id, @locale.replies.success)\n"}},{"html_id":"deny_user(user:Database::User):Nil-instance-method","name":"deny_user","doc":"Sends a message to the user explaining why they cannot chat at this time","summary":"<p>Sends a message to the user explaining why they cannot chat at this time</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Database::User"}],"args_string":"(user : Database::User) : Nil","args_html":"(user : <a href=\"Database/User.html\">Database::User</a>) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2371,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2371"},"def":{"name":"deny_user","args":[{"name":"user","external_name":"user","restriction":"Database::User"}],"return_type":"Nil","visibility":"Public","body":"if user.blacklisted?\n  relay_to_one(nil, user.id, @locale.replies.blacklisted, {\"contact\" => Format.format_contact_reply(@blacklist_contact, @locale), \"reason\" => Format.format_reason_reply(user.blacklist_reason, @locale)})\nelse\n  if cooldown_until = user.cooldown_until\n    relay_to_one(nil, user.id, @locale.replies.on_cooldown, {\"time\" => Format.format_time(cooldown_until, @locale.time_format)})\n  else\n    if (Time.utc - user.joined) < @media_limit_period.hours\n      relay_to_one(nil, user.id, @locale.replies.media_limit, {\"total\" => (@media_limit_period.hours - (Time.utc - user.joined)).hours.to_s})\n    else\n      relay_to_one(nil, user.id, @locale.replies.not_in_chat)\n    end\n  end\nend"}},{"html_id":"downvote_command(ctx:CommandHandler::Context):Nil-instance-method","name":"downvote_command","doc":"Downvotes a message.\n\nChecks for the following permissions: `downvote`\n\nIf `downvote`, allows the user to downvote a message","summary":"<p>Downvotes a message.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":535,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L535"},"def":{"name":"downvote_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif (history_with_karma = @history) && history_with_karma.is_a?(HistoryFull | HistoryRatings | DatabaseHistory)\nelse\n  return\nend\nif @access.authorized?(user.rank, :downvote)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif reply = message.reply_message\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.no_reply)\nend\nif reply_user = database.get_user(history_with_karma.get_sender_id(reply.message_id))\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.not_in_cache)\nend\nif (spam = @spam_handler) && (spam.spammy_downvote?(user.id, @downvote_limit_interval))\n  return relay_to_one(message.message_id, user.id, @locale.replies.downvote_spam)\nend\nuser.set_active\n@database.modify_user(user)\nif (history_with_karma.get_sender_id(reply.message_id)) == user.id\n  return relay_to_one(message.message_id, user.id, @locale.replies.downvoted_own_message)\nend\nif !(history_with_karma.add_rating(reply.message_id, user.id))\n  return relay_to_one(message.message_id, user.id, @locale.replies.already_voted)\nend\nreply_user.decrement_karma\n@database.modify_user(reply_user)\nrelay_to_one(message.message_id, user.id, @locale.replies.gave_downvote)\nif !reply_user.hide_karma\n  relay_to_one(history_with_karma.get_msid(reply.message_id, reply_user.id), reply_user.id, @locale.replies.got_downvote)\nend\n"}},{"html_id":"downvote_limit_interval:Int32-instance-method","name":"downvote_limit_interval","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":39,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L39"},"def":{"name":"downvote_limit_interval","return_type":"Int32","visibility":"Public","body":"@downvote_limit_interval"}},{"html_id":"enable_karma_sign:Bool|Nil-instance-method","name":"enable_karma_sign","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":35,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L35"},"def":{"name":"enable_karma_sign","return_type":"Bool | ::Nil","visibility":"Public","body":"@enable_karma_sign"}},{"html_id":"enable_ranksay:Bool|Nil-instance-method","name":"enable_ranksay","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":36,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L36"},"def":{"name":"enable_ranksay","return_type":"Bool | ::Nil","visibility":"Public","body":"@enable_ranksay"}},{"html_id":"enable_sign:Bool|Nil-instance-method","name":"enable_sign","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":33,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L33"},"def":{"name":"enable_sign","return_type":"Bool | ::Nil","visibility":"Public","body":"@enable_sign"}},{"html_id":"enable_tripsign:Bool|Nil-instance-method","name":"enable_tripsign","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":34,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L34"},"def":{"name":"enable_tripsign","return_type":"Bool | ::Nil","visibility":"Public","body":"@enable_tripsign"}},{"html_id":"entity_types:Array(String)-instance-method","name":"entity_types","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":44,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L44"},"def":{"name":"entity_types","return_type":"Array(String)","visibility":"Public","body":"@entity_types"}},{"html_id":"force_leave(user_id:Int64):Nil-instance-method","name":"force_leave","doc":"Set blocked user to left in the database and delete all incoming messages from the queue.\n\nShould only be invoked in `send_messages`, as this does not check the `queue_mutex`","summary":"<p>Set blocked user to left in the database and delete all incoming messages from the queue.</p>","abstract":false,"args":[{"name":"user_id","external_name":"user_id","restriction":"Int64"}],"args_string":"(user_id : Int64) : Nil","args_html":"(user_id : Int64) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2548,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2548"},"def":{"name":"force_leave","args":[{"name":"user_id","external_name":"user_id","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"if user = database.get_user(user_id)\n  user.set_left\n  @database.modify_user(user)\n  log_output(@locale.logs.force_leave, {\"id\" => user_id.to_s})\nend\n@queue.reject_messsages do |msg|\n  msg.receiver == user_id\nend\n"}},{"html_id":"get_history_type(db:DB::Database,config:Config):History|DatabaseHistory-instance-method","name":"get_history_type","doc":"Determine appropriate `History` type based on given config variables","summary":"<p>Determine appropriate <code><a href=\"History.html\">History</a></code> type based on given config variables</p>","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(db : DB::Database, config : Config) : History | DatabaseHistory","args_html":"(db : DB::Database, config : <a href=\"Config.html\">Config</a>) : <a href=\"History.html\">History</a> | <a href=\"DatabaseHistory.html\">DatabaseHistory</a>","location":{"filename":"src/privateparlor/telegram.cr","line_number":115,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L115"},"def":{"name":"get_history_type","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"config","external_name":"config","restriction":"Config"}],"return_type":"History | DatabaseHistory","visibility":"Public","body":"if config.database_history\n  DatabaseHistory.new(db, config.lifetime.hours)\nelse\n  if (config.enable_downvote || config.enable_upvote) && config.enable_warn\n    HistoryFull.new(config.lifetime.hours)\n  else\n    if config.enable_downvote || config.enable_upvote\n      HistoryRatings.new(config.lifetime.hours)\n    else\n      if config.enable_warn\n        HistoryWarnings.new(config.lifetime.hours)\n      else\n        HistoryBase.new(config.lifetime.hours)\n      end\n    end\n  end\nend"}},{"html_id":"handle_animation(update:Tourmaline::Update):Nil-instance-method","name":"handle_animation","doc":"Prepares a \"animation\" message for relaying.","summary":"<p>Prepares a &quot;animation&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1746,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1746"},"def":{"name":"handle_animation","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :animation)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"animation\"})\nend\nif message.forward_date\n  return\nend\nif message.media_group_id\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_animation))\n  return\nend\nif media = message.animation\nelse\n  return\nend\ncaption = message.caption || \"\"\nif @r9k_text\nelse\n  if caption = check_text(caption, user, message.message_id, message.entities)\n  else\n    return\n  end\nend\nif @r9k_text && @r9k_media\n  caption, stripped_text = validate_r9k_text(caption, user, message)\n  if stripped_text\n  else\n    return\n  end\n  if file_id = Robot9000.get_media_file_id(message)\n    valid_file_id = validate_r9k_media(file_id, user, message)\n    if valid_file_id\n    else\n      return\n    end\n  end\nelse\n  if @r9k_text\n    caption, stripped_text = validate_r9k_text(caption, user, message)\n    if stripped_text\n    else\n      return\n    end\n  else\n    if @r9k_media\n      if file_id = Robot9000.get_media_file_id(message)\n        valid_file_id = validate_r9k_media(file_id, user, message)\n        if valid_file_id\n        else\n          return\n        end\n      end\n    end\n  end\nend\nif @pseudonymous\n  if tripkey = user.tripcode\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.no_tripcode_set)\n  end\n  caption = Format.format_pseudonymous_message(caption, tripkey, @tripcode_salt)\nend\nif @r9k_text && @r9k_media\n  if stripped_text\n  else\n    return\n  end\n  if file_id\n    if valid_file_id\n    else\n      return\n    end\n    Robot9000.add_file_id(@database.db, valid_file_id)\n  end\n  Robot9000.add_line(@database.db, stripped_text)\nelse\n  if @r9k_text\n    if stripped_text\n    else\n      return\n    end\n    Robot9000.add_line(@database.db, stripped_text)\n  else\n    if @r9k_media\n      if file_id\n        if valid_file_id\n        else\n          return\n        end\n        Robot9000.add_file_id(@database.db, valid_file_id)\n      end\n    end\n  end\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_animation(receiver, media.file_id, caption: caption, reply_to_message: reply, has_spoiler: message.has_media_spoiler? && @allow_media_spoilers)\nend)\n"}},{"html_id":"handle_audio(update:Tourmaline::Update):Nil-instance-method","name":"handle_audio","doc":"Prepares a \"audio\" message for relaying.","summary":"<p>Prepares a &quot;audio&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1746,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1746"},"def":{"name":"handle_audio","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :audio)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"audio\"})\nend\nif message.forward_date\n  return\nend\nif message.media_group_id\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_audio))\n  return\nend\nif media = message.audio\nelse\n  return\nend\ncaption = message.caption || \"\"\nif @r9k_text\nelse\n  if caption = check_text(caption, user, message.message_id, message.entities)\n  else\n    return\n  end\nend\nif @r9k_text && @r9k_media\n  caption, stripped_text = validate_r9k_text(caption, user, message)\n  if stripped_text\n  else\n    return\n  end\n  if file_id = Robot9000.get_media_file_id(message)\n    valid_file_id = validate_r9k_media(file_id, user, message)\n    if valid_file_id\n    else\n      return\n    end\n  end\nelse\n  if @r9k_text\n    caption, stripped_text = validate_r9k_text(caption, user, message)\n    if stripped_text\n    else\n      return\n    end\n  else\n    if @r9k_media\n      if file_id = Robot9000.get_media_file_id(message)\n        valid_file_id = validate_r9k_media(file_id, user, message)\n        if valid_file_id\n        else\n          return\n        end\n      end\n    end\n  end\nend\nif @pseudonymous\n  if tripkey = user.tripcode\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.no_tripcode_set)\n  end\n  caption = Format.format_pseudonymous_message(caption, tripkey, @tripcode_salt)\nend\nif @r9k_text && @r9k_media\n  if stripped_text\n  else\n    return\n  end\n  if file_id\n    if valid_file_id\n    else\n      return\n    end\n    Robot9000.add_file_id(@database.db, valid_file_id)\n  end\n  Robot9000.add_line(@database.db, stripped_text)\nelse\n  if @r9k_text\n    if stripped_text\n    else\n      return\n    end\n    Robot9000.add_line(@database.db, stripped_text)\n  else\n    if @r9k_media\n      if file_id\n        if valid_file_id\n        else\n          return\n        end\n        Robot9000.add_file_id(@database.db, valid_file_id)\n      end\n    end\n  end\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_audio(receiver, media.file_id, caption: caption, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_basketball(update:Tourmaline::Update):Nil-instance-method","name":"handle_basketball","doc":"Prepares a \"basketball\" message for relaying.","summary":"<p>Prepares a &quot;basketball&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2237,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2237"},"def":{"name":"handle_basketball","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :basketball)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"basketball\"})\nend\nif message.forward_date\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_basketball))\n  return\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_basketball(receiver, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_bowling(update:Tourmaline::Update):Nil-instance-method","name":"handle_bowling","doc":"Prepares a \"bowling\" message for relaying.","summary":"<p>Prepares a &quot;bowling&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2237,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2237"},"def":{"name":"handle_bowling","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :bowling)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"bowling\"})\nend\nif message.forward_date\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_bowling))\n  return\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_bowling(receiver, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_contact(update:Tourmaline::Update):Nil-instance-method","name":"handle_contact","doc":"Prepares a contact message for relaying.","summary":"<p>Prepares a contact message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2330,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2330"},"def":{"name":"handle_contact","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :contact)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"contact\"})\nend\nif message.forward_date\n  return\nend\nif contact = message.contact\nelse\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_contact))\n  return\nend\nuser.set_active\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_contact(receiver, contact.phone_number, contact.first_name, last_name: contact.last_name)\nend)\n"}},{"html_id":"handle_dart(update:Tourmaline::Update):Nil-instance-method","name":"handle_dart","doc":"Prepares a \"dart\" message for relaying.","summary":"<p>Prepares a &quot;dart&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2237,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2237"},"def":{"name":"handle_dart","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :dart)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"dart\"})\nend\nif message.forward_date\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_dart))\n  return\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_dart(receiver, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_dice(update:Tourmaline::Update):Nil-instance-method","name":"handle_dice","doc":"Prepares a \"dice\" message for relaying.","summary":"<p>Prepares a &quot;dice&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2237,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2237"},"def":{"name":"handle_dice","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :dice)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"dice\"})\nend\nif message.forward_date\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_dice))\n  return\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_dice(receiver, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_document(update:Tourmaline::Update):Nil-instance-method","name":"handle_document","doc":"Prepares a \"document\" message for relaying.","summary":"<p>Prepares a &quot;document&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1746,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1746"},"def":{"name":"handle_document","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :document)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"document\"})\nend\nif message.forward_date\n  return\nend\nif message.media_group_id\n  return\nend\nif message.animation\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_document))\n  return\nend\nif media = message.document\nelse\n  return\nend\ncaption = message.caption || \"\"\nif @r9k_text\nelse\n  if caption = check_text(caption, user, message.message_id, message.entities)\n  else\n    return\n  end\nend\nif @r9k_text && @r9k_media\n  caption, stripped_text = validate_r9k_text(caption, user, message)\n  if stripped_text\n  else\n    return\n  end\n  if file_id = Robot9000.get_media_file_id(message)\n    valid_file_id = validate_r9k_media(file_id, user, message)\n    if valid_file_id\n    else\n      return\n    end\n  end\nelse\n  if @r9k_text\n    caption, stripped_text = validate_r9k_text(caption, user, message)\n    if stripped_text\n    else\n      return\n    end\n  else\n    if @r9k_media\n      if file_id = Robot9000.get_media_file_id(message)\n        valid_file_id = validate_r9k_media(file_id, user, message)\n        if valid_file_id\n        else\n          return\n        end\n      end\n    end\n  end\nend\nif @pseudonymous\n  if tripkey = user.tripcode\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.no_tripcode_set)\n  end\n  caption = Format.format_pseudonymous_message(caption, tripkey, @tripcode_salt)\nend\nif @r9k_text && @r9k_media\n  if stripped_text\n  else\n    return\n  end\n  if file_id\n    if valid_file_id\n    else\n      return\n    end\n    Robot9000.add_file_id(@database.db, valid_file_id)\n  end\n  Robot9000.add_line(@database.db, stripped_text)\nelse\n  if @r9k_text\n    if stripped_text\n    else\n      return\n    end\n    Robot9000.add_line(@database.db, stripped_text)\n  else\n    if @r9k_media\n      if file_id\n        if valid_file_id\n        else\n          return\n        end\n        Robot9000.add_file_id(@database.db, valid_file_id)\n      end\n    end\n  end\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_document(receiver, media.file_id, caption: caption, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_embedded_command(text:String,user:Database::User,msid:Int64):String|Nil-instance-method","name":"handle_embedded_command","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(text : String, user : Database::User, msid : Int64) : String | Nil","args_html":"(text : String, user : <a href=\"Database/User.html\">Database::User</a>, msid : Int64) : String | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1513,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1513"},"def":{"name":"handle_embedded_command","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"String | ::Nil","visibility":"Public","body":"case\nwhen text.starts_with?(\"/s \"), text.starts_with?(\"/sign \")\n  handle_sign(text, user, msid)\nwhen text.starts_with?(\"/t \"), text.starts_with?(\"/tsign \")\n  handle_tripcode(text, user, msid)\nwhen text.starts_with?(\"/ks \"), text.starts_with?(\"/ksign \")\n  handle_karma_sign(text, user, msid)\nwhen match = ((/^\\/(\\w*)say\\s/).match(text)).try(&.[](1))\n  handle_ranksay(match, text, user, msid)\nend"}},{"html_id":"handle_forwarded_message(update:Tourmaline::Update):Nil-instance-method","name":"handle_forwarded_message","doc":"Prepares a forwarded message for relaying.","summary":"<p>Prepares a forwarded message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2004,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2004"},"def":{"name":"handle_forwarded_message","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :forward)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"forwarded_message\"})\nend\nif (poll = message.poll) && (!poll.anonymous?)\n  return relay_to_one(message.message_id, user.id, @locale.replies.deanon_poll)\nend\nif @regular_forwards\n  return handle_regular_forward(message, user)\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_forwarded_message))\n  return\nend\nif @r9k_forwards\n  if @r9k_text && @r9k_media\n    text = (message.text || message.caption) || \"\"\n    _, stripped_text = validate_r9k_text(text, user, message)\n    if stripped_text\n    else\n      return\n    end\n    if file_id = Robot9000.get_media_file_id(message)\n      valid_file_id = validate_r9k_media(file_id, user, message)\n      if valid_file_id\n      else\n        return\n      end\n      Robot9000.add_file_id(@database.db, valid_file_id)\n    end\n    Robot9000.add_line(@database.db, stripped_text)\n  else\n    if @r9k_text\n      text = (message.text || message.caption) || \"\"\n      _, stripped_text = validate_r9k_text(text, user, message)\n      if stripped_text\n      else\n        return\n      end\n      Robot9000.add_line(@database.db, stripped_text)\n    else\n      if @r9k_media\n        if file_id = Robot9000.get_media_file_id(message)\n          valid_file_id = validate_r9k_media(file_id, user, message)\n          if valid_file_id\n          else\n            return\n          end\n          Robot9000.add_file_id(@database.db, valid_file_id)\n        end\n      end\n    end\n  end\nend\nuser.set_active\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  forward_message(receiver, message.chat.id, message.message_id)\nend)\n"}},{"html_id":"handle_karma_sign(text:String,user:Database::User,msid:Int64):String|Nil-instance-method","name":"handle_karma_sign","doc":"Given a command text, checks if karma signs are enabled and if the karma sign\nwould be spammy, then returns the argument with a karma level signature","summary":"<p>Given a command text, checks if karma signs are enabled and if the karma sign would be spammy, then returns the argument with a karma level signature</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(text : String, user : Database::User, msid : Int64) : String | Nil","args_html":"(text : String, user : <a href=\"Database/User.html\">Database::User</a>, msid : Int64) : String | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1586,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1586"},"def":{"name":"handle_karma_sign","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"String | ::Nil","visibility":"Public","body":"if @enable_karma_sign\nelse\n  return relay_to_one(msid, user.id, @locale.replies.command_disabled)\nend\nif (args = Format.get_arg(text)) && args.size > 0\nelse\n  return relay_to_one(msid, user.id, @locale.replies.missing_args)\nend\nif @karma_levels.empty?\n  return\nend\nif user.karma < @karma_levels.first_key\n  return relay_to_one(msid, user.id, @locale.replies.fail)\nend\nif (spam = @spam_handler) && (spam.spammy_sign?(user.id, @sign_limit_interval))\n  return relay_to_one(msid, user.id, @locale.replies.sign_spam)\nend\ncurrent_level = \"\"\n@karma_levels.each_cons_pair do |lower, higher|\n  if lower[0] <= user.karma && user.karma < higher[0]\n    current_level = lower[1]\n    break\n  end\nend\nif (current_level == \"\") && user.karma >= @karma_levels.last_key\n  current_level = @karma_levels[@karma_levels.last_key]\nend\nString.build do |str|\n  str << args\n  str << (Format.format_karma_say(current_level))\nend\n"}},{"html_id":"handle_location(update:Tourmaline::Update):Nil-instance-method","name":"handle_location","doc":"Prepares a location message for relaying.","summary":"<p>Prepares a location message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2300,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2300"},"def":{"name":"handle_location","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :location)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"location\"})\nend\nif message.forward_date\n  return\nend\nif location = message.location\nelse\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_location))\n  return\nend\nuser.set_active\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_location(receiver, location.latitude, location.longitude, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_media_group(update:Tourmaline::Update):Nil-instance-method","name":"handle_media_group","doc":"Prepares an album message for relaying.","summary":"<p>Prepares an album message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1844,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1844"},"def":{"name":"handle_media_group","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :media_group)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"media_group\"})\nend\nif message.forward_date\n  return\nend\nif album = message.media_group_id\nelse\n  return\nend\ncaption = message.caption || \"\"\nif @r9k_text\nelse\n  if caption = check_text(caption, user, message.message_id, message.entities)\n  else\n    return\n  end\nend\nif @r9k_text && @r9k_media\n  caption, stripped_text = validate_r9k_text(caption, user, message)\n  if caption && stripped_text\n  else\n    return\n  end\n  if file_id = Robot9000.get_album_file_id(message)\n    valid_file_id = validate_r9k_media(file_id, user, message)\n    if valid_file_id\n    else\n      return\n    end\n  end\nelse\n  if @r9k_text\n    caption, stripped_text = validate_r9k_text(caption, user, message)\n    if caption && stripped_text\n    else\n      return\n    end\n  else\n    if @r9k_media\n      if file_id = Robot9000.get_album_file_id(message)\n        valid_file_id = validate_r9k_media(file_id, user, message)\n        if valid_file_id\n        else\n          return\n        end\n      end\n    end\n  end\nend\nif @pseudonymous && (@albums[album]? == nil)\n  if tripkey = user.tripcode\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.no_tripcode_set)\n  end\n  caption = Format.format_pseudonymous_message(caption, tripkey, @tripcode_salt)\nend\nif (spam = @spam_handler) && (@albums[album]? == nil)\n  if spamming?(user.id, message.message_id, spam.score_media_group)\n    return\n  end\nend\nif @r9k_text && @r9k_media\n  if stripped_text\n  else\n    return\n  end\n  if file_id\n    if valid_file_id\n    else\n      return\n    end\n    Robot9000.add_file_id(@database.db, valid_file_id)\n  end\n  Robot9000.add_line(@database.db, stripped_text)\nelse\n  if @r9k_text\n    if stripped_text\n    else\n      return\n    end\n    Robot9000.add_line(@database.db, stripped_text)\n  else\n    if @r9k_media\n      if file_id\n        if valid_file_id\n        else\n          return\n        end\n        Robot9000.add_file_id(@database.db, valid_file_id)\n      end\n    end\n  end\nend\nuser.set_active\n@database.modify_user(user)\nrelay_album(message, album, user, caption)\n"}},{"html_id":"handle_photo(update:Tourmaline::Update):Nil-instance-method","name":"handle_photo","doc":"Prepares a \"photo\" message for relaying.","summary":"<p>Prepares a &quot;photo&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1746,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1746"},"def":{"name":"handle_photo","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :photo)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"photo\"})\nend\nif message.forward_date\n  return\nend\nif message.media_group_id\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_photo))\n  return\nend\nmedia = (message.photo.last)\ncaption = message.caption || \"\"\nif @r9k_text\nelse\n  if caption = check_text(caption, user, message.message_id, message.entities)\n  else\n    return\n  end\nend\nif @r9k_text && @r9k_media\n  caption, stripped_text = validate_r9k_text(caption, user, message)\n  if stripped_text\n  else\n    return\n  end\n  if file_id = Robot9000.get_media_file_id(message)\n    valid_file_id = validate_r9k_media(file_id, user, message)\n    if valid_file_id\n    else\n      return\n    end\n  end\nelse\n  if @r9k_text\n    caption, stripped_text = validate_r9k_text(caption, user, message)\n    if stripped_text\n    else\n      return\n    end\n  else\n    if @r9k_media\n      if file_id = Robot9000.get_media_file_id(message)\n        valid_file_id = validate_r9k_media(file_id, user, message)\n        if valid_file_id\n        else\n          return\n        end\n      end\n    end\n  end\nend\nif @pseudonymous\n  if tripkey = user.tripcode\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.no_tripcode_set)\n  end\n  caption = Format.format_pseudonymous_message(caption, tripkey, @tripcode_salt)\nend\nif @r9k_text && @r9k_media\n  if stripped_text\n  else\n    return\n  end\n  if file_id\n    if valid_file_id\n    else\n      return\n    end\n    Robot9000.add_file_id(@database.db, valid_file_id)\n  end\n  Robot9000.add_line(@database.db, stripped_text)\nelse\n  if @r9k_text\n    if stripped_text\n    else\n      return\n    end\n    Robot9000.add_line(@database.db, stripped_text)\n  else\n    if @r9k_media\n      if file_id\n        if valid_file_id\n        else\n          return\n        end\n        Robot9000.add_file_id(@database.db, valid_file_id)\n      end\n    end\n  end\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_photo(receiver, media.file_id, caption: caption, reply_to_message: reply, has_spoiler: message.has_media_spoiler? && @allow_media_spoilers)\nend)\n"}},{"html_id":"handle_poll(update:Tourmaline::Update):Nil-instance-method","name":"handle_poll","doc":"Prepares a poll for relaying.","summary":"<p>Prepares a poll for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1961,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1961"},"def":{"name":"handle_poll","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :poll)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"poll\"})\nend\nif message.forward_date\n  return\nend\nif poll = message.poll\nelse\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_poll))\n  return\nend\nuser.set_active\n@database.modify_user(user)\ncached_msid = @history.new_message(user.id, message.message_id)\npoll_msg = send_poll(user.id, question: poll.question, options: poll.options.map(&.text), anonymous: true, type: poll.type, allows_multiple_answers: poll.allows_multiple_answers, correct_option_id: poll.correct_option_id, reply_to_message: message.message_id)\n@history.add_to_cache(cached_msid, poll_msg.message_id, user.id)\nif user.debug_enabled\n  user.toggle_debug\nend\nrelay(message.reply_message, user, cached_msid, ->(receiver : Int64, reply : Int64 | Nil) do\n  forward_message(receiver, message.chat.id, poll_msg.message_id)\nend)\n"}},{"html_id":"handle_ranksay(rank:String,text:String,user:Database::User,msid:Int64):String|Nil-instance-method","name":"handle_ranksay","doc":"Given a ranked say command, checks if ranked says are enabled and determines the rank\n(either given or the user's current rank), then returns the argument with a ranked signature\n\nChecks for the following permissions: `ranksay`, `ranksay_lower`\n\nIf `ranksay`, allows the user to sign a message with the user's rank name.\n\nIf `ranksay_lower`, allows the user to sign a message with the user's rank name and any subordinate rank.","summary":"<p>Given a ranked say command, checks if ranked says are enabled and determines the rank (either given or the user's current rank), then returns the argument with a ranked signature</p>","abstract":false,"args":[{"name":"rank","external_name":"rank","restriction":"String"},{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(rank : String, text : String, user : Database::User, msid : Int64) : String | Nil","args_html":"(rank : String, text : String, user : <a href=\"Database/User.html\">Database::User</a>, msid : Int64) : String | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1631,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1631"},"def":{"name":"handle_ranksay","args":[{"name":"rank","external_name":"rank","restriction":"String"},{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"String | ::Nil","visibility":"Public","body":"if @enable_ranksay\nelse\n  return relay_to_one(msid, user.id, @locale.replies.command_disabled)\nend\nif authority = @access.authorized?(user.rank, :ranksay, :ranksay_lower)\nelse\n  return relay_to_one(msid, user.id, @locale.replies.fail)\nend\nif (args = Format.get_arg(text)) && args.size > 0\nelse\n  return relay_to_one(msid, user.id, @locale.replies.missing_args)\nend\nif rank == \"rank\"\n  parsed_rank = @access.find_rank(rank, user.rank)\nelse\n  parsed_rank = @access.find_rank(rank)\nend\nif parsed_rank\nelse\n  return relay_to_one(msid, user.id, @locale.replies.no_rank_found, {\"ranks\" => @access.rank_names(limit: user.rank).to_s})\nend\nparsed_rank_authority = @access.authorized?(parsed_rank[0], :ranksay, :ranksay_lower)\nif @access.can_ranksay?(parsed_rank[0], user.rank, authority, parsed_rank_authority)\nelse\n  return relay_to_one(msid, user.id, @locale.replies.fail)\nend\nlog_output(@locale.logs.ranked_message, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name, \"rank\" => parsed_rank[1].name, \"text\" => args})\nString.build do |str|\n  str << args\n  str << (Format.format_user_say(parsed_rank[1].name))\nend\n"}},{"html_id":"handle_regular_forward(message:Tourmaline::Message,user:Database::User):Nil-instance-method","name":"handle_regular_forward","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"user","external_name":"user","restriction":"Database::User"}],"args_string":"(message : Tourmaline::Message, user : Database::User) : Nil","args_html":"(message : Tourmaline::Message, user : <a href=\"Database/User.html\">Database::User</a>) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2061,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2061"},"def":{"name":"handle_regular_forward","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"user","external_name":"user","restriction":"Database::User"}],"return_type":"Nil","visibility":"Public","body":"text = (message.text || message.caption) || \"\"\nif @r9k_forwards\n  if @r9k_text && @r9k_media\n    content = Format.strip_forward_header(text, message.text_entities.keys)\n    _, stripped_text = validate_r9k_text(content, user, message)\n    if stripped_text\n    else\n      return\n    end\n    if file_id = Robot9000.get_media_file_id(message)\n      valid_file_id = validate_r9k_media(file_id, user, message)\n      if valid_file_id\n      else\n        return\n      end\n    end\n  else\n    if @r9k_text\n      content = Format.strip_forward_header(text, message.text_entities.keys)\n      _, stripped_text = validate_r9k_text(content, user, message)\n      if stripped_text\n      else\n        return\n      end\n    else\n      if @r9k_media\n        if file_id = Robot9000.get_media_file_id(message)\n          valid_file_id = validate_r9k_media(file_id, user, message)\n          if valid_file_id\n          else\n            return\n          end\n        end\n      end\n    end\n  end\nend\nif spam = @spam_handler\n  if (album = message.media_group_id) && @albums[album]?\n  else\n    if spamming?(user.id, message.message_id, spam.score_forwarded_message)\n      return\n    end\n  end\nend\nif @r9k_forwards\n  if @r9k_text && @r9k_media\n    if stripped_text\n    else\n      return\n    end\n    if file_id\n      if valid_file_id\n      else\n        return\n      end\n      Robot9000.add_file_id(@database.db, valid_file_id)\n    end\n    Robot9000.add_line(@database.db, stripped_text)\n  else\n    if @r9k_text\n      if stripped_text\n      else\n        return\n      end\n      Robot9000.add_line(@database.db, stripped_text)\n    else\n      if @r9k_media\n        if file_id\n          if valid_file_id\n          else\n            return\n          end\n          Robot9000.add_file_id(@database.db, valid_file_id)\n        end\n      end\n    end\n  end\nend\nif Format.regular_forward?(text, message.text_entities.keys)\n  return relay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n    forward_message(receiver, message.chat.id, message.message_id)\n  end)\nend\nif header = Format.get_forward_header(message)\nelse\n  return relay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n    forward_message(receiver, message.chat.id, message.message_id)\n  end)\nend\ntext = Format.unparse_text(text, message.text_entities.keys, Client.default_parse_mode, escape: true)\ntext = String.build do |str|\n  str << header\n  str << \"\\n\\n\"\n  str << text\nend\nrelay_regular_forward(user, message, text)\n"}},{"html_id":"handle_sign(text:String,user:Database::User,msid:Int64):String|Nil-instance-method","name":"handle_sign","doc":"Given a command text, checks if signs are enabled, user has private forwards,\nor sign would be spammy, then returns the argument with a username signature\n\nChecks for the following permissions: `sign`\n\nIf `sign`, allows the user to sign a message","summary":"<p>Given a command text, checks if signs are enabled, user has private forwards, or sign would be spammy, then returns the argument with a username signature</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(text : String, user : Database::User, msid : Int64) : String | Nil","args_html":"(text : String, user : <a href=\"Database/User.html\">Database::User</a>, msid : Int64) : String | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1532,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1532"},"def":{"name":"handle_sign","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"String | ::Nil","visibility":"Public","body":"if @enable_sign\nelse\n  return relay_to_one(msid, user.id, @locale.replies.command_disabled)\nend\nif @access.authorized?(user.rank, :sign)\nelse\n  return relay_to_one(msid, user.id, @locale.replies.fail)\nend\nif (chat = get_chat(user.id)) && chat.has_private_forwards\n  return relay_to_one(msid, user.id, @locale.replies.private_sign)\nend\nif (spam = @spam_handler) && (spam.spammy_sign?(user.id, @sign_limit_interval))\n  return relay_to_one(msid, user.id, @locale.replies.sign_spam)\nend\nif (args = Format.get_arg(text)) && args.size > 0\n  String.build do |str|\n    str << args\n    str << (Format.format_user_sign(user.id, user.get_formatted_name))\n  end\nend\n"}},{"html_id":"handle_slot_machine(update:Tourmaline::Update):Nil-instance-method","name":"handle_slot_machine","doc":"Prepares a \"slot_machine\" message for relaying.","summary":"<p>Prepares a &quot;slot_machine&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2237,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2237"},"def":{"name":"handle_slot_machine","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :slot_machine)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"slot_machine\"})\nend\nif message.forward_date\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_slot_machine))\n  return\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_slot_machine(receiver, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_soccerball(update:Tourmaline::Update):Nil-instance-method","name":"handle_soccerball","doc":"Prepares a \"soccerball\" message for relaying.","summary":"<p>Prepares a &quot;soccerball&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2237,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2237"},"def":{"name":"handle_soccerball","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :soccerball)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"soccerball\"})\nend\nif message.forward_date\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_soccerball))\n  return\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_soccerball(receiver, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_sticker(update:Tourmaline::Update):Nil-instance-method","name":"handle_sticker","doc":"Prepares a sticker message for relaying.","summary":"<p>Prepares a sticker message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2208,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2208"},"def":{"name":"handle_sticker","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :sticker)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"sticker\"})\nend\nif message.forward_date\n  return\nend\nif sticker = message.sticker\nelse\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_sticker))\n  return\nend\nif @r9k_media\n  if validate_r9k_media(sticker.file_unique_id, user, message)\n  else\n    return\n  end\n  Robot9000.add_file_id(@database.db, sticker.file_unique_id)\nend\nuser.set_active\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_sticker(receiver, sticker.file_id, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_text(update:Tourmaline::Update)-instance-method","name":"handle_text","doc":"Prepares a text message for relaying.","summary":"<p>Prepares a text message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update)","args_html":"(update : Tourmaline::Update)","location":{"filename":"src/privateparlor/telegram.cr","line_number":1690,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1690"},"def":{"name":"handle_text","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :text)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"text\"})\nend\nif message.forward_date\n  return\nend\nif text = message.text\nelse\n  return\nend\nif @spam_handler && (spamming_text?(user.id, message.message_id, text))\n  return\nend\nif @r9k_text\n  text, stripped_text = validate_r9k_text(text, user, message)\n  if stripped_text\n  else\n    return\n  end\nelse\n  if text = check_text(text, user, message.message_id, message.entities)\n  else\n    return\n  end\nend\nif @pseudonymous\n  if tripkey = user.tripcode\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.no_tripcode_set)\n  end\n  text = Format.format_pseudonymous_message(text, tripkey, @tripcode_salt)\nend\nif @r9k_text\n  if stripped_text\n  else\n    return\n  end\n  Robot9000.add_line(@database.db, stripped_text)\nend\nuser.set_active\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_message(receiver, text, link_preview: true, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_tripcode(text:String,user:Database::User,msid:Int64):String|Nil-instance-method","name":"handle_tripcode","doc":"Given a command text, checks if tripcodes are enabled, if tripcode would be spammy,\nor if user does not have a tripcode set, then returns the argument with a tripcode header\n\nChecks for the following permissions: `tsign`\n\nIf `tsign`, allows the user to sign a message with a tripcode.","summary":"<p>Given a command text, checks if tripcodes are enabled, if tripcode would be spammy, or if user does not have a tripcode set, then returns the argument with a tripcode header</p>","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(text : String, user : Database::User, msid : Int64) : String | Nil","args_html":"(text : String, user : <a href=\"Database/User.html\">Database::User</a>, msid : Int64) : String | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1560,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1560"},"def":{"name":"handle_tripcode","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"String | ::Nil","visibility":"Public","body":"if @pseudonymous || (!@enable_tripsign)\n  return relay_to_one(msid, user.id, @locale.replies.command_disabled)\nend\nif @access.authorized?(user.rank, :TSign)\nelse\n  return relay_to_one(msid, user.id, @locale.replies.fail)\nend\nif tripkey = user.tripcode\nelse\n  return relay_to_one(msid, user.id, @locale.replies.no_tripcode_set)\nend\nif (spam = @spam_handler) && (spam.spammy_sign?(user.id, @sign_limit_interval))\n  return relay_to_one(msid, user.id, @locale.replies.sign_spam)\nend\nif (args = Format.get_arg(text)) && args.size > 0\n  name, tripcode = Format.generate_tripcode(tripkey, @tripcode_salt)\n  String.build do |str|\n    (str << (Format.format_tripcode_sign(name, tripcode))) << \":\"\n    str << \"\\n\"\n    str << args\n  end\nend\n"}},{"html_id":"handle_venue(update:Tourmaline::Update):Nil-instance-method","name":"handle_venue","doc":"Prepares a venue message for relaying.","summary":"<p>Prepares a venue message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2264,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2264"},"def":{"name":"handle_venue","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :venue)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"venue\"})\nend\nif message.forward_date\n  return\nend\nif venue = message.venue\nelse\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_venue))\n  return\nend\nuser.set_active\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_venue(receiver, venue.location.latitude, venue.location.longitude, venue.title, venue.address, venue.foursquare_id, venue.foursquare_type, venue.google_place_id, venue.google_place_type, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_video(update:Tourmaline::Update):Nil-instance-method","name":"handle_video","doc":"Prepares a \"video\" message for relaying.","summary":"<p>Prepares a &quot;video&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1746,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1746"},"def":{"name":"handle_video","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :video)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"video\"})\nend\nif message.forward_date\n  return\nend\nif message.media_group_id\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_video))\n  return\nend\nif media = message.video\nelse\n  return\nend\ncaption = message.caption || \"\"\nif @r9k_text\nelse\n  if caption = check_text(caption, user, message.message_id, message.entities)\n  else\n    return\n  end\nend\nif @r9k_text && @r9k_media\n  caption, stripped_text = validate_r9k_text(caption, user, message)\n  if stripped_text\n  else\n    return\n  end\n  if file_id = Robot9000.get_media_file_id(message)\n    valid_file_id = validate_r9k_media(file_id, user, message)\n    if valid_file_id\n    else\n      return\n    end\n  end\nelse\n  if @r9k_text\n    caption, stripped_text = validate_r9k_text(caption, user, message)\n    if stripped_text\n    else\n      return\n    end\n  else\n    if @r9k_media\n      if file_id = Robot9000.get_media_file_id(message)\n        valid_file_id = validate_r9k_media(file_id, user, message)\n        if valid_file_id\n        else\n          return\n        end\n      end\n    end\n  end\nend\nif @pseudonymous\n  if tripkey = user.tripcode\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.no_tripcode_set)\n  end\n  caption = Format.format_pseudonymous_message(caption, tripkey, @tripcode_salt)\nend\nif @r9k_text && @r9k_media\n  if stripped_text\n  else\n    return\n  end\n  if file_id\n    if valid_file_id\n    else\n      return\n    end\n    Robot9000.add_file_id(@database.db, valid_file_id)\n  end\n  Robot9000.add_line(@database.db, stripped_text)\nelse\n  if @r9k_text\n    if stripped_text\n    else\n      return\n    end\n    Robot9000.add_line(@database.db, stripped_text)\n  else\n    if @r9k_media\n      if file_id\n        if valid_file_id\n        else\n          return\n        end\n        Robot9000.add_file_id(@database.db, valid_file_id)\n      end\n    end\n  end\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_video(receiver, media.file_id, caption: caption, reply_to_message: reply, has_spoiler: message.has_media_spoiler? && @allow_media_spoilers)\nend)\n"}},{"html_id":"handle_video_note(update:Tourmaline::Update):Nil-instance-method","name":"handle_video_note","doc":"Prepares a \"video_note\" message for relaying.","summary":"<p>Prepares a &quot;video_note&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1746,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1746"},"def":{"name":"handle_video_note","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :video_note)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"video_note\"})\nend\nif message.forward_date\n  return\nend\nif message.media_group_id\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_video_note))\n  return\nend\nif media = message.video_note\nelse\n  return\nend\ncaption = message.caption || \"\"\nif @r9k_text\nelse\n  if caption = check_text(caption, user, message.message_id, message.entities)\n  else\n    return\n  end\nend\nif @r9k_text && @r9k_media\n  caption, stripped_text = validate_r9k_text(caption, user, message)\n  if stripped_text\n  else\n    return\n  end\n  if file_id = Robot9000.get_media_file_id(message)\n    valid_file_id = validate_r9k_media(file_id, user, message)\n    if valid_file_id\n    else\n      return\n    end\n  end\nelse\n  if @r9k_text\n    caption, stripped_text = validate_r9k_text(caption, user, message)\n    if stripped_text\n    else\n      return\n    end\n  else\n    if @r9k_media\n      if file_id = Robot9000.get_media_file_id(message)\n        valid_file_id = validate_r9k_media(file_id, user, message)\n        if valid_file_id\n        else\n          return\n        end\n      end\n    end\n  end\nend\nif @pseudonymous\n  if tripkey = user.tripcode\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.no_tripcode_set)\n  end\n  caption = Format.format_pseudonymous_message(caption, tripkey, @tripcode_salt)\nend\nif @r9k_text && @r9k_media\n  if stripped_text\n  else\n    return\n  end\n  if file_id\n    if valid_file_id\n    else\n      return\n    end\n    Robot9000.add_file_id(@database.db, valid_file_id)\n  end\n  Robot9000.add_line(@database.db, stripped_text)\nelse\n  if @r9k_text\n    if stripped_text\n    else\n      return\n    end\n    Robot9000.add_line(@database.db, stripped_text)\n  else\n    if @r9k_media\n      if file_id\n        if valid_file_id\n        else\n          return\n        end\n        Robot9000.add_file_id(@database.db, valid_file_id)\n      end\n    end\n  end\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_video_note(receiver, media.file_id, caption: caption, reply_to_message: reply)\nend)\n"}},{"html_id":"handle_voice(update:Tourmaline::Update):Nil-instance-method","name":"handle_voice","doc":"Prepares a \"voice\" message for relaying.","summary":"<p>Prepares a &quot;voice&quot; message for relaying.</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Nil","args_html":"(update : Tourmaline::Update) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1746,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1746"},"def":{"name":"handle_voice","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :voice)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => \"voice\"})\nend\nif message.forward_date\n  return\nend\nif message.media_group_id\n  return\nend\nif (spam = @spam_handler) && (spamming?(user.id, message.message_id, spam.score_voice))\n  return\nend\nif media = message.voice\nelse\n  return\nend\ncaption = message.caption || \"\"\nif @r9k_text\nelse\n  if caption = check_text(caption, user, message.message_id, message.entities)\n  else\n    return\n  end\nend\nif @r9k_text && @r9k_media\n  caption, stripped_text = validate_r9k_text(caption, user, message)\n  if stripped_text\n  else\n    return\n  end\n  if file_id = Robot9000.get_media_file_id(message)\n    valid_file_id = validate_r9k_media(file_id, user, message)\n    if valid_file_id\n    else\n      return\n    end\n  end\nelse\n  if @r9k_text\n    caption, stripped_text = validate_r9k_text(caption, user, message)\n    if stripped_text\n    else\n      return\n    end\n  else\n    if @r9k_media\n      if file_id = Robot9000.get_media_file_id(message)\n        valid_file_id = validate_r9k_media(file_id, user, message)\n        if valid_file_id\n        else\n          return\n        end\n      end\n    end\n  end\nend\nif @pseudonymous\n  if tripkey = user.tripcode\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.no_tripcode_set)\n  end\n  caption = Format.format_pseudonymous_message(caption, tripkey, @tripcode_salt)\nend\nif @r9k_text && @r9k_media\n  if stripped_text\n  else\n    return\n  end\n  if file_id\n    if valid_file_id\n    else\n      return\n    end\n    Robot9000.add_file_id(@database.db, valid_file_id)\n  end\n  Robot9000.add_line(@database.db, stripped_text)\nelse\n  if @r9k_text\n    if stripped_text\n    else\n      return\n    end\n    Robot9000.add_line(@database.db, stripped_text)\n  else\n    if @r9k_media\n      if file_id\n        if valid_file_id\n        else\n          return\n        end\n        Robot9000.add_file_id(@database.db, valid_file_id)\n      end\n    end\n  end\nend\nuser.set_active()\n@database.modify_user(user)\nrelay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n  send_voice(receiver, media.file_id, caption: caption, reply_to_message: reply)\nend)\n"}},{"html_id":"help_command(ctx:CommandHandler::Context):Nil-instance-method","name":"help_command","doc":"Returns a message containing all the commands that a user can use, according to the user's rank.","summary":"<p>Returns a message containing all the commands that a user can use, according to the user's rank.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1375,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1375"},"def":{"name":"help_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nuser.set_active\n@database.modify_user(user)\nrelay_to_one(message.message_id, user.id, Format.format_help(user, @access.ranks, @locale))\n"}},{"html_id":"history:History|DatabaseHistory-instance-method","name":"history","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":11,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L11"},"def":{"name":"history","return_type":"History | DatabaseHistory","visibility":"Public","body":"@history"}},{"html_id":"inactivity_limit:Int32-instance-method","name":"inactivity_limit","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":29,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L29"},"def":{"name":"inactivity_limit","return_type":"Int32","visibility":"Public","body":"@inactivity_limit"}},{"html_id":"info_command(ctx:CommandHandler::Context):Nil-instance-method","name":"info_command","doc":"Returns a message containing the user's OID, username, karma, warnings, etc.\n\nChecks for the following permissions: `ranked_info` (for replies only)\n\nIf this is used with a reply, returns the user info of that message if the invoker is ranked.","summary":"<p>Returns a message containing the user's OID, username, karma, warnings, etc.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":377,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L377"},"def":{"name":"info_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif reply = message.reply_message\n  ranked_info(user, message.message_id, reply.message_id)\nelse\n  user_info(user, message.message_id)\nend\n"}},{"html_id":"initialize_handlers(descriptions:CommandDescriptions,config:Config):Nil-instance-method","name":"initialize_handlers","doc":"Initializes CommandHandlers and UpdateHandlers\nAlso checks whether or not a command or media type is enabled via the config, and registers commands with BotFather","summary":"<p>Initializes CommandHandlers and UpdateHandlers Also checks whether or not a command or media type is enabled via the config, and registers commands with BotFather</p>","abstract":false,"args":[{"name":"descriptions","external_name":"descriptions","restriction":"CommandDescriptions"},{"name":"config","external_name":"config","restriction":"Config"}],"args_string":"(descriptions : CommandDescriptions, config : Config) : Nil","args_html":"(descriptions : <a href=\"CommandDescriptions.html\">CommandDescriptions</a>, config : <a href=\"Config.html\">Config</a>) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":143,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L143"},"def":{"name":"initialize_handlers","args":[{"name":"descriptions","external_name":"descriptions","restriction":"CommandDescriptions"},{"name":"config","external_name":"config","restriction":"Config"}],"return_type":"Nil","visibility":"Public","body":"{% for command in [\"start\", \"stop\", \"info\", \"users\", \"version\", \"toggle_karma\", \"toggle_debug\", \"reveal\", \"tripcode\", \"motd\", \"help\", \"upvote\", \"downvote\", \"promote\", \"demote\", \"warn\", \"delete\", \"uncooldown\", \"remove\", \"purge\", \"spoiler\", \"karma_info\", \"pin\", \"unpin\", \"blacklist\", \"whitelist\"] %}\n\n    if config.enable_{{ command.id }}[0]\n      add_event_handler(\n        CommandHandler.new(\n          {% if command == \"stop\" %}\n          [\"stop\", \"leave\"],\n          {% else %}{% if command == \"toggle_karma\" %}\n          [\"togglekarma\", \"toggle_karma\"],\n          {% else %}{% if command == \"toggle_debug\" %}\n          [\"toggledebug\", \"toggle_debug\"],\n          {% else %}{% if command == \"karma_info\" %}\n          [\"karmainfo\", \"karma_info\"],\n          {% else %}{% if command == \"motd\" %}\n          [\"rules\", \"motd\"],\n          {% else %}{% if command == \"upvote\" %}\n          \"1\", \"+\",\n          {% else %}{% if command == \"downvote\" %}\n          \"1\", \"-\",\n          {% else %}{% if command == \"blacklist\" %}\n          [\"blacklist\", \"ban\"],\n          {% else %}\n          \"{{ command.id }}\",\n          {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n           register: config.enable_{{ command.id }}[1],\n           description: descriptions.{{ command.id }}\n        ) {|ctx| {{ command.id }}_command(ctx)}\n      )\n    else\n      add_event_handler(\n        CommandHandler.new(\n          {% if command == \"stop\" %}\n          [\"stop\", \"leave\"],\n          {% else %}{% if command == \"toggle_karma\" %}\n          [\"togglekarma\", \"toggle_karma\"],\n          {% else %}{% if command == \"toggle_debug\" %}\n          [\"toggledebug\", \"toggle_debug\"],\n          {% else %}{% if command == \"motd\" %}\n          [\"rules\", \"motd\"],\n          {% else %}{% if command == \"upvote\" %}\n          \"1\", \"+\",\n          {% else %}{% if command == \"downvote\" %}\n          \"1\", \"-\",\n          {% else %}{% if command == \"blacklist\" %}\n          [\"blacklist\", \"ban\"],\n          {% else %}\n          \"{{ command.id }}\",\n          {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n           register: config.enable_{{ command.id }}[1],\n           description: descriptions.{{ command.id }}\n        ) {|ctx| command_disabled(ctx)}\n      )\n    end\n\n    {% end %}\nif config.enable_sign[0]\n  add_event_handler(CommandHandler.new(\"/sign\", register: config.enable_sign[1], description: descriptions.sign) do |ctx|\n    command_disabled(ctx)\n  end)\nelse\n  add_event_handler(CommandHandler.new(\"/sign\", register: config.enable_sign[1], description: descriptions.sign) do |ctx|\n    command_disabled(ctx)\n  end)\nend\nif config.enable_tripsign[0]\n  add_event_handler(CommandHandler.new(\"/tsign\", register: config.enable_tripsign[1], description: descriptions.tsign) do |ctx|\n    command_disabled(ctx)\n  end)\nelse\n  add_event_handler(CommandHandler.new(\"/tsign\", register: config.enable_tripsign[1], description: descriptions.tsign) do |ctx|\n    command_disabled(ctx)\n  end)\nend\nif config.enable_karma_sign[0]\n  add_event_handler(CommandHandler.new(\"/ksign\", register: config.enable_karma_sign[1], description: descriptions.ksign) do |ctx|\n    command_disabled(ctx)\n  end)\nelse\n  add_event_handler(CommandHandler.new(\"/ksign\", register: config.enable_karma_sign[1], description: descriptions.ksign) do |ctx|\n    command_disabled(ctx)\n  end)\nend\nif config.enable_ranksay[0]\n  add_event_handler(CommandHandler.new(\"/ranksay\", register: config.enable_ranksay[1], description: descriptions.ranksay) do |ctx|\n    command_disabled(ctx)\n  end)\nelse\n  add_event_handler(CommandHandler.new(\"/ranksay\", register: config.enable_ranksay[1], description: descriptions.ranksay) do |ctx|\n    command_disabled(ctx)\n  end)\nend\nif @set_commands\n  register_commands_with_botfather\nend\n{% for media_type in [\"text\", \"animation\", \"audio\", \"document\", \"video\", \"video_note\", \"voice\", \"photo\", \"media_group\", \"poll\", \"forwarded_message\", \"sticker\", \"dice\", \"dart\", \"basketball\", \"soccerball\", \"slot_machine\", \"bowling\", \"venue\", \"location\", \"contact\"] %}\n\n    if config.relay_{{ media_type.id }}\n      add_event_handler(UpdateHandler.new(:{{ media_type.id }}) {|update| handle_{{ media_type.id }}(update)})\n    else\n      add_event_handler(UpdateHandler.new(:{{ media_type.id }}) {|update| media_disabled(update, {{ media_type }})})\n    end\n\n    {% end %}\n"}},{"html_id":"karma_info_command(ctx:CommandHandler::Context):Nil-instance-method","name":"karma_info_command","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1229,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1229"},"def":{"name":"karma_info_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @karma_levels.empty?\n  return\nend\nuser.set_active\n@database.modify_user(user)\ncurrent_level = next_level = {0, \"\"}\npercentage = 0.0_f32\n@karma_levels.each_cons_pair do |lower, higher|\n  if lower[0] <= user.karma && user.karma < higher[0]\n    current_level = lower\n    next_level = higher\n    percentage = ((user.karma - lower[0]) * 100) / (higher[0] - lower[0]).to_f32\n    break\n  end\nend\nif current_level == next_level\n  if (lowest = @karma_levels.first?) && user.karma < lowest[0]\n    current_level = {user.karma, \"???\"}\n    next_level = lowest\n  else\n    if (highest = {@karma_levels.last_key, @karma_levels.last_value}) && user.karma >= highest[0]\n      current_level = {user.karma, highest[1]}\n      next_level = {highest[0], \"???\"}\n      percentage = 100.0_f32\n    end\n  end\nend\nrelay_to_one(message.message_id, user.id, @locale.replies.karma_info, {\"current_level\" => current_level[1], \"next_level\" => next_level[1], \"karma\" => user.karma.to_s, \"limit\" => next_level[0].to_s, \"loading_bar\" => Format.format_karma_loading_bar(percentage, @locale), \"percentage\" => \"#{percentage.format(decimal_places: 1, only_significant: true)}\"})\n"}},{"html_id":"karma_levels:Hash(Int32,String)-instance-method","name":"karma_levels","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":46,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L46"},"def":{"name":"karma_levels","return_type":"Hash(Int32, String)","visibility":"Public","body":"@karma_levels"}},{"html_id":"karma_warn_penalty:Int32-instance-method","name":"karma_warn_penalty","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":24,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L24"},"def":{"name":"karma_warn_penalty","return_type":"Int32","visibility":"Public","body":"@karma_warn_penalty"}},{"html_id":"kick_inactive_users:Nil-instance-method","name":"kick_inactive_users","doc":"Kicks any users that have been inactive for a duration of time.","summary":"<p>Kicks any users that have been inactive for a duration of time.</p>","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":2387,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2387"},"def":{"name":"kick_inactive_users","return_type":"Nil","visibility":"Public","body":"(@database.get_inactive_users(@inactivity_limit)).each do |user|\n  user.set_left\n  @database.modify_user(user)\n  @queue.reject_messsages do |msg|\n    msg.receiver == user.id\n  end\n  log_output(@locale.logs.left, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name})\n  relay_to_one(nil, user.id, @locale.replies.inactive, {\"time\" => @inactivity_limit.to_s})\nend"}},{"html_id":"linked_network:Hash(String,String)-instance-method","name":"linked_network","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":43,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L43"},"def":{"name":"linked_network","return_type":"Hash(String, String)","visibility":"Public","body":"@linked_network"}},{"html_id":"locale:Locale-instance-method","name":"locale","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":14,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L14"},"def":{"name":"locale","return_type":"Locale","visibility":"Public","body":"@locale"}},{"html_id":"log_channel:String-instance-method","name":"log_channel","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":26,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L26"},"def":{"name":"log_channel","return_type":"String","visibility":"Public","body":"@log_channel"}},{"html_id":"log_channel=(log_channel:String)-instance-method","name":"log_channel=","abstract":false,"args":[{"name":"log_channel","external_name":"log_channel","restriction":"String"}],"args_string":"(log_channel : String)","args_html":"(log_channel : String)","location":{"filename":"src/privateparlor/telegram.cr","line_number":26,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L26"},"def":{"name":"log_channel=","args":[{"name":"log_channel","external_name":"log_channel","restriction":"String"}],"visibility":"Public","body":"@log_channel = log_channel"}},{"html_id":"log_output(log:String,params:Hash(String,String|Nil)={\"\"=>\"\"}):Nil-instance-method","name":"log_output","doc":"Formats and outputs given log message to the log (either STDOUT or a file, defined in config) with INFO severity.\n\nAlso outputs message to a given log channel, if available","summary":"<p>Formats and outputs given log message to the log (either STDOUT or a file, defined in config) with INFO severity.</p>","abstract":false,"args":[{"name":"log","external_name":"log","restriction":"String"},{"name":"params","default_value":"{\"\" => \"\"}","external_name":"params","restriction":"Hash(String, String | ::Nil)"}],"args_string":"(log : String, params : Hash(String, String | Nil) = {\"\" => \"\"}) : Nil","args_html":"(log : String, params : Hash(String, String | Nil) = {<span class=\"s\">&quot;&quot;</span> <span class=\"o\">=&gt;</span> <span class=\"s\">&quot;&quot;</span>}) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2502,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2502"},"def":{"name":"log_output","args":[{"name":"log","external_name":"log","restriction":"String"},{"name":"params","default_value":"{\"\" => \"\"}","external_name":"params","restriction":"Hash(String, String | ::Nil)"}],"return_type":"Nil","visibility":"Public","body":"text = Format.substitute_message(log, @locale, params)\nLog.info do\n  text\nend\nif @log_channel.empty?\nelse\n  send_message(@log_channel, text)\nend\n"}},{"html_id":"media_disabled(update:Tourmaline::Update,type:String):Nil-instance-method","name":"media_disabled","doc":"Sends a message to the user if a disabled media type is sent","summary":"<p>Sends a message to the user if a disabled media type is sent</p>","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"},{"name":"type","external_name":"type","restriction":"String"}],"args_string":"(update : Tourmaline::Update, type : String) : Nil","args_html":"(update : Tourmaline::Update, type : String) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2360,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2360"},"def":{"name":"media_disabled","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"},{"name":"type","external_name":"type","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(update)\nif message && user\nelse\n  return\nend\nuser.set_active\n@database.modify_user(user)\nrelay_to_one(message.message_id, user.id, @locale.replies.media_disabled, {\"type\" => type})\n"}},{"html_id":"media_limit_period:Int32-instance-method","name":"media_limit_period","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":30,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L30"},"def":{"name":"media_limit_period","return_type":"Int32","visibility":"Public","body":"@media_limit_period"}},{"html_id":"motd_command(ctx:CommandHandler::Context):Nil-instance-method","name":"motd_command","doc":"Replies with the motd/rules associated with this bot.\n\nChecks for the following permissions: `motd_set` (only when an argument is given)\n\nIf the host invokes this command, the motd/rules can be set or modified.","summary":"<p>Replies with the motd/rules associated with this bot.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1335,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1335"},"def":{"name":"motd_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif text = message.text\nelse\n  return\nend\nif (text.split(2))[1]?\n  if @access.authorized?(user.rank, :motd_set)\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.fail)\n  end\n  arg = Format.format_motd(text, message.entities, @linked_network)\n  if arg.empty?\n    return relay_to_one(message.message_id, user.id, @locale.replies.fail)\n  end\n  user.set_active\n  @database.modify_user(user)\n  @database.set_motd(arg)\n  log_output(@locale.logs.motd_set, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name, \"text\" => arg})\n  relay_to_one(message.message_id, user.id, @locale.replies.success)\nelse\n  if motd = @database.get_motd\n  else\n    return\n  end\n  user.set_active\n  @database.modify_user(user)\n  relay_to_one(message.message_id, user.id, motd)\nend\n"}},{"html_id":"pin_command(ctx:CommandHandler::Context):Nil-instance-method","name":"pin_command","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1273,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1273"},"def":{"name":"pin_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :pin)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif reply = message.reply_message\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.no_reply)\nend\nif @history.get_sender_id(reply.message_id)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.not_in_cache)\nend\nuser.set_active\n@database.modify_user(user)\n(@history.get_all_msids(reply.message_id)).each do |receiver_id, receiver_msid|\n  active_users = @database.get_prioritized_users\n  if receiver_id.in?(active_users)\n    pin_chat_message(receiver_id, receiver_msid)\n  end\nend\nlog_output(@locale.logs.pinned, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name, \"msid\" => reply.message_id.to_s})\n"}},{"html_id":"preliminary_message_check(update:Tourmaline::Update):Tuple(Tourmaline::Message|Nil,Database::User|Nil)-instance-method","name":"preliminary_message_check","abstract":false,"args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"args_string":"(update : Tourmaline::Update) : Tuple(Tourmaline::Message | Nil, Database::User | Nil)","args_html":"(update : Tourmaline::Update) : Tuple(Tourmaline::Message | Nil, <a href=\"Database/User.html\">Database::User</a> | Nil)","location":{"filename":"src/privateparlor/telegram.cr","line_number":281,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L281"},"def":{"name":"preliminary_message_check","args":[{"name":"update","external_name":"update","restriction":"Tourmaline::Update"}],"return_type":"Tuple(Tourmaline::Message | ::Nil, Database::User | ::Nil)","visibility":"Public","body":"if (message = update.message) && (info = message.from)\nelse\n  return {nil, nil}\nend\nif user = database.get_user(info.id)\nelse\n  relay_to_one(nil, info.id, @locale.replies.not_in_chat)\n  return {nil, nil}\nend\nif user.can_chat?\nelse\n  deny_user(user)\n  return {nil, nil}\nend\nuser.update_names(info.username, info.full_name)\nreturn {message, user}\n"}},{"html_id":"preliminary_message_check(ctx:CommandHandler::Context|Tourmaline::Update):Tuple(Tourmaline::Message|Nil,Database::User|Nil)-instance-method","name":"preliminary_message_check","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context | Tourmaline::Update"}],"args_string":"(ctx : CommandHandler::Context | Tourmaline::Update) : Tuple(Tourmaline::Message | Nil, Database::User | Nil)","args_html":"(ctx : CommandHandler::Context | Tourmaline::Update) : Tuple(Tourmaline::Message | Nil, <a href=\"Database/User.html\">Database::User</a> | Nil)","location":{"filename":"src/privateparlor/telegram.cr","line_number":263,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L263"},"def":{"name":"preliminary_message_check","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context | Tourmaline::Update"}],"return_type":"Tuple(Tourmaline::Message | ::Nil, Database::User | ::Nil)","visibility":"Public","body":"if (message = ctx.message) && (info = message.from)\nelse\n  return {nil, nil}\nend\nif user = database.get_user(info.id)\nelse\n  relay_to_one(nil, info.id, @locale.replies.not_in_chat)\n  return {nil, nil}\nend\nif user.can_use_command?\nelse\n  deny_user(user)\n  return {nil, nil}\nend\nuser.update_names(info.username, info.full_name)\nreturn {message, user}\n"}},{"html_id":"promote_command(ctx:CommandHandler::Context):Nil-instance-method","name":"promote_command","doc":"Promotes a user to a given rank.\n\nChecks for the following permissions: `promote`, `promote_lower`, `promote_same`\n\nIf `promote`, the reply user can be promoted to a rank lower or equal to the invoker's rank.\n\nIf `promote_lower`, the reply user can be promoted to a rank lower than the invoker's rank.\n\nIf `promote_same`, the reply user can only be promoted to the invoker's rank.\n\nIf used with a reply, the reply user is promoted to the invoker's rank or the given rank.","summary":"<p>Promotes a user to a given rank.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":680,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L680"},"def":{"name":"promote_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif authority = @access.authorized?(user.rank, :promote, :promote_lower, :promote_same)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif reply = message.reply_message\n  promote_from_reply(user, authority, Format.get_arg(ctx.message.text), message.message_id, reply.message_id)\nelse\n  promote_from_args(user, authority, Format.get_args(message.text, count: 2), message.message_id)\nend\n"}},{"html_id":"promote_from_args(user:Database::User,authority:CommandPermissions,args:Array(String)|Nil,msid:Int64):Nil-instance-method","name":"promote_from_args","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"args","external_name":"args","restriction":"Array(String) | Nil"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(user : Database::User, authority : CommandPermissions, args : Array(String) | Nil, msid : Int64) : Nil","args_html":"(user : <a href=\"Database/User.html\">Database::User</a>, authority : <a href=\"CommandPermissions.html\">CommandPermissions</a>, args : Array(String) | Nil, msid : Int64) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":731,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L731"},"def":{"name":"promote_from_args","args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"args","external_name":"args","restriction":"Array(String) | Nil"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"if args\nelse\n  return relay_to_one(msid, user.id, @locale.replies.missing_args)\nend\nif (args.size == 1) && (authority.in?(CommandPermissions::Promote, CommandPermissions::PromoteSame))\n  tuple = {user.rank, @access.ranks[user.rank]}\nelse\n  if args.size == 2\n    tuple = @access.find_rank(args[1].downcase, args[1].to_i?)\n  else\n    return relay_to_one(msid, user.id, @locale.replies.missing_args)\n  end\nend\nif tuple\nelse\n  return relay_to_one(msid, user.id, @locale.replies.no_rank_found, {\"ranks\" => @access.rank_names(limit: user.rank).to_s})\nend\nif promoted_user = database.get_user_by_arg(args[0])\nelse\n  return relay_to_one(msid, user.id, @locale.replies.no_user_found)\nend\nif @access.can_promote?(tuple[0], user.rank, promoted_user.rank, authority)\nelse\n  return relay_to_one(msid, user.id, @locale.replies.fail)\nend\nuser.set_active\n@database.modify_user(user)\npromoted_user.set_rank(tuple[0])\n@database.modify_user(promoted_user)\nrelay_to_one(nil, promoted_user.id, @locale.replies.promoted, {\"rank\" => tuple[1].name})\nlog_output(@locale.logs.promoted, {\"id\" => promoted_user.id.to_s, \"name\" => promoted_user.get_formatted_name, \"rank\" => tuple[1].name, \"invoker\" => user.get_formatted_name})\nrelay_to_one(msid, user.id, @locale.replies.success)\n"}},{"html_id":"promote_from_reply(user:Database::User,authority:CommandPermissions,arg:String|Nil,msid:Int64,reply:Int64):Nil-instance-method","name":"promote_from_reply","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"arg","external_name":"arg","restriction":"String | ::Nil"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"reply","external_name":"reply","restriction":"Int64"}],"args_string":"(user : Database::User, authority : CommandPermissions, arg : String | Nil, msid : Int64, reply : Int64) : Nil","args_html":"(user : <a href=\"Database/User.html\">Database::User</a>, authority : <a href=\"CommandPermissions.html\">CommandPermissions</a>, arg : String | Nil, msid : Int64, reply : Int64) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":695,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L695"},"def":{"name":"promote_from_reply","args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"authority","external_name":"authority","restriction":"CommandPermissions"},{"name":"arg","external_name":"arg","restriction":"String | ::Nil"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"reply","external_name":"reply","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"if arg.nil? && (authority.in?(CommandPermissions::Promote, CommandPermissions::PromoteSame))\n  tuple = {user.rank, @access.ranks[user.rank]}\nelse\n  if arg\n    tuple = @access.find_rank(arg.downcase, arg.to_i?)\n  else\n    return relay_to_one(msid, user.id, @locale.replies.missing_args)\n  end\nend\nif tuple\nelse\n  return relay_to_one(msid, user.id, @locale.replies.no_rank_found, {\"ranks\" => @access.rank_names(limit: user.rank).to_s})\nend\nif promoted_user = database.get_user(@history.get_sender_id(reply))\nelse\n  return relay_to_one(msid, user.id, @locale.replies.not_in_cache)\nend\nif @access.can_promote?(tuple[0], user.rank, promoted_user.rank, authority)\nelse\n  return relay_to_one(msid, user.id, @locale.replies.fail)\nend\nuser.set_active\n@database.modify_user(user)\npromoted_user.set_rank(tuple[0])\n@database.modify_user(promoted_user)\nrelay_to_one(nil, promoted_user.id, @locale.replies.promoted, {\"rank\" => tuple[1].name})\nlog_output(@locale.logs.promoted, {\"id\" => promoted_user.id.to_s, \"name\" => promoted_user.get_formatted_name, \"rank\" => tuple[1].name, \"invoker\" => user.get_formatted_name})\nrelay_to_one(msid, user.id, @locale.replies.success)\n"}},{"html_id":"pseudonymous:Bool|Nil-instance-method","name":"pseudonymous","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":32,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L32"},"def":{"name":"pseudonymous","return_type":"Bool | ::Nil","visibility":"Public","body":"@pseudonymous"}},{"html_id":"purge_command(ctx:CommandHandler::Context):Nil-instance-method","name":"purge_command","doc":"Delete all messages from recently blacklisted users.\n\nChecks for the following permissions: `purge`\n\nIf `purge`, allows the user to run a purge","summary":"<p>Delete all messages from recently blacklisted users.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1049,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1049"},"def":{"name":"purge_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :purge)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nuser.set_active\n@database.modify_user(user)\ndelete_msids = 0\nif banned_users = @database.get_blacklisted_users\n  banned_users.each do |banned_user|\n    (@history.get_msids_from_user(banned_user.id)).each do |msid|\n      delete_messages(msid, banned_user.id, banned_user.debug_enabled)\n      delete_msids = delete_msids + 1\n    end\n  end\nend\nrelay_to_one(message.message_id, user.id, @locale.replies.purge_complete, {\"msgs_deleted\" => delete_msids.to_s})\n"}},{"html_id":"queue:MessageQueue-instance-method","name":"queue","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":13,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L13"},"def":{"name":"queue","return_type":"MessageQueue","visibility":"Public","body":"@queue"}},{"html_id":"r9k_cooldown:Int32-instance-method","name":"r9k_cooldown","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":50,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L50"},"def":{"name":"r9k_cooldown","return_type":"Int32","visibility":"Public","body":"@r9k_cooldown"}},{"html_id":"r9k_forwards:Bool|Nil-instance-method","name":"r9k_forwards","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":49,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L49"},"def":{"name":"r9k_forwards","return_type":"Bool | ::Nil","visibility":"Public","body":"@r9k_forwards"}},{"html_id":"r9k_media:Bool|Nil-instance-method","name":"r9k_media","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":48,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L48"},"def":{"name":"r9k_media","return_type":"Bool | ::Nil","visibility":"Public","body":"@r9k_media"}},{"html_id":"r9k_text:Bool|Nil-instance-method","name":"r9k_text","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":47,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L47"},"def":{"name":"r9k_text","return_type":"Bool | ::Nil","visibility":"Public","body":"@r9k_text"}},{"html_id":"r9k_warn:Bool|Nil-instance-method","name":"r9k_warn","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":51,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L51"},"def":{"name":"r9k_warn","return_type":"Bool | ::Nil","visibility":"Public","body":"@r9k_warn"}},{"html_id":"ranked_info(user:Database::User,msid:Int64,reply:Int64):Nil-instance-method","name":"ranked_info","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"reply","external_name":"reply","restriction":"Int64"}],"args_string":"(user : Database::User, msid : Int64, reply : Int64) : Nil","args_html":"(user : <a href=\"Database/User.html\">Database::User</a>, msid : Int64, reply : Int64) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":388,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L388"},"def":{"name":"ranked_info","args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"reply","external_name":"reply","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"if @access.authorized?(user.rank, :ranked_info)\nelse\n  return relay_to_one(msid, user.id, @locale.replies.fail)\nend\nif reply_user = database.get_user(@history.get_sender_id(reply))\nelse\n  return relay_to_one(msid, user.id, @locale.replies.not_in_cache)\nend\nuser.set_active\n@database.modify_user(user)\nreply_user.remove_cooldown\ncooldown_until = Format.format_cooldown_until(reply_user.cooldown_until, @locale)\nrelay_to_one(msid, user.id, @locale.replies.ranked_info, {\"oid\" => reply_user.get_obfuscated_id.to_s, \"karma\" => reply_user.get_obfuscated_karma.to_s, \"cooldown_until\" => cooldown_until})\n"}},{"html_id":"register_tasks(spam_interval_seconds:Int32):Array(Tasker::Task)-instance-method","name":"register_tasks","doc":"Starts various background tasks and stores them in a hash.","summary":"<p>Starts various background tasks and stores them in a hash.</p>","abstract":false,"args":[{"name":"spam_interval_seconds","external_name":"spam_interval_seconds","restriction":"Int32"}],"args_string":"(spam_interval_seconds : Int32) : Array(Tasker::Task)","args_html":"(spam_interval_seconds : Int32) : Array(Tasker::Task)","location":{"filename":"src/privateparlor/telegram.cr","line_number":248,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L248"},"def":{"name":"register_tasks","args":[{"name":"spam_interval_seconds","external_name":"spam_interval_seconds","restriction":"Int32"}],"return_type":"Array(Tasker::Task)","visibility":"Public","body":"tasks = [] of Tasker::Task\ntasks << (Tasker.every(15.minutes) do\n  @database.expire_warnings(warn_expire_hours)\nend)\nif @history.lifespan != 0.hours\n  tasks << (Tasker.every(@history.lifespan * (1 / 4)) do\n    @history.expire\n  end)\nend\nif spam = @spam_handler\n  tasks << (Tasker.every(spam_interval_seconds.seconds) do\n    spam.expire\n  end)\nend\nif @inactivity_limit > 0\n  tasks << (Tasker.every(6.hours) do\n    kick_inactive_users\n  end)\nend\ntasks\n"}},{"html_id":"registration_open:Bool|Nil-instance-method","name":"registration_open","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":31,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L31"},"def":{"name":"registration_open","return_type":"Bool | ::Nil","visibility":"Public","body":"@registration_open"}},{"html_id":"regular_forwards:Bool|Nil-instance-method","name":"regular_forwards","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":28,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L28"},"def":{"name":"regular_forwards","return_type":"Bool | ::Nil","visibility":"Public","body":"@regular_forwards"}},{"html_id":"relay(reply_message:Tourmaline::Message|Nil,user:Database::User,cached_msid:Int64,proc:MessageProc):Nil-instance-method","name":"relay","doc":"Caches a message and sends it to the queue for relaying.","summary":"<p>Caches a message and sends it to the queue for relaying.</p>","abstract":false,"args":[{"name":"reply_message","external_name":"reply_message","restriction":"Tourmaline::Message | ::Nil"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"cached_msid","external_name":"cached_msid","restriction":"Int64"},{"name":"proc","external_name":"proc","restriction":"MessageProc"}],"args_string":"(reply_message : Tourmaline::Message | Nil, user : Database::User, cached_msid : Int64, proc : MessageProc) : Nil","args_html":"(reply_message : Tourmaline::Message | Nil, user : <a href=\"Database/User.html\">Database::User</a>, cached_msid : Int64, proc : <a href=\"MessageProc.html\">MessageProc</a>) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2440,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2440"},"def":{"name":"relay","args":[{"name":"reply_message","external_name":"reply_message","restriction":"Tourmaline::Message | ::Nil"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"cached_msid","external_name":"cached_msid","restriction":"Int64"},{"name":"proc","external_name":"proc","restriction":"MessageProc"}],"return_type":"Nil","visibility":"Public","body":"if reply_message\n  reply_msids = @history.get_all_msids(reply_message.message_id)\n  if reply_msids.empty?\n    relay_to_one(cached_msid, user.id, @locale.replies.not_in_cache)\n    @history.del_message_group(cached_msid)\n    return\n  end\nend\n@queue.add_to_queue(cached_msid, user.id, @database.get_prioritized_users(user), reply_msids, proc)\n"}},{"html_id":"relay(reply_message:Tourmaline::Message|Nil,user:Database::User,cached_msid:Array(Int64),proc:MessageProc):Nil-instance-method","name":"relay","doc":"Caches an album message and sends it to the queue for relaying.","summary":"<p>Caches an album message and sends it to the queue for relaying.</p>","abstract":false,"args":[{"name":"reply_message","external_name":"reply_message","restriction":"Tourmaline::Message | ::Nil"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"cached_msid","external_name":"cached_msid","restriction":"Array(Int64)"},{"name":"proc","external_name":"proc","restriction":"MessageProc"}],"args_string":"(reply_message : Tourmaline::Message | Nil, user : Database::User, cached_msid : Array(Int64), proc : MessageProc) : Nil","args_html":"(reply_message : Tourmaline::Message | Nil, user : <a href=\"Database/User.html\">Database::User</a>, cached_msid : Array(Int64), proc : <a href=\"MessageProc.html\">MessageProc</a>) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2461,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2461"},"def":{"name":"relay","args":[{"name":"reply_message","external_name":"reply_message","restriction":"Tourmaline::Message | ::Nil"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"cached_msid","external_name":"cached_msid","restriction":"Array(Int64)"},{"name":"proc","external_name":"proc","restriction":"MessageProc"}],"return_type":"Nil","visibility":"Public","body":"if reply_message\n  reply_msids = @history.get_all_msids(reply_message.message_id)\n  if reply_msids.empty?\n    relay_to_one(cached_msid[0], user.id, @locale.replies.not_in_cache)\n    cached_msid.each do |msid|\n      @history.del_message_group(msid)\n    end\n    return\n  end\nend\n@queue.add_to_queue(cached_msid, user.id, @database.get_prioritized_users(user), reply_msids, proc)\n"}},{"html_id":"relay_album(message:Tourmaline::Message,album:String,user:Database::User,caption:String|Nil,entities:Array(MessageEntity)=[]ofMessageEntity):Nil-instance-method","name":"relay_album","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"album","external_name":"album","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"caption","external_name":"caption","restriction":"String | ::Nil"},{"name":"entities","default_value":"[] of MessageEntity","external_name":"entities","restriction":"Array(MessageEntity)"}],"args_string":"(message : Tourmaline::Message, album : String, user : Database::User, caption : String | Nil, entities : Array(MessageEntity) = [] of MessageEntity) : Nil","args_html":"(message : Tourmaline::Message, album : String, user : <a href=\"Database/User.html\">Database::User</a>, caption : String | Nil, entities : Array(MessageEntity) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">MessageEntity</span>) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1917,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1917"},"def":{"name":"relay_album","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"album","external_name":"album","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"caption","external_name":"caption","restriction":"String | ::Nil"},{"name":"entities","default_value":"[] of MessageEntity","external_name":"entities","restriction":"Array(MessageEntity)"}],"return_type":"Nil","visibility":"Public","body":"if media = message.photo.last?\n  input = InputMediaPhoto.new(media.file_id, caption: caption, caption_entities: entities, parse_mode: :HTML, has_spoiler: message.has_media_spoiler? && @allow_media_spoilers)\nelse\n  if media = message.video\n    input = InputMediaVideo.new(media.file_id, caption: caption, caption_entities: entities, parse_mode: :HTML, has_spoiler: message.has_media_spoiler? && @allow_media_spoilers)\n  else\n    if media = message.audio\n      input = InputMediaAudio.new(media.file_id, caption: caption, caption_entities: entities, parse_mode: :HTML)\n    else\n      if media = message.document\n        input = InputMediaDocument.new(media.file_id, caption: caption, caption_entities: entities, parse_mode: :HTML)\n      else\n        return\n      end\n    end\n  end\nend\nif @albums[album]?\n  @albums[album].message_ids << message.message_id\n  @albums[album].media_ids << input\n  return\nend\nmedia_group = Album.new(message.message_id, input)\n@albums.merge!({album => media_group})\nTasker.in(500.milliseconds) do\n  if temp_album = @albums.delete(album)\n  else\n    next\n  end\n  cached_msids = Array(Int64).new\n  temp_album.message_ids.each do |msid|\n    cached_msids << (@history.new_message(user.id, msid))\n  end\n  relay(message.reply_message, user, cached_msids, ->(receiver : Int64, reply : Int64 | Nil) do\n    send_media_group(receiver, temp_album.media_ids, reply_to_message: reply)\n  end)\nend\n"}},{"html_id":"relay_regular_forward(user:Database::User,message:Tourmaline::Message,text:String):Nil-instance-method","name":"relay_regular_forward","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(user : Database::User, message : Tourmaline::Message, text : String) : Nil","args_html":"(user : <a href=\"Database/User.html\">Database::User</a>, message : Tourmaline::Message, text : String) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2143,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2143"},"def":{"name":"relay_regular_forward","args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"},{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"if message.text\n  relay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n    send_message(receiver, text, link_preview: true)\n  end)\nelse\n  if album = message.media_group_id\n    if @albums[album]?\n      relay_album(message, album, user, message.caption, message.caption_entities)\n    else\n      relay_album(message, album, user, text)\n    end\n  else\n    if file = message.animation\n      if file_id = file.file_id\n      else\n        return\n      end\n      relay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n        send_animation(receiver, file_id, caption: text, has_spoiler: message.has_media_spoiler?)\n      end)\n    else\n      if file = message.document\n        if file_id = file.file_id\n        else\n          return\n        end\n        relay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n          send_document(receiver, file_id, caption: text)\n        end)\n      else\n        if file = message.video\n          if file_id = file.file_id\n          else\n            return\n          end\n          relay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n            send_video(receiver, file_id, caption: text, has_spoiler: message.has_media_spoiler?)\n          end)\n        else\n          if file = message.photo\n            if file_id = file.last.file_id\n            else\n              return\n            end\n            relay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n              send_photo(receiver, file_id, caption: text, has_spoiler: message.has_media_spoiler?)\n            end)\n          else\n            relay(message.reply_message, user, @history.new_message(user.id, message.message_id), ->(receiver : Int64, reply : Int64 | Nil) do\n              forward_message(receiver, message.chat.id, message.message_id)\n            end)\n          end\n        end\n      end\n    end\n  end\nend"}},{"html_id":"relay_to_one(reply_message:Int64|Nil,user:Int64,reply:String,params:Hash(String,String|Nil)):Nil-instance-method","name":"relay_to_one","doc":"Relay a message to a single user. Used for system messages.","summary":"<p>Relay a message to a single user.</p>","abstract":false,"args":[{"name":"reply_message","external_name":"reply_message","restriction":"Int64 | ::Nil"},{"name":"user","external_name":"user","restriction":"Int64"},{"name":"reply","external_name":"reply","restriction":"String"},{"name":"params","external_name":"params","restriction":"Hash(String, String | ::Nil)"}],"args_string":"(reply_message : Int64 | Nil, user : Int64, reply : String, params : Hash(String, String | Nil)) : Nil","args_html":"(reply_message : Int64 | Nil, user : Int64, reply : String, params : Hash(String, String | Nil)) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2491,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2491"},"def":{"name":"relay_to_one","args":[{"name":"reply_message","external_name":"reply_message","restriction":"Int64 | ::Nil"},{"name":"user","external_name":"user","restriction":"Int64"},{"name":"reply","external_name":"reply","restriction":"String"},{"name":"params","external_name":"params","restriction":"Hash(String, String | ::Nil)"}],"return_type":"Nil","visibility":"Public","body":"@queue.add_to_queue_priority(user, reply_message, ->(receiver : Int64, reply_msid : Int64 | Nil) do\n  send_message(receiver, Format.substitute_message(reply, @locale, params), link_preview: true, reply_to_message: reply_msid)\nend)"}},{"html_id":"relay_to_one(reply_message:Int64|Nil,user:Int64,text:String)-instance-method","name":"relay_to_one","doc":"Relay a message to a single user. Used for system messages.","summary":"<p>Relay a message to a single user.</p>","abstract":false,"args":[{"name":"reply_message","external_name":"reply_message","restriction":"Int64 | ::Nil"},{"name":"user","external_name":"user","restriction":"Int64"},{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(reply_message : Int64 | Nil, user : Int64, text : String)","args_html":"(reply_message : Int64 | Nil, user : Int64, text : String)","location":{"filename":"src/privateparlor/telegram.cr","line_number":2482,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2482"},"def":{"name":"relay_to_one","args":[{"name":"reply_message","external_name":"reply_message","restriction":"Int64 | ::Nil"},{"name":"user","external_name":"user","restriction":"Int64"},{"name":"text","external_name":"text","restriction":"String"}],"visibility":"Public","body":"@queue.add_to_queue_priority(user, reply_message, ->(receiver : Int64, reply : Int64 | Nil) do\n  send_message(receiver, text, link_preview: true, reply_to_message: reply)\nend)"}},{"html_id":"remove_command(ctx:CommandHandler::Context):Nil-instance-method","name":"remove_command","doc":"Remove a message from a user without giving a warning or cooldown.\n\nChecks for the following permissions: `remove`\n\nIf `remove`, allows the user to remove a message","summary":"<p>Remove a message from a user without giving a warning or cooldown.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1012,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1012"},"def":{"name":"remove_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :remove)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif reply = message.reply_message\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.no_reply)\nend\nif reply_user = database.get_user(@history.get_sender_id(reply.message_id))\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.not_in_cache)\nend\nuser.set_active\n@database.modify_user(user)\ncached_msid = delete_messages(reply.message_id, reply_user.id, reply_user.debug_enabled)\nreason = Format.get_arg(message.text)\nrelay_to_one(cached_msid, reply_user.id, @locale.replies.message_removed, {\"reason\" => Format.format_reason_reply(reason, @locale)})\nlog_output(@locale.logs.message_removed, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name, \"msid\" => cached_msid.to_s, \"oid\" => reply_user.get_obfuscated_id, \"reason\" => Format.format_reason_log(reason, @locale)})\nrelay_to_one(message.message_id, user.id, @locale.replies.success)\n"}},{"html_id":"reveal_command(ctx:CommandHandler::Context):Nil-instance-method","name":"reveal_command","doc":"Privately reveal username to another user","summary":"<p>Privately reveal username to another user</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":602,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L602"},"def":{"name":"reveal_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :reveal)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif (chat = get_chat(user.id)) && chat.has_private_forwards\n  return relay_to_one(message.message_id, user.id, @locale.replies.private_sign)\nend\nif reply = message.reply_message\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.no_reply)\nend\nif reply_user = database.get_user(@history.get_sender_id(reply.message_id))\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.not_in_cache)\nend\nif reply_user.id == user.id\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif (spam = @spam_handler) && (spam.spammy_sign?(user.id, @sign_limit_interval))\n  return relay_to_one(message.message_id, user.id, @locale.replies.sign_spam)\nend\nuser.set_active\n@database.modify_user(user)\nrelay_to_one(@history.get_msid(reply.message_id, reply_user.id), reply_user.id, Format.format_user_reveal(user.id, user.get_formatted_name, @locale))\nlog_output(@locale.logs.revealed, {\"sender_id\" => user.id.to_s, \"sender\" => user.get_formatted_name, \"receiver_id\" => reply_user.id.to_s, \"receiver\" => reply_user.get_formatted_name, \"msid\" => reply.message_id.to_s})\nrelay_to_one(message.message_id, user.id, @locale.replies.success)\n"}},{"html_id":"revert_ranked_users:Nil-instance-method","name":"revert_ranked_users","doc":"Checks the database for any users that have ranks not found in the `AuthorizedRanks` hash.\n\nIf the rank is not valid, the user is reverted to the default user rank.","summary":"<p>Checks the database for any users that have ranks not found in the <code><a href=\"AuthorizedRanks.html\">AuthorizedRanks</a></code> hash.</p>","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":132,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L132"},"def":{"name":"revert_ranked_users","return_type":"Nil","visibility":"Public","body":"(@database.get_invalid_rank_users(@access.ranks.keys)).each do |user|\n  invalid_rank = user.rank\n  user.set_rank(@default_rank)\n  @database.modify_user(user)\n  log_output(\"User #{user.id}, aka #{user.get_formatted_name}, had an invalid rank (was #{invalid_rank}) and was reverted to default rank (#{@default_rank})\")\nend"}},{"html_id":"send_messages:Bool|Nil-instance-method","name":"send_messages","doc":"Receives a `Message` from the `queue`, calls its proc, and adds the returned message id to the History\n\nThis function should be invoked in a Fiber.","summary":"<p>Receives a <code>Message</code> from the <code><a href=\"PrivateParlor.html#queue%3AMessageQueue-instance-method\">#queue</a></code>, calls its proc, and adds the returned message id to the History</p>","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":2514,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2514"},"def":{"name":"send_messages","return_type":"Bool | ::Nil","visibility":"Public","body":"msg = @queue.get_message\nif msg.nil?\n  return true\nend\nbegin\n  success = msg.function.call(msg.receiver, msg.reply_to)\nrescue Tourmaline::Error::BotBlocked | Tourmaline::Error::UserDeactivated\n  return force_leave(msg.receiver)\nrescue ex\n  return Log.error(exception: ex) do\n    \"Error occured when relaying message.\"\n  end\nend\nif msg.origin_msid\nelse\n  return\nend\ncase success\nwhen Tourmaline::Message\n  @history.add_to_cache(msg.origin_msid.as(Int64), success.message_id, msg.receiver)\nwhen Array(Tourmaline::Message)\n  sent_msids = success.map(&.message_id)\n  sent_msids.zip(msg.origin_msid.as(Array(Int64))) do |msid, origin_msid|\n    @history.add_to_cache(origin_msid, msid, msg.receiver)\n  end\nend\n"}},{"html_id":"sign_limit_interval:Int32-instance-method","name":"sign_limit_interval","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":37,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L37"},"def":{"name":"sign_limit_interval","return_type":"Int32","visibility":"Public","body":"@sign_limit_interval"}},{"html_id":"smileys:Array(String)-instance-method","name":"smileys","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":40,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L40"},"def":{"name":"smileys","return_type":"Array(String)","visibility":"Public","body":"@smileys"}},{"html_id":"spam_handler:SpamScoreHandler|Nil-instance-method","name":"spam_handler","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":18,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L18"},"def":{"name":"spam_handler","return_type":"SpamScoreHandler | Nil","visibility":"Public","body":"@spam_handler"}},{"html_id":"spamming?(id:Int64,msid:Int64,score:Float32):Bool|Nil-instance-method","name":"spamming?","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"score","external_name":"score","restriction":"Float32"}],"args_string":"(id : Int64, msid : Int64, score : Float32) : Bool | Nil","args_html":"(id : Int64, msid : Int64, score : Float32) : Bool | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1680,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1680"},"def":{"name":"spamming?","args":[{"name":"id","external_name":"id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"score","external_name":"score","restriction":"Float32"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if spam = @spam_handler\nelse\n  return\nend\nif spam.spammy?(id, score)\n  relay_to_one(msid, id, @locale.replies.spamming)\n  true\nend\n"}},{"html_id":"spamming_text?(id:Int64,msid:Int64,text:String):Bool|Nil-instance-method","name":"spamming_text?","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(id : Int64, msid : Int64, text : String) : Bool | Nil","args_html":"(id : Int64, msid : Int64, text : String) : Bool | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1671,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1671"},"def":{"name":"spamming_text?","args":[{"name":"id","external_name":"id","restriction":"Int64"},{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if spam = @spam_handler\nelse\n  return\nend\nif spam.spammy?(id, spam.calculate_spam_score_text(text))\n  relay_to_one(msid, id, @locale.replies.spamming)\n  true\nend\n"}},{"html_id":"spoil_messages(msid:Int64,user_id:Int64,debug_enabled:Bool|Nil,input:InputMedia):Bool|Nil-instance-method","name":"spoil_messages","doc":"Spoils the given media message for all receivers by editing the media with the given input.\n\nReturns true on success, false or nil otherwise.","summary":"<p>Spoils the given media message for all receivers by editing the media with the given input.</p>","abstract":false,"args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"user_id","external_name":"user_id","restriction":"Int64"},{"name":"debug_enabled","external_name":"debug_enabled","restriction":"Bool | ::Nil"},{"name":"input","external_name":"input","restriction":"InputMedia"}],"args_string":"(msid : Int64, user_id : Int64, debug_enabled : Bool | Nil, input : InputMedia) : Bool | Nil","args_html":"(msid : Int64, user_id : Int64, debug_enabled : Bool | Nil, input : InputMedia) : Bool | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":2419,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L2419"},"def":{"name":"spoil_messages","args":[{"name":"msid","external_name":"msid","restriction":"Int64"},{"name":"user_id","external_name":"user_id","restriction":"Int64"},{"name":"debug_enabled","external_name":"debug_enabled","restriction":"Bool | ::Nil"},{"name":"input","external_name":"input","restriction":"InputMedia"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"if reply_msids = @history.get_all_msids(msid)\n  if !debug_enabled\n    reply_msids.delete(user_id)\n  end\n  reply_msids.each do |receiver_id, receiver_msid|\n    begin\n      edit_message_media(receiver_id, input, receiver_msid)\n    rescue Tourmaline::Error::MessageCantBeEdited\n    rescue Tourmaline::Error::MessageNotModified\n      return false\n    end\n  end\n  return true\nend"}},{"html_id":"spoiler_command(ctx:CommandHandler::Context):Nil-instance-method","name":"spoiler_command","doc":"Adds a spoiler overlay to a media message when replied to.\n\nChecks for the following permissions: `spoiler`\n\nIf `spoiler`, allows the user to add a spoiler to a relayed media message.","summary":"<p>Adds a spoiler overlay to a media message when replied to.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1168,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1168"},"def":{"name":"spoiler_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :spoiler)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif reply = message.reply_message\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.no_reply)\nend\nif reply.forward_date\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif reply_user = database.get_user(@history.get_sender_id(reply.message_id))\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.not_in_cache)\nend\nif (reply_info = reply.from) && (user.id == reply_info.id)\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nuser.set_active\n@database.modify_user(user)\nif media = reply.photo.last?\n  input = InputMediaPhoto.new(media.file_id, caption: reply.caption, caption_entities: reply.caption_entities)\nelse\n  if media = reply.video\n    input = InputMediaVideo.new(media.file_id, caption: reply.caption, caption_entities: reply.caption_entities)\n  else\n    if media = reply.animation\n      input = InputMediaAnimation.new(media.file_id, caption: reply.caption, caption_entities: reply.caption_entities)\n    else\n      return relay_to_one(message.message_id, user.id, @locale.replies.fail)\n    end\n  end\nend\nif reply.has_media_spoiler?\n  if spoil_messages(reply.message_id, reply_user.id, reply_user.debug_enabled, input)\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.fail)\n  end\n  log_output(@locale.logs.unspoiled, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name, \"msid\" => reply.message_id.to_s})\nelse\n  input.has_spoiler = true\n  if spoil_messages(reply.message_id, reply_user.id, reply_user.debug_enabled, input)\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.fail)\n  end\n  log_output(@locale.logs.spoiled, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name, \"msid\" => reply.message_id.to_s})\nend\nrelay_to_one(message.message_id, user.id, @locale.replies.success)\n"}},{"html_id":"start_command(ctx:CommandHandler::Context):Nil-instance-method","name":"start_command","doc":"User starts the bot and begins receiving messages.\n\nIf the user is not in the database, this will add the user to it\n\nIf blacklisted or joined, this will not allow them to rejoin\n\nLeft users can rejoin the bot with this command","summary":"<p>User starts the bot and begins receiving messages.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":306,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L306"},"def":{"name":"start_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"if (message = ctx.message) && (info = message.from)\nelse\n  return\nend\nif user = database.get_user(info.id)\n  if user.blacklisted?\n    relay_to_one(nil, user.id, @locale.replies.blacklisted, {\"contact\" => Format.format_contact_reply(@blacklist_contact, @locale), \"reason\" => Format.format_reason_reply(user.blacklist_reason, @locale)})\n  else\n    if user.left?\n      user.rejoin\n      user.update_names(info.username, info.full_name)\n      user.set_active\n      @database.modify_user(user)\n      relay_to_one(message.message_id, user.id, @locale.replies.rejoined)\n      log_output(@locale.logs.rejoined, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name})\n    else\n      user.update_names(info.username, info.full_name)\n      user.set_active\n      @database.modify_user(user)\n      relay_to_one(message.message_id, user.id, @locale.replies.already_in_chat)\n    end\n  end\nelse\n  if @registration_open\n  else\n    return relay_to_one(nil, info.id, @locale.replies.registration_closed)\n  end\n  if database.no_users?\n    user = database.add_user(info.id, info.username, info.full_name, @access.max_rank)\n  else\n    user = database.add_user(info.id, info.username, info.full_name, @default_rank)\n  end\n  if motd = @database.get_motd\n    relay_to_one(nil, info.id, motd)\n  end\n  if @pseudonymous\n    relay_to_one(message.message_id, info.id, @locale.replies.joined_pseudonym)\n  else\n    relay_to_one(message.message_id, info.id, @locale.replies.joined)\n  end\n  log_output(@locale.logs.joined, {\"id\" => info.id.to_s, \"name\" => info.username || info.full_name})\nend\n"}},{"html_id":"stop_command(ctx:CommandHandler::Context):Nil-instance-method","name":"stop_command","doc":"Stops the bot for the user.\n\nThis will set the user status to left, meaning the user will not receive any further messages.","summary":"<p>Stops the bot for the user.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":355,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L355"},"def":{"name":"stop_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"if (message = ctx.message) && (info = message.from)\nelse\n  return\nend\nif user = database.get_user(info.id)\nelse\n  return relay_to_one(nil, info.id, @locale.replies.not_in_chat)\nend\nif (user = database.get_user(info.id)) && (!user.left?)\n  user.update_names(info.username, info.full_name)\n  user.set_active\n  user.set_left\n  @database.modify_user(user)\n  relay_to_one(message.message_id, user.id, @locale.replies.left)\n  log_output(@locale.logs.left, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name})\nend\n"}},{"html_id":"tasks:Array(Tasker::Task)-instance-method","name":"tasks","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":16,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L16"},"def":{"name":"tasks","return_type":"Array(Tasker::Task)","visibility":"Public","body":"@tasks"}},{"html_id":"toggle_debug_command(ctx:CommandHandler::Context):Nil-instance-method","name":"toggle_debug_command","doc":"Toggle the user's toggle_debug attribute.","summary":"<p>Toggle the user's toggle_debug attribute.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":588,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L588"},"def":{"name":"toggle_debug_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nuser.set_active\nuser.toggle_debug\n@database.modify_user(user)\nrelay_to_one(nil, user.id, @locale.replies.toggle_debug, {\"toggle\" => user.debug_enabled ? locale.toggle[1] : locale.toggle[0]})\n"}},{"html_id":"toggle_karma_command(ctx:CommandHandler::Context):Nil-instance-method","name":"toggle_karma_command","doc":"Toggle the user's hide_karma attribute.","summary":"<p>Toggle the user's hide_karma attribute.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":574,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L574"},"def":{"name":"toggle_karma_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nuser.set_active\nuser.toggle_karma\n@database.modify_user(user)\nrelay_to_one(nil, user.id, @locale.replies.toggle_karma, {\"toggle\" => !user.hide_karma ? locale.toggle[1] : locale.toggle[0]})\n"}},{"html_id":"tripcode_command(ctx:CommandHandler::Context):Nil-instance-method","name":"tripcode_command","doc":"Set/modify/view the user's tripcode.","summary":"<p>Set/modify/view the user's tripcode.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":642,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L642"},"def":{"name":"tripcode_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nuser.set_active\n@database.modify_user(user)\nif arg = Format.get_arg(ctx.message.text)\n  if ((!((index = arg.index('#')) && (0 < index && index < (arg.size - 1)))) || (arg.includes?('\\n'))) || arg.size > 30\n    return relay_to_one(message.message_id, user.id, @locale.replies.invalid_tripcode_format)\n  end\n  user.set_tripcode(arg)\n  @database.modify_user(user)\n  name, tripcode = Format.generate_tripcode(arg, @tripcode_salt)\n  relay_to_one(message.message_id, user.id, @locale.replies.tripcode_set, {\"name\" => name, \"tripcode\" => tripcode})\nelse\n  tripcode = Format.format_tripcode_reply(user.tripcode, @locale)\n  relay_to_one(message.message_id, user.id, @locale.replies.tripcode_info, {\"tripcode\" => tripcode})\nend\n"}},{"html_id":"tripcode_salt:String-instance-method","name":"tripcode_salt","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":42,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L42"},"def":{"name":"tripcode_salt","return_type":"String","visibility":"Public","body":"@tripcode_salt"}},{"html_id":"uncooldown_command(ctx:CommandHandler::Context):Nil-instance-method","name":"uncooldown_command","doc":"Removes a cooldown and warning from a user if the user is in cooldown.\n\nChecks for the following permissions: `uncooldown`\n\nIf `uncooldown`, allows the user to uncooldown another user","summary":"<p>Removes a cooldown and warning from a user if the user is in cooldown.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":966,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L966"},"def":{"name":"uncooldown_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :uncooldown)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif arg = Format.get_arg(message.text)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.missing_args)\nend\nuser.set_active\n@database.modify_user(user)\nif arg.size < 5\n  if uncooldown_user = database.get_user_by_oid(arg)\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.no_user_oid_found)\n  end\nelse\n  if uncooldown_user = database.get_user_by_name(arg)\n  else\n    return relay_to_one(message.message_id, user.id, @locale.replies.no_user_found)\n  end\nend\nif !(cooldown_until = uncooldown_user.cooldown_until)\n  return relay_to_one(message.message_id, user.id, @locale.replies.not_in_cooldown)\nend\nuncooldown_user.remove_cooldown(true)\nuncooldown_user.remove_warning(1, warn_expire_hours)\n@database.modify_user(uncooldown_user)\nlog_output(@locale.logs.removed_cooldown, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name, \"oid\" => uncooldown_user.get_obfuscated_id, \"cooldown_until\" => cooldown_until.to_s})\nrelay_to_one(message.message_id, user.id, @locale.replies.success)\n"}},{"html_id":"unpin_command(ctx:CommandHandler::Context):Nil-instance-method","name":"unpin_command","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1307,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1307"},"def":{"name":"unpin_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :unpin)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nuser.set_active\n@database.modify_user(user)\n@database.get_prioritized_users.each do |user_id|\n  unpin_chat_message(user_id)\nend\nlog_output(@locale.logs.unpinned, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name})\nrelay_to_one(message.message_id, user.id, @locale.replies.success)\n"}},{"html_id":"upvote_command(ctx:CommandHandler::Context):Nil-instance-method","name":"upvote_command","doc":"Upvotes a message.\n\nChecks for the following permissions: `upvote`\n\nIf `upvote`, allows the user to upvote a message","summary":"<p>Upvotes a message.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":492,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L492"},"def":{"name":"upvote_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif (history_with_karma = @history) && history_with_karma.is_a?(HistoryFull | HistoryRatings | DatabaseHistory)\nelse\n  return\nend\nif @access.authorized?(user.rank, :upvote)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif reply = message.reply_message\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.no_reply)\nend\nif reply_user = database.get_user(history_with_karma.get_sender_id(reply.message_id))\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.not_in_cache)\nend\nif (spam = @spam_handler) && (spam.spammy_upvote?(user.id, @upvote_limit_interval))\n  return relay_to_one(message.message_id, user.id, @locale.replies.upvote_spam)\nend\nuser.set_active\n@database.modify_user(user)\nif (history_with_karma.get_sender_id(reply.message_id)) == user.id\n  return relay_to_one(message.message_id, user.id, @locale.replies.upvoted_own_message)\nend\nif !(history_with_karma.add_rating(reply.message_id, user.id))\n  return relay_to_one(message.message_id, user.id, @locale.replies.already_voted)\nend\nreply_user.increment_karma\n@database.modify_user(reply_user)\nrelay_to_one(message.message_id, user.id, @locale.replies.gave_upvote)\nif !reply_user.hide_karma\n  relay_to_one(history_with_karma.get_msid(reply.message_id, reply_user.id), reply_user.id, @locale.replies.got_upvote)\nend\n"}},{"html_id":"upvote_limit_interval:Int32-instance-method","name":"upvote_limit_interval","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":38,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L38"},"def":{"name":"upvote_limit_interval","return_type":"Int32","visibility":"Public","body":"@upvote_limit_interval"}},{"html_id":"user_info(user:Database::User,msid:Int64):Nil-instance-method","name":"user_info","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"args_string":"(user : Database::User, msid : Int64) : Nil","args_html":"(user : <a href=\"Database/User.html\">Database::User</a>, msid : Int64) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":409,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L409"},"def":{"name":"user_info","args":[{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"msid","external_name":"msid","restriction":"Int64"}],"return_type":"Nil","visibility":"Public","body":"user.set_active\n@database.modify_user(user)\nif !@karma_levels.empty?\n  current_level = \"\"\n  @karma_levels.each_cons_pair do |lower, higher|\n    if lower[0] <= user.karma && user.karma < higher[0]\n      current_level = lower[1]\n      break\n    end\n  end\n  if (current_level == \"\") && user.karma >= @karma_levels.last_key\n    current_level = @karma_levels[@karma_levels.last_key]\n  else\n    if user.karma < @karma_levels.first_key\n      current_level = \"???\"\n    end\n  end\nelse\n  current_level = \"\"\nend\nuser.remove_cooldown\ncooldown_until = Format.format_cooldown_until(user.cooldown_until, @locale)\nrelay_to_one(msid, user.id, @locale.replies.user_info, {\"oid\" => user.get_obfuscated_id.to_s, \"username\" => user.get_formatted_name, \"rank_val\" => user.rank.to_s, \"rank\" => @access.rank_name(user.rank), \"karma\" => user.karma.to_s, \"karma_level\" => current_level.empty? ? nil : \"(#{current_level})\", \"warnings\" => user.warnings.to_s, \"warn_expiry\" => Format.format_warn_expiry(user.warn_expiry, @locale), \"smiley\" => Format.format_smiley(user.warnings, @smileys), \"cooldown_until\" => cooldown_until})\n"}},{"html_id":"users_command(ctx:CommandHandler::Context):Nil-instance-method","name":"users_command","doc":"Return a message containing the number of users in the bot.\n\nChecks for the following permissions: `users`\n\nIf the user does not have the \"users\" permission, show the total numbers of users.\nOtherwise, return a message containing the number of joined, left, and blacklisted users.","summary":"<p>Return a message containing the number of users in the bot.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":455,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L455"},"def":{"name":"users_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nuser.set_active\n@database.modify_user(user)\ncounts = @database.get_user_counts\nif @access.authorized?(user.rank, :users)\n  relay_to_one(nil, user.id, @locale.replies.user_count_full, {\"joined\" => (counts[:total] - counts[:left]).to_s, \"left\" => counts[:left].to_s, \"blacklisted\" => counts[:blacklisted].to_s, \"total\" => counts[:total].to_s})\nelse\n  relay_to_one(nil, user.id, @locale.replies.user_count, {\"total\" => counts[:total].to_s})\nend\n"}},{"html_id":"valid_codepoints:Array(Range(Int32,Int32))-instance-method","name":"valid_codepoints","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":52,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L52"},"def":{"name":"valid_codepoints","return_type":"Array(Range(Int32, Int32))","visibility":"Public","body":"@valid_codepoints"}},{"html_id":"validate_r9k_media(file_id:String|Nil,user:Database::User,message:Tourmaline::Message):String|Nil-instance-method","name":"validate_r9k_media","abstract":false,"args":[{"name":"file_id","external_name":"file_id","restriction":"String | ::Nil"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"args_string":"(file_id : String | Nil, user : Database::User, message : Tourmaline::Message) : String | Nil","args_html":"(file_id : String | Nil, user : <a href=\"Database/User.html\">Database::User</a>, message : Tourmaline::Message) : String | Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1469,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1469"},"def":{"name":"validate_r9k_media","args":[{"name":"file_id","external_name":"file_id","restriction":"String | ::Nil"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"return_type":"String | ::Nil","visibility":"Public","body":"if file_id\nelse\n  return\nend\nif Robot9000.unoriginal_media?(@database.db, file_id)\n  if @r9k_cooldown > 0 && @r9k_warn\n    duration = Format.format_timespan(user.cooldown_and_warn(@r9k_cooldown, @warn_expire_hours, @karma_warn_penalty), @locale.time_units)\n    relay_to_one(message.message_id, user.id, @locale.replies.r9k_cooldown, {\"duration\" => duration})\n    @database.modify_user(user)\n  else\n    if @r9k_cooldown > 0\n      duration = Format.format_timespan(user.cooldown(@r9k_cooldown), @locale.time_units)\n      relay_to_one(message.message_id, user.id, @locale.replies.r9k_cooldown, {\"duration\" => duration})\n      @database.modify_user(user)\n    else\n      if @r9k_warn\n        duration = Format.format_timespan(user.cooldown_and_warn(cooldown_time_begin, cooldown_time_linear_m, cooldown_time_linear_b, warn_expire_hours, karma_warn_penalty), @locale.time_units)\n        relay_to_one(message.message_id, user.id, @locale.replies.r9k_cooldown, {\"duration\" => duration})\n        @database.modify_user(user)\n      else\n        relay_to_one(message.message_id, user.id, @locale.replies.unoriginal_message)\n      end\n    end\n  end\n  return\nend\nfile_id\n"}},{"html_id":"validate_r9k_text(text:String,user:Database::User,message:Tourmaline::Message):Tuple(String|Nil,String|Nil)-instance-method","name":"validate_r9k_text","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"args_string":"(text : String, user : Database::User, message : Tourmaline::Message) : Tuple(String | Nil, String | Nil)","args_html":"(text : String, user : <a href=\"Database/User.html\">Database::User</a>, message : Tourmaline::Message) : Tuple(String | Nil, String | Nil)","location":{"filename":"src/privateparlor/telegram.cr","line_number":1413,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1413"},"def":{"name":"validate_r9k_text","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"user","external_name":"user","restriction":"Database::User"},{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"return_type":"Tuple(String | ::Nil, String | ::Nil)","visibility":"Public","body":"if (Format.contains_html?(text)) || (!(Robot9000.allow_text?(text, @valid_codepoints)))\n  relay_to_one(message.message_id, user.id, @locale.replies.rejected_message)\n  return {nil, nil}\nend\nstripped_text = Robot9000.strip_text(text, message.text_entities.keys)\nif Robot9000.unoriginal_text?(@database.db, stripped_text)\n  if @r9k_cooldown > 0 && @r9k_warn\n    duration = Format.format_timespan(user.cooldown_and_warn(@r9k_cooldown, @warn_expire_hours, @karma_warn_penalty), @locale.time_units)\n    relay_to_one(message.message_id, user.id, @locale.replies.r9k_cooldown, {\"duration\" => duration})\n    @database.modify_user(user)\n  else\n    if @r9k_cooldown > 0\n      duration = Format.format_timespan(user.cooldown(@r9k_cooldown), @locale.time_units)\n      relay_to_one(message.message_id, user.id, @locale.replies.r9k_cooldown, {\"duration\" => duration})\n      @database.modify_user(user)\n    else\n      if @r9k_warn\n        duration = Format.format_timespan(user.cooldown_and_warn(cooldown_time_begin, cooldown_time_linear_m, cooldown_time_linear_b, warn_expire_hours, karma_warn_penalty), @locale.time_units)\n        relay_to_one(message.message_id, user.id, @locale.replies.r9k_cooldown, {\"duration\" => duration})\n        @database.modify_user(user)\n      else\n        relay_to_one(message.message_id, user.id, @locale.replies.unoriginal_message)\n      end\n    end\n  end\n  return {nil, nil}\nend\ntext = Format.strip_format(text, message.text_entities.keys, @entity_types, @linked_network)\nif text.starts_with?('/')\n  text = handle_embedded_command(text, user, message.message_id)\nend\nif text\nelse\n  return {nil, nil}\nend\nreturn {text, stripped_text}\n"}},{"html_id":"version_command(ctx:CommandHandler::Context):Nil-instance-method","name":"version_command","doc":"Returns a message containing the progam's version.","summary":"<p>Returns a message containing the progam's version.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":477,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L477"},"def":{"name":"version_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nuser.set_active\n@database.modify_user(user)\nrelay_to_one(message.message_id, user.id, Format.format_version)\n"}},{"html_id":"warn_command(ctx:CommandHandler::Context):Nil-instance-method","name":"warn_command","doc":"Warns a message without deleting it. Gives the user who sent the message a warning and a cooldown.\n\nChecks for the following permissions: `warn`\n\nIf `warn`, allows the user to warn a message","summary":"<p>Warns a message without deleting it.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":860,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L860"},"def":{"name":"warn_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif (history_with_warnings = @history) && history_with_warnings.is_a?(HistoryFull | HistoryWarnings | DatabaseHistory)\nelse\n  return\nend\nif @access.authorized?(user.rank, :warn)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif reply = message.reply_message\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.no_reply)\nend\nif reply_user = database.get_user(history_with_warnings.get_sender_id(reply.message_id))\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.not_in_cache)\nend\nif (history_with_warnings.get_warning(reply.message_id)) == false\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.already_warned)\nend\nuser.set_active\n@database.modify_user(user)\nreason = Format.get_arg(message.text)\nduration = Format.format_timespan(reply_user.cooldown_and_warn(cooldown_time_begin, cooldown_time_linear_m, cooldown_time_linear_b, warn_expire_hours, karma_warn_penalty), @locale.time_units)\nhistory_with_warnings.add_warning(reply.message_id)\n@database.modify_user(reply_user)\ncached_msid = history_with_warnings.get_origin_msid(reply.message_id)\nrelay_to_one(cached_msid, reply_user.id, @locale.replies.cooldown_given, {\"reason\" => Format.format_reason_reply(reason, @locale), \"duration\" => duration})\nlog_output(@locale.logs.warned, {\"id\" => user.id.to_s, \"name\" => user.get_formatted_name, \"oid\" => reply_user.get_obfuscated_id, \"duration\" => duration, \"reason\" => Format.format_reason_log(reason, @locale)})\nrelay_to_one(message.message_id, user.id, @locale.replies.success)\n"}},{"html_id":"warn_expire_hours:Int32-instance-method","name":"warn_expire_hours","abstract":false,"location":{"filename":"src/privateparlor/telegram.cr","line_number":23,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L23"},"def":{"name":"warn_expire_hours","return_type":"Int32","visibility":"Public","body":"@warn_expire_hours"}},{"html_id":"whitelist_command(ctx:CommandHandler::Context):Nil-instance-method","name":"whitelist_command","doc":"Whitelists a user, allowing the user to join the chat. Only applicable if registration is closed\n\nChecks for the following permissions: `whitelist`\n\nIf `whitelist`, allows the user to whitelist another user by user ID.","summary":"<p>Whitelists a user, allowing the user to join the chat.</p>","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"args_string":"(ctx : CommandHandler::Context) : Nil","args_html":"(ctx : CommandHandler::Context) : Nil","location":{"filename":"src/privateparlor/telegram.cr","line_number":1127,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/telegram.cr#L1127"},"def":{"name":"whitelist_command","args":[{"name":"ctx","external_name":"ctx","restriction":"CommandHandler::Context"}],"return_type":"Nil","visibility":"Public","body":"message, user = preliminary_message_check(ctx)\nif message && user\nelse\n  return\nend\nif @access.authorized?(user.rank, :whitelist)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif @registration_open\n  return relay_to_one(message.message_id, user.id, @locale.replies.fail)\nend\nif (arg = Format.get_arg(message.text)) && (arg = arg.to_i64?)\nelse\n  return relay_to_one(message.message_id, user.id, @locale.replies.missing_args)\nend\nif @database.get_user(arg)\n  return relay_to_one(message.message_id, user.id, @locale.replies.already_whitelisted)\nend\nuser.set_active\n@database.modify_user(user)\ndatabase.add_user(arg, \"\", \"WHITELISTED\", @default_rank)\nrelay_to_one(nil, arg, @locale.replies.added_to_chat)\nlog_output(@locale.logs.whitelisted, {\"id\" => arg.to_s, \"invoker\" => user.get_formatted_name})\nrelay_to_one(message.message_id, user.id, @locale.replies.success)\n"}}]},{"html_id":"privateparlor/QueuedMessage","path":"QueuedMessage.html","kind":"class","full_name":"QueuedMessage","name":"QueuedMessage","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/queue/queued_message.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/queued_message.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"constructors":[{"html_id":"new(origin_msid:Int64|Array(Int64)|Nil,sender:Int64|Nil,receiver:Int64,reply_to:Int64|Nil,function:MessageProc)-class-method","name":"new","doc":"Creates an instance of `QueuedMessage`.\n\n## Arguments:\n\n`hash`\n:     a hashcode that refers to the associated `MessageGroup` stored in the message history.\n\n`sender`\n:     the ID of the user who sent this message.\n\n`receiver_id`\n:     the ID of the user who will receive this message.\n\n`reply_msid`\n:     the MSID of a message to reply to. May be `nil` if this message isn't a reply.\n\n`function`\n:     a proc that points to a Tourmaline CoreMethod send function and takes a user ID and MSID as its arguments","summary":"<p>Creates an instance of <code><a href=\"QueuedMessage.html\">QueuedMessage</a></code>.</p>","abstract":false,"args":[{"name":"origin_msid","external_name":"origin_msid","restriction":"Int64 | Array(Int64) | Nil"},{"name":"sender","external_name":"sender","restriction":"Int64 | Nil"},{"name":"receiver","external_name":"receiver","restriction":"Int64"},{"name":"reply_to","external_name":"reply_to","restriction":"Int64 | Nil"},{"name":"function","external_name":"function","restriction":"MessageProc"}],"args_string":"(origin_msid : Int64 | Array(Int64) | Nil, sender : Int64 | Nil, receiver : Int64, reply_to : Int64 | Nil, function : MessageProc)","args_html":"(origin_msid : Int64 | Array(Int64) | Nil, sender : Int64 | Nil, receiver : Int64, reply_to : Int64 | Nil, function : <a href=\"MessageProc.html\">MessageProc</a>)","location":{"filename":"src/privateparlor/queue/queued_message.cr","line_number":26,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/queued_message.cr#L26"},"def":{"name":"new","args":[{"name":"origin_msid","external_name":"origin_msid","restriction":"Int64 | Array(Int64) | Nil"},{"name":"sender","external_name":"sender","restriction":"Int64 | Nil"},{"name":"receiver","external_name":"receiver","restriction":"Int64"},{"name":"reply_to","external_name":"reply_to","restriction":"Int64 | Nil"},{"name":"function","external_name":"function","restriction":"MessageProc"}],"visibility":"Public","body":"_ = allocate\n_.initialize(origin_msid, sender, receiver, reply_to, function)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"function:MessageProc-instance-method","name":"function","abstract":false,"location":{"filename":"src/privateparlor/queue/queued_message.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/queued_message.cr#L6"},"def":{"name":"function","return_type":"MessageProc","visibility":"Public","body":"@function"}},{"html_id":"origin_msid:Int64|Array(Int64)|Nil-instance-method","name":"origin_msid","abstract":false,"location":{"filename":"src/privateparlor/queue/queued_message.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/queued_message.cr#L2"},"def":{"name":"origin_msid","return_type":"Int64 | Array(Int64) | Nil","visibility":"Public","body":"@origin_msid"}},{"html_id":"receiver:Int64-instance-method","name":"receiver","abstract":false,"location":{"filename":"src/privateparlor/queue/queued_message.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/queued_message.cr#L4"},"def":{"name":"receiver","return_type":"Int64","visibility":"Public","body":"@receiver"}},{"html_id":"reply_to:Int64|Nil-instance-method","name":"reply_to","abstract":false,"location":{"filename":"src/privateparlor/queue/queued_message.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/queued_message.cr#L5"},"def":{"name":"reply_to","return_type":"Int64 | Nil","visibility":"Public","body":"@reply_to"}},{"html_id":"sender:Int64|Nil-instance-method","name":"sender","abstract":false,"location":{"filename":"src/privateparlor/queue/queued_message.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/queue/queued_message.cr#L3"},"def":{"name":"sender","return_type":"Int64 | Nil","visibility":"Public","body":"@sender"}}]},{"html_id":"privateparlor/Rank","path":"Rank.html","kind":"class","full_name":"Rank","name":"Rank","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/rank/rank.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/rank.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"constructors":[{"html_id":"new(name:String,command_permissions:Set(CommandPermissions),message_permissions:Set(MessagePermissions))-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"::String"},{"name":"command_permissions","external_name":"command_permissions","restriction":"::Set(::CommandPermissions)"},{"name":"message_permissions","external_name":"message_permissions","restriction":"::Set(::MessagePermissions)"}],"args_string":"(name : String, command_permissions : Set(CommandPermissions), message_permissions : Set(MessagePermissions))","args_html":"(name : String, command_permissions : Set(<a href=\"CommandPermissions.html\">CommandPermissions</a>), message_permissions : Set(<a href=\"MessagePermissions.html\">MessagePermissions</a>))","location":{"filename":"src/privateparlor/rank/rank.cr","line_number":8,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/rank.cr#L8"},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":"::String"},{"name":"command_permissions","external_name":"command_permissions","restriction":"::Set(::CommandPermissions)"},{"name":"message_permissions","external_name":"message_permissions","restriction":"::Set(::MessagePermissions)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, command_permissions, message_permissions)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/privateparlor/rank/rank.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/rank.cr#L2"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"command_permissions:Set(CommandPermissions)-instance-method","name":"command_permissions","abstract":false,"location":{"filename":"src/privateparlor/rank/rank.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/rank.cr#L5"},"def":{"name":"command_permissions","return_type":"Set(CommandPermissions)","visibility":"Public","body":"@command_permissions"}},{"html_id":"message_permissions:Set(MessagePermissions)-instance-method","name":"message_permissions","abstract":false,"location":{"filename":"src/privateparlor/rank/rank.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/rank.cr#L6"},"def":{"name":"message_permissions","return_type":"Set(MessagePermissions)","visibility":"Public","body":"@message_permissions"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/privateparlor/rank/rank.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/rank/rank.cr#L4"},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}}]},{"html_id":"privateparlor/Replies","path":"Replies.html","kind":"class","full_name":"Replies","name":"Replies","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/locale/replies.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/privateparlor/locale/replies.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L2"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"added_to_chat:String-instance-method","name":"added_to_chat","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":23,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L23"},"def":{"name":"added_to_chat","return_type":"String","visibility":"Public","body":"@added_to_chat"}},{"html_id":"already_in_chat:String-instance-method","name":"already_in_chat","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":17,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L17"},"def":{"name":"already_in_chat","return_type":"String","visibility":"Public","body":"@already_in_chat"}},{"html_id":"already_voted:String-instance-method","name":"already_voted","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":95,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L95"},"def":{"name":"already_voted","return_type":"String","visibility":"Public","body":"@already_voted"}},{"html_id":"already_warned:String-instance-method","name":"already_warned","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":110,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L110"},"def":{"name":"already_warned","return_type":"String","visibility":"Public","body":"@already_warned"}},{"html_id":"already_whitelisted:String-instance-method","name":"already_whitelisted","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":26,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L26"},"def":{"name":"already_whitelisted","return_type":"String","visibility":"Public","body":"@already_whitelisted"}},{"html_id":"blacklist_contact:String-instance-method","name":"blacklist_contact","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":191,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L191"},"def":{"name":"blacklist_contact","return_type":"String","visibility":"Public","body":"@blacklist_contact"}},{"html_id":"blacklisted:String-instance-method","name":"blacklisted","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":188,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L188"},"def":{"name":"blacklisted","return_type":"String","visibility":"Public","body":"@blacklisted"}},{"html_id":"command_disabled:String-instance-method","name":"command_disabled","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":44,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L44"},"def":{"name":"command_disabled","return_type":"String","visibility":"Public","body":"@command_disabled"}},{"html_id":"cooldown_false:String-instance-method","name":"cooldown_false","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":155,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L155"},"def":{"name":"cooldown_false","return_type":"String","visibility":"Public","body":"@cooldown_false"}},{"html_id":"cooldown_given:String-instance-method","name":"cooldown_given","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":173,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L173"},"def":{"name":"cooldown_given","return_type":"String","visibility":"Public","body":"@cooldown_given"}},{"html_id":"cooldown_true:String-instance-method","name":"cooldown_true","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":152,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L152"},"def":{"name":"cooldown_true","return_type":"String","visibility":"Public","body":"@cooldown_true"}},{"html_id":"deanon_poll:String-instance-method","name":"deanon_poll","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":38,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L38"},"def":{"name":"deanon_poll","return_type":"String","visibility":"Public","body":"@deanon_poll"}},{"html_id":"downvote_spam:String-instance-method","name":"downvote_spam","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":128,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L128"},"def":{"name":"downvote_spam","return_type":"String","visibility":"Public","body":"@downvote_spam"}},{"html_id":"downvoted_own_message:String-instance-method","name":"downvoted_own_message","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":104,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L104"},"def":{"name":"downvoted_own_message","return_type":"String","visibility":"Public","body":"@downvoted_own_message"}},{"html_id":"fail:String-instance-method","name":"fail","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":203,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L203"},"def":{"name":"fail","return_type":"String","visibility":"Public","body":"@fail"}},{"html_id":"gave_downvote:String-instance-method","name":"gave_downvote","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":98,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L98"},"def":{"name":"gave_downvote","return_type":"String","visibility":"Public","body":"@gave_downvote"}},{"html_id":"gave_upvote:String-instance-method","name":"gave_upvote","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":86,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L86"},"def":{"name":"gave_upvote","return_type":"String","visibility":"Public","body":"@gave_upvote"}},{"html_id":"got_downvote:String-instance-method","name":"got_downvote","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":101,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L101"},"def":{"name":"got_downvote","return_type":"String","visibility":"Public","body":"@got_downvote"}},{"html_id":"got_upvote:String-instance-method","name":"got_upvote","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":89,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L89"},"def":{"name":"got_upvote","return_type":"String","visibility":"Public","body":"@got_upvote"}},{"html_id":"help_header:String-instance-method","name":"help_header","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":71,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L71"},"def":{"name":"help_header","return_type":"String","visibility":"Public","body":"@help_header"}},{"html_id":"help_rank_commands:String-instance-method","name":"help_rank_commands","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":74,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L74"},"def":{"name":"help_rank_commands","return_type":"String","visibility":"Public","body":"@help_rank_commands"}},{"html_id":"help_reply_commands:String-instance-method","name":"help_reply_commands","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":77,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L77"},"def":{"name":"help_reply_commands","return_type":"String","visibility":"Public","body":"@help_reply_commands"}},{"html_id":"inactive:String-instance-method","name":"inactive","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":197,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L197"},"def":{"name":"inactive","return_type":"String","visibility":"Public","body":"@inactive"}},{"html_id":"info_warning:String-instance-method","name":"info_warning","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":146,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L146"},"def":{"name":"info_warning","return_type":"String","visibility":"Public","body":"@info_warning"}},{"html_id":"invalid_tripcode_format:String-instance-method","name":"invalid_tripcode_format","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":131,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L131"},"def":{"name":"invalid_tripcode_format","return_type":"String","visibility":"Public","body":"@invalid_tripcode_format"}},{"html_id":"joined:String-instance-method","name":"joined","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L5"},"def":{"name":"joined","return_type":"String","visibility":"Public","body":"@joined"}},{"html_id":"joined_pseudonym:String-instance-method","name":"joined_pseudonym","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":8,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L8"},"def":{"name":"joined_pseudonym","return_type":"String","visibility":"Public","body":"@joined_pseudonym"}},{"html_id":"karma_info:String-instance-method","name":"karma_info","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":107,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L107"},"def":{"name":"karma_info","return_type":"String","visibility":"Public","body":"@karma_info"}},{"html_id":"left:String-instance-method","name":"left","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":14,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L14"},"def":{"name":"left","return_type":"String","visibility":"Public","body":"@left"}},{"html_id":"media_disabled:String-instance-method","name":"media_disabled","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":47,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L47"},"def":{"name":"media_disabled","return_type":"String","visibility":"Public","body":"@media_disabled"}},{"html_id":"media_limit:String-instance-method","name":"media_limit","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":185,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L185"},"def":{"name":"media_limit","return_type":"String","visibility":"Public","body":"@media_limit"}},{"html_id":"message_deleted:String-instance-method","name":"message_deleted","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":164,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L164"},"def":{"name":"message_deleted","return_type":"String","visibility":"Public","body":"@message_deleted"}},{"html_id":"message_removed:String-instance-method","name":"message_removed","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":167,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L167"},"def":{"name":"message_removed","return_type":"String","visibility":"Public","body":"@message_removed"}},{"html_id":"missing_args:String-instance-method","name":"missing_args","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":41,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L41"},"def":{"name":"missing_args","return_type":"String","visibility":"Public","body":"@missing_args"}},{"html_id":"no_rank_found:String-instance-method","name":"no_rank_found","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":65,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L65"},"def":{"name":"no_rank_found","return_type":"String","visibility":"Public","body":"@no_rank_found"}},{"html_id":"no_reply:String-instance-method","name":"no_reply","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":50,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L50"},"def":{"name":"no_reply","return_type":"String","visibility":"Public","body":"@no_reply"}},{"html_id":"no_tripcode_set:String-instance-method","name":"no_tripcode_set","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":56,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L56"},"def":{"name":"no_tripcode_set","return_type":"String","visibility":"Public","body":"@no_tripcode_set"}},{"html_id":"no_user_found:String-instance-method","name":"no_user_found","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":59,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L59"},"def":{"name":"no_user_found","return_type":"String","visibility":"Public","body":"@no_user_found"}},{"html_id":"no_user_oid_found:String-instance-method","name":"no_user_oid_found","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":62,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L62"},"def":{"name":"no_user_oid_found","return_type":"String","visibility":"Public","body":"@no_user_oid_found"}},{"html_id":"not_in_cache:String-instance-method","name":"not_in_cache","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":53,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L53"},"def":{"name":"not_in_cache","return_type":"String","visibility":"Public","body":"@not_in_cache"}},{"html_id":"not_in_chat:String-instance-method","name":"not_in_chat","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":29,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L29"},"def":{"name":"not_in_chat","return_type":"String","visibility":"Public","body":"@not_in_chat"}},{"html_id":"not_in_cooldown:String-instance-method","name":"not_in_cooldown","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":32,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L32"},"def":{"name":"not_in_cooldown","return_type":"String","visibility":"Public","body":"@not_in_cooldown"}},{"html_id":"on_cooldown:String-instance-method","name":"on_cooldown","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":176,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L176"},"def":{"name":"on_cooldown","return_type":"String","visibility":"Public","body":"@on_cooldown"}},{"html_id":"private_sign:String-instance-method","name":"private_sign","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":113,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L113"},"def":{"name":"private_sign","return_type":"String","visibility":"Public","body":"@private_sign"}},{"html_id":"promoted:String-instance-method","name":"promoted","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":68,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L68"},"def":{"name":"promoted","return_type":"String","visibility":"Public","body":"@promoted"}},{"html_id":"purge_complete:String-instance-method","name":"purge_complete","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":194,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L194"},"def":{"name":"purge_complete","return_type":"String","visibility":"Public","body":"@purge_complete"}},{"html_id":"r9k_cooldown:String-instance-method","name":"r9k_cooldown","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":182,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L182"},"def":{"name":"r9k_cooldown","return_type":"String","visibility":"Public","body":"@r9k_cooldown"}},{"html_id":"ranked_info:String-instance-method","name":"ranked_info","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":149,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L149"},"def":{"name":"ranked_info","return_type":"String","visibility":"Public","body":"@ranked_info"}},{"html_id":"reason_prefix:String-instance-method","name":"reason_prefix","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":170,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L170"},"def":{"name":"reason_prefix","return_type":"String","visibility":"Public","body":"@reason_prefix"}},{"html_id":"registration_closed:String-instance-method","name":"registration_closed","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":20,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L20"},"def":{"name":"registration_closed","return_type":"String","visibility":"Public","body":"@registration_closed"}},{"html_id":"rejected_message:String-instance-method","name":"rejected_message","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":35,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L35"},"def":{"name":"rejected_message","return_type":"String","visibility":"Public","body":"@rejected_message"}},{"html_id":"rejoined:String-instance-method","name":"rejoined","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":11,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L11"},"def":{"name":"rejoined","return_type":"String","visibility":"Public","body":"@rejoined"}},{"html_id":"sign_spam:String-instance-method","name":"sign_spam","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":122,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L122"},"def":{"name":"sign_spam","return_type":"String","visibility":"Public","body":"@sign_spam"}},{"html_id":"spamming:String-instance-method","name":"spamming","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":119,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L119"},"def":{"name":"spamming","return_type":"String","visibility":"Public","body":"@spamming"}},{"html_id":"success:String-instance-method","name":"success","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":200,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L200"},"def":{"name":"success","return_type":"String","visibility":"Public","body":"@success"}},{"html_id":"toggle_debug:String-instance-method","name":"toggle_debug","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":83,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L83"},"def":{"name":"toggle_debug","return_type":"String","visibility":"Public","body":"@toggle_debug"}},{"html_id":"toggle_karma:String-instance-method","name":"toggle_karma","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":80,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L80"},"def":{"name":"toggle_karma","return_type":"String","visibility":"Public","body":"@toggle_karma"}},{"html_id":"tripcode_info:String-instance-method","name":"tripcode_info","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":137,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L137"},"def":{"name":"tripcode_info","return_type":"String","visibility":"Public","body":"@tripcode_info"}},{"html_id":"tripcode_set:String-instance-method","name":"tripcode_set","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":134,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L134"},"def":{"name":"tripcode_set","return_type":"String","visibility":"Public","body":"@tripcode_set"}},{"html_id":"tripcode_unset:String-instance-method","name":"tripcode_unset","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":140,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L140"},"def":{"name":"tripcode_unset","return_type":"String","visibility":"Public","body":"@tripcode_unset"}},{"html_id":"unoriginal_message:String-instance-method","name":"unoriginal_message","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":179,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L179"},"def":{"name":"unoriginal_message","return_type":"String","visibility":"Public","body":"@unoriginal_message"}},{"html_id":"upvote_spam:String-instance-method","name":"upvote_spam","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":125,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L125"},"def":{"name":"upvote_spam","return_type":"String","visibility":"Public","body":"@upvote_spam"}},{"html_id":"upvoted_own_message:String-instance-method","name":"upvoted_own_message","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":92,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L92"},"def":{"name":"upvoted_own_message","return_type":"String","visibility":"Public","body":"@upvoted_own_message"}},{"html_id":"user_count:String-instance-method","name":"user_count","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":158,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L158"},"def":{"name":"user_count","return_type":"String","visibility":"Public","body":"@user_count"}},{"html_id":"user_count_full:String-instance-method","name":"user_count_full","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":161,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L161"},"def":{"name":"user_count_full","return_type":"String","visibility":"Public","body":"@user_count_full"}},{"html_id":"user_info:String-instance-method","name":"user_info","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":143,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L143"},"def":{"name":"user_info","return_type":"String","visibility":"Public","body":"@user_info"}},{"html_id":"username_reveal:String-instance-method","name":"username_reveal","abstract":false,"location":{"filename":"src/privateparlor/locale/replies.cr","line_number":116,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/locale/replies.cr#L116"},"def":{"name":"username_reveal","return_type":"String","visibility":"Public","body":"@username_reveal"}}]},{"html_id":"privateparlor/Robot9000","path":"Robot9000.html","kind":"module","full_name":"Robot9000","name":"Robot9000","abstract":false,"locations":[{"filename":"src/privateparlor/robot9000.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/robot9000.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"privateparlor/Robot9000","kind":"module","full_name":"Robot9000","name":"Robot9000"}],"instance_methods":[{"html_id":"add_file_id(db:DB::Database,id:String):Nil-instance-method","name":"add_file_id","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(db : DB::Database, id : String) : Nil","args_html":"(db : DB::Database, id : String) : Nil","location":{"filename":"src/privateparlor/robot9000.cr","line_number":126,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/robot9000.cr#L126"},"def":{"name":"add_file_id","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"begin\n  db.exec(\"INSERT INTO file_id VALUES (?)\", id)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    add_file_id(db, id)\n  end\nend"}},{"html_id":"add_line(db:DB::Database,text:String):Nil-instance-method","name":"add_line","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(db : DB::Database, text : String) : Nil","args_html":"(db : DB::Database, text : String) : Nil","location":{"filename":"src/privateparlor/robot9000.cr","line_number":111,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/robot9000.cr#L111"},"def":{"name":"add_line","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"begin\n  db.exec(\"INSERT INTO text VALUES (?)\", text)\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    add_line(db, text)\n  end\nend"}},{"html_id":"allow_text?(text:String,ranges:Array(Range(Int32,Int32))):Bool-instance-method","name":"allow_text?","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ranges","external_name":"ranges","restriction":"Array(Range(Int32, Int32))"}],"args_string":"(text : String, ranges : Array(Range(Int32, Int32))) : Bool","args_html":"(text : String, ranges : Array(Range(Int32, Int32))) : Bool","location":{"filename":"src/privateparlor/robot9000.cr","line_number":38,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/robot9000.cr#L38"},"def":{"name":"allow_text?","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"ranges","external_name":"ranges","restriction":"Array(Range(Int32, Int32))"}],"return_type":"Bool","visibility":"Public","body":"if text.empty?\n  return true\nend\nif text.codepoints.any? do |codepoint|\n  ranges.none? do |range|\n    range.includes?(codepoint)\n  end\nend\n  return false\nend\ntrue\n"}},{"html_id":"ensure_r9k_schema(db:DB::Database,text:Bool|Nil,media:Bool|Nil):Nil-instance-method","name":"ensure_r9k_schema","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"text","external_name":"text","restriction":"Bool | ::Nil"},{"name":"media","external_name":"media","restriction":"Bool | ::Nil"}],"args_string":"(db : DB::Database, text : Bool | Nil, media : Bool | Nil) : Nil","args_html":"(db : DB::Database, text : Bool | Nil, media : Bool | Nil) : Nil","location":{"filename":"src/privateparlor/robot9000.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/robot9000.cr#L4"},"def":{"name":"ensure_r9k_schema","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"text","external_name":"text","restriction":"Bool | ::Nil"},{"name":"media","external_name":"media","restriction":"Bool | ::Nil"}],"return_type":"Nil","visibility":"Public","body":"begin\n  if text\n    db.exec(\"\\n      CREATE TABLE IF NOT EXISTS text (\\n        line TEXT NOT NULL,\\n        PRIMARY KEY (line)\\n      )\\n      \")\n  end\n  if media\n    db.exec(\"\\n      CREATE TABLE IF NOT EXISTS file_id (\\n        id TEXT NOT NULL,\\n        PRIMARY KEY (id)\\n      )\\n      \")\n  end\nrescue ex : SQLite3::Exception\n  if ex.code == 5\n    sleep(10.milliseconds)\n    ensure_r9k_schema(db, text, media)\n  end\nend"}},{"html_id":"get_album_file_id(message:Tourmaline::Message):String|Nil-instance-method","name":"get_album_file_id","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"args_string":"(message : Tourmaline::Message) : String | Nil","args_html":"(message : Tourmaline::Message) : String | Nil","location":{"filename":"src/privateparlor/robot9000.cr","line_number":93,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/robot9000.cr#L93"},"def":{"name":"get_album_file_id","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"return_type":"String | ::Nil","visibility":"Public","body":"if media = message.photo.last?\nelse\n  if media = message.video\n  else\n    if media = message.audio\n    else\n      if media = message.document\n      else\n        return\n      end\n    end\n  end\nend\nmedia.file_unique_id\n"}},{"html_id":"get_media_file_id(message:Tourmaline::Message):String|Nil-instance-method","name":"get_media_file_id","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"args_string":"(message : Tourmaline::Message) : String | Nil","args_html":"(message : Tourmaline::Message) : String | Nil","location":{"filename":"src/privateparlor/robot9000.cr","line_number":78,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/robot9000.cr#L78"},"def":{"name":"get_media_file_id","args":[{"name":"message","external_name":"message","restriction":"Tourmaline::Message"}],"return_type":"String | ::Nil","visibility":"Public","body":"if media = message.animation\nelse\n  if media = message.audio\n  else\n    if media = message.document\n    else\n      if media = message.video\n      else\n        if media = message.video_note\n        else\n          if media = message.voice\n          else\n            if media = message.photo.last?\n            else\n              return\n            end\n          end\n        end\n      end\n    end\n  end\nend\nmedia.file_unique_id\n"}},{"html_id":"remove_links(text:String,entities:Array(Tourmaline::MessageEntity)):String-instance-method","name":"remove_links","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","location":{"filename":"src/privateparlor/robot9000.cr","line_number":28,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/robot9000.cr#L28"},"def":{"name":"remove_links","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"String","visibility":"Public","body":"entities.reverse.each do |entity|\n  if entity.type == \"url\"\n    text = text.delete_at(entity.offset, entity.length)\n  end\nend\ntext\n"}},{"html_id":"strip_text(text:String,entities:Array(Tourmaline::MessageEntity)):String-instance-method","name":"strip_text","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"args_string":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","args_html":"(text : String, entities : Array(Tourmaline::MessageEntity)) : String","location":{"filename":"src/privateparlor/robot9000.cr","line_number":50,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/robot9000.cr#L50"},"def":{"name":"strip_text","args":[{"name":"text","external_name":"text","restriction":"String"},{"name":"entities","external_name":"entities","restriction":"Array(Tourmaline::MessageEntity)"}],"return_type":"String","visibility":"Public","body":"text = remove_links(text, entities)\ntext, _ = Tourmaline::HTMLParser.new.parse(text)\ntext = text.downcase\ntext = text.gsub(/\\/\\w+\\s/, \"\")\ntext = text.gsub(/\\s@\\w+\\s/, \" \")\ntext = text.gsub(/[[:punct:]]|—/, \"\")\ntext = text.gsub(/(?![\\d])(\\w|\\w{1,})\\1{2,}/) do |_, match|\n  match[1]\nend\ntext = text.gsub(/>>>\\/\\w+\\//, \"\")\ntext = text.gsub(/\\s{2,}|\\n/, \" \")\ntext.strip\n"}},{"html_id":"unoriginal_media?(db:DB::Database,id:String):Bool|Nil-instance-method","name":"unoriginal_media?","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(db : DB::Database, id : String) : Bool | Nil","args_html":"(db : DB::Database, id : String) : Bool | Nil","location":{"filename":"src/privateparlor/robot9000.cr","line_number":120,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/robot9000.cr#L120"},"def":{"name":"unoriginal_media?","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"db.query_one?(\"SELECT 1 FROM file_id WHERE id = ?\", id) do\n  true\nend"}},{"html_id":"unoriginal_text?(db:DB::Database,text:String):Bool|Nil-instance-method","name":"unoriginal_text?","abstract":false,"args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(db : DB::Database, text : String) : Bool | Nil","args_html":"(db : DB::Database, text : String) : Bool | Nil","location":{"filename":"src/privateparlor/robot9000.cr","line_number":105,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/robot9000.cr#L105"},"def":{"name":"unoriginal_text?","args":[{"name":"db","external_name":"db","restriction":"DB::Database"},{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Bool | ::Nil","visibility":"Public","body":"db.query_one?(\"SELECT 1 FROM text WHERE line = ?\", text) do\n  true\nend"}}]},{"html_id":"privateparlor/SpamScoreHandler","path":"SpamScoreHandler.html","kind":"class","full_name":"SpamScoreHandler","name":"SpamScoreHandler","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/privateparlor/spam_score_handler.cr","line_number":3,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L3"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"privateparlor/YAML/Serializable","kind":"module","full_name":"YAML::Serializable","name":"Serializable"}],"constructors":[{"html_id":"new(ctx:YAML::ParseContext,node:YAML::Nodes::Node)-class-method","name":"new","abstract":false,"args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"args_string":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","args_html":"(ctx : YAML::ParseContext, node : YAML::Nodes::Node)","location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L4"},"def":{"name":"new","args":[{"name":"ctx","external_name":"ctx","restriction":"YAML::ParseContext"},{"name":"node","external_name":"node","restriction":"YAML::Nodes::Node"}],"visibility":"Public","body":"new_from_yaml_node(ctx, node)"}}],"instance_methods":[{"html_id":"calculate_spam_score_text(text:String):Float32-instance-method","name":"calculate_spam_score_text","abstract":false,"args":[{"name":"text","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Float32","args_html":"(text : String) : Float32","location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":161,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L161"},"def":{"name":"calculate_spam_score_text","args":[{"name":"text","external_name":"text","restriction":"String"}],"return_type":"Float32","visibility":"Public","body":"(score_base_message + (text.size * score_text_character)) + ((text.count('\\n')) * score_text_linebreak)"}},{"html_id":"downvote_last_used:Hash(Int64,Time)-instance-method","name":"downvote_last_used","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":9,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L9"},"def":{"name":"downvote_last_used","return_type":"Hash(Int64, Time)","visibility":"Public","body":"@downvote_last_used"}},{"html_id":"expire-instance-method","name":"expire","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":165,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L165"},"def":{"name":"expire","visibility":"Public","body":"@scores.each do |user, score|\n  if (score - 1) <= 0\n    @scores.delete(user)\n  else\n    @scores[user] = score - 1\n  end\nend"}},{"html_id":"score_animation:Float32-instance-method","name":"score_animation","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":27,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L27"},"def":{"name":"score_animation","return_type":"Float32","visibility":"Public","body":"@score_animation"}},{"html_id":"score_audio:Float32-instance-method","name":"score_audio","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":30,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L30"},"def":{"name":"score_audio","return_type":"Float32","visibility":"Public","body":"@score_audio"}},{"html_id":"score_base_message:Float32-instance-method","name":"score_base_message","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":18,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L18"},"def":{"name":"score_base_message","return_type":"Float32","visibility":"Public","body":"@score_base_message"}},{"html_id":"score_basketball:Float32-instance-method","name":"score_basketball","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":66,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L66"},"def":{"name":"score_basketball","return_type":"Float32","visibility":"Public","body":"@score_basketball"}},{"html_id":"score_bowling:Float32-instance-method","name":"score_bowling","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":75,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L75"},"def":{"name":"score_bowling","return_type":"Float32","visibility":"Public","body":"@score_bowling"}},{"html_id":"score_contact:Float32-instance-method","name":"score_contact","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":84,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L84"},"def":{"name":"score_contact","return_type":"Float32","visibility":"Public","body":"@score_contact"}},{"html_id":"score_dart:Float32-instance-method","name":"score_dart","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":63,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L63"},"def":{"name":"score_dart","return_type":"Float32","visibility":"Public","body":"@score_dart"}},{"html_id":"score_dice:Float32-instance-method","name":"score_dice","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":60,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L60"},"def":{"name":"score_dice","return_type":"Float32","visibility":"Public","body":"@score_dice"}},{"html_id":"score_document:Float32-instance-method","name":"score_document","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":33,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L33"},"def":{"name":"score_document","return_type":"Float32","visibility":"Public","body":"@score_document"}},{"html_id":"score_forwarded_message:Float32-instance-method","name":"score_forwarded_message","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":54,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L54"},"def":{"name":"score_forwarded_message","return_type":"Float32","visibility":"Public","body":"@score_forwarded_message"}},{"html_id":"score_location:Float32-instance-method","name":"score_location","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":81,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L81"},"def":{"name":"score_location","return_type":"Float32","visibility":"Public","body":"@score_location"}},{"html_id":"score_media_group:Float32-instance-method","name":"score_media_group","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":48,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L48"},"def":{"name":"score_media_group","return_type":"Float32","visibility":"Public","body":"@score_media_group"}},{"html_id":"score_photo:Float32-instance-method","name":"score_photo","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":45,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L45"},"def":{"name":"score_photo","return_type":"Float32","visibility":"Public","body":"@score_photo"}},{"html_id":"score_poll:Float32-instance-method","name":"score_poll","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":51,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L51"},"def":{"name":"score_poll","return_type":"Float32","visibility":"Public","body":"@score_poll"}},{"html_id":"score_slot_machine:Float32-instance-method","name":"score_slot_machine","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":72,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L72"},"def":{"name":"score_slot_machine","return_type":"Float32","visibility":"Public","body":"@score_slot_machine"}},{"html_id":"score_soccerball:Float32-instance-method","name":"score_soccerball","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":69,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L69"},"def":{"name":"score_soccerball","return_type":"Float32","visibility":"Public","body":"@score_soccerball"}},{"html_id":"score_sticker:Float32-instance-method","name":"score_sticker","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":57,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L57"},"def":{"name":"score_sticker","return_type":"Float32","visibility":"Public","body":"@score_sticker"}},{"html_id":"score_text_character:Float32-instance-method","name":"score_text_character","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":21,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L21"},"def":{"name":"score_text_character","return_type":"Float32","visibility":"Public","body":"@score_text_character"}},{"html_id":"score_text_linebreak:Float32-instance-method","name":"score_text_linebreak","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":24,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L24"},"def":{"name":"score_text_linebreak","return_type":"Float32","visibility":"Public","body":"@score_text_linebreak"}},{"html_id":"score_venue:Float32-instance-method","name":"score_venue","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":78,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L78"},"def":{"name":"score_venue","return_type":"Float32","visibility":"Public","body":"@score_venue"}},{"html_id":"score_video:Float32-instance-method","name":"score_video","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":36,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L36"},"def":{"name":"score_video","return_type":"Float32","visibility":"Public","body":"@score_video"}},{"html_id":"score_video_note:Float32-instance-method","name":"score_video_note","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":39,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L39"},"def":{"name":"score_video_note","return_type":"Float32","visibility":"Public","body":"@score_video_note"}},{"html_id":"score_voice:Float32-instance-method","name":"score_voice","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":42,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L42"},"def":{"name":"score_voice","return_type":"Float32","visibility":"Public","body":"@score_voice"}},{"html_id":"scores:Hash(Int64,Float32)-instance-method","name":"scores","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L6"},"def":{"name":"scores","return_type":"Hash(Int64, Float32)","visibility":"Public","body":"@scores"}},{"html_id":"sign_last_used:Hash(Int64,Time)-instance-method","name":"sign_last_used","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":7,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L7"},"def":{"name":"sign_last_used","return_type":"Hash(Int64, Time)","visibility":"Public","body":"@sign_last_used"}},{"html_id":"spam_limit:Float32-instance-method","name":"spam_limit","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":12,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L12"},"def":{"name":"spam_limit","return_type":"Float32","visibility":"Public","body":"@spam_limit"}},{"html_id":"spam_limit_hit:Float32-instance-method","name":"spam_limit_hit","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":15,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L15"},"def":{"name":"spam_limit_hit","return_type":"Float32","visibility":"Public","body":"@spam_limit_hit"}},{"html_id":"spammy?(user:Int64,increment:Float32):Bool-instance-method","name":"spammy?","doc":"Check if user's spam score triggers the spam filter\n\nReturns true if score is greater than spam limit, false otherwise.","summary":"<p>Check if user's spam score triggers the spam filter</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Int64"},{"name":"increment","external_name":"increment","restriction":"Float32"}],"args_string":"(user : Int64, increment : Float32) : Bool","args_html":"(user : Int64, increment : Float32) : Bool","location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":89,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L89"},"def":{"name":"spammy?","args":[{"name":"user","external_name":"user","restriction":"Int64"},{"name":"increment","external_name":"increment","restriction":"Float32"}],"return_type":"Bool","visibility":"Public","body":"if score = @scores[user]?\nelse\n  score = 0\nend\nif score > spam_limit\n  return true\nelse\n  if (score + increment) > spam_limit\n    @scores[user] = spam_limit_hit\n    return (score + increment) >= spam_limit_hit\n  end\nend\n@scores[user] = score + increment\nfalse\n"}},{"html_id":"spammy_downvote?(user:Int64,interval:Int32):Bool-instance-method","name":"spammy_downvote?","doc":"Check if user has downvoted within an interval of time\n\nReturns true if so (user is downvoting too often), false otherwise.","summary":"<p>Check if user has downvoted within an interval of time</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Int64"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"args_string":"(user : Int64, interval : Int32) : Bool","args_html":"(user : Int64, interval : Int32) : Bool","location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":145,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L145"},"def":{"name":"spammy_downvote?","args":[{"name":"user","external_name":"user","restriction":"Int64"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"if interval == 0\nelse\n  if last_used = @downvote_last_used[user]?\n    if (Time.utc - last_used) < interval.seconds\n      return true\n    else\n      @downvote_last_used[user] = Time.utc\n    end\n  else\n    @downvote_last_used[user] = Time.utc\n  end\nend\nfalse\n"}},{"html_id":"spammy_sign?(user:Int64,interval:Int32):Bool-instance-method","name":"spammy_sign?","doc":"Check if user has signed within an interval of time\n\nReturns true if so (user is sign spamming), false otherwise.","summary":"<p>Check if user has signed within an interval of time</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Int64"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"args_string":"(user : Int64, interval : Int32) : Bool","args_html":"(user : Int64, interval : Int32) : Bool","location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":107,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L107"},"def":{"name":"spammy_sign?","args":[{"name":"user","external_name":"user","restriction":"Int64"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"if interval == 0\nelse\n  if last_used = @sign_last_used[user]?\n    if (Time.utc - last_used) < interval.seconds\n      return true\n    else\n      @sign_last_used[user] = Time.utc\n    end\n  else\n    @sign_last_used[user] = Time.utc\n  end\nend\nfalse\n"}},{"html_id":"spammy_upvote?(user:Int64,interval:Int32):Bool-instance-method","name":"spammy_upvote?","doc":"Check if user has upvoted within an interval of time\n\nReturns true if so (user is upvoting too often), false otherwise.","summary":"<p>Check if user has upvoted within an interval of time</p>","abstract":false,"args":[{"name":"user","external_name":"user","restriction":"Int64"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"args_string":"(user : Int64, interval : Int32) : Bool","args_html":"(user : Int64, interval : Int32) : Bool","location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":126,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L126"},"def":{"name":"spammy_upvote?","args":[{"name":"user","external_name":"user","restriction":"Int64"},{"name":"interval","external_name":"interval","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"if interval == 0\nelse\n  if last_used = @upvote_last_used[user]?\n    if (Time.utc - last_used) < interval.seconds\n      return true\n    else\n      @upvote_last_used[user] = Time.utc\n    end\n  else\n    @upvote_last_used[user] = Time.utc\n  end\nend\nfalse\n"}},{"html_id":"upvote_last_used:Hash(Int64,Time)-instance-method","name":"upvote_last_used","abstract":false,"location":{"filename":"src/privateparlor/spam_score_handler.cr","line_number":8,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/privateparlor/spam_score_handler.cr#L8"},"def":{"name":"upvote_last_used","return_type":"Hash(Int64, Time)","visibility":"Public","body":"@upvote_last_used"}}]},{"html_id":"privateparlor/User","path":"User.html","kind":"class","full_name":"User","name":"User","abstract":false,"superclass":{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"privateparlor/DB/Mappable","kind":"module","full_name":"DB::Mappable","name":"Mappable"},{"html_id":"privateparlor/DB/Serializable","kind":"module","full_name":"DB::Serializable","name":"Serializable"},{"html_id":"privateparlor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"privateparlor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/management/user.cr","line_number":1,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L1"}],"repository_name":"privateparlor","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"privateparlor/DB/Mappable","kind":"module","full_name":"DB::Mappable","name":"Mappable"},{"html_id":"privateparlor/DB/Serializable","kind":"module","full_name":"DB::Serializable","name":"Serializable"}],"class_methods":[{"html_id":"from_rs(rs:DB::ResultSet)-class-method","name":"from_rs","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : DB::ResultSet)","args_html":"(rs : DB::ResultSet)","location":{"filename":"src/management/user.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L2"},"def":{"name":"from_rs","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"begin\n  objs = Array(self).new\n  rs.each do\n    objs << (self.new(rs))\n  end\n  objs\nensure\n  rs.close\nend"}}],"constructors":[{"html_id":"new(rs:DB::ResultSet)-class-method","name":"new","abstract":false,"args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"args_string":"(rs : DB::ResultSet)","args_html":"(rs : DB::ResultSet)","location":{"filename":"src/management/user.cr","line_number":2,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L2"},"def":{"name":"new","args":[{"name":"rs","external_name":"rs","restriction":"::DB::ResultSet"}],"visibility":"Public","body":"instance = allocate\ninstance.initialize(__set_for_db_serializable: rs)\nif instance.responds_to?(:finalize)\n  GC.add_finalizer(instance)\nend\ninstance\n"}},{"html_id":"new(id:Int64,username:Nil|String=nil,realname:String=\"\",rank:Int32=0,joined:Time=Time.utc,left:Time|Nil=nil,last_active:Time=Time.utc,cooldown_until:Time|Nil=nil,blacklist_reason:Nil|String=nil,warnings:Int32=0,warn_expiry:Time|Nil=nil,karma:Int32=0,hide_karma:Bool|Nil=false,debug_enabled:Bool|Nil=false,tripcode:Nil|String=nil)-class-method","name":"new","doc":"Create an instance of `User`","summary":"<p>Create an instance of <code><a href=\"User.html\">User</a></code></p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::Int64"},{"name":"username","default_value":"nil","external_name":"username","restriction":"::Nil | ::String"},{"name":"realname","default_value":"\"\"","external_name":"realname","restriction":"::String"},{"name":"rank","default_value":"0","external_name":"rank","restriction":"::Int32"},{"name":"joined","default_value":"Time.utc","external_name":"joined","restriction":"::Time"},{"name":"left","default_value":"nil","external_name":"left","restriction":"::Time | ::Nil"},{"name":"last_active","default_value":"Time.utc","external_name":"last_active","restriction":"::Time"},{"name":"cooldown_until","default_value":"nil","external_name":"cooldown_until","restriction":"::Time | ::Nil"},{"name":"blacklist_reason","default_value":"nil","external_name":"blacklist_reason","restriction":"::Nil | ::String"},{"name":"warnings","default_value":"0","external_name":"warnings","restriction":"::Int32"},{"name":"warn_expiry","default_value":"nil","external_name":"warn_expiry","restriction":"::Time | ::Nil"},{"name":"karma","default_value":"0","external_name":"karma","restriction":"::Int32"},{"name":"hide_karma","default_value":"false","external_name":"hide_karma","restriction":"::Bool | ::Nil"},{"name":"debug_enabled","default_value":"false","external_name":"debug_enabled","restriction":"::Bool | ::Nil"},{"name":"tripcode","default_value":"nil","external_name":"tripcode","restriction":"::Nil | ::String"}],"args_string":"(id : Int64, username : Nil | String = nil, realname : String = \"\", rank : Int32 = 0, joined : Time = Time.utc, left : Time | Nil = nil, last_active : Time = Time.utc, cooldown_until : Time | Nil = nil, blacklist_reason : Nil | String = nil, warnings : Int32 = 0, warn_expiry : Time | Nil = nil, karma : Int32 = 0, hide_karma : Bool | Nil = false, debug_enabled : Bool | Nil = false, tripcode : Nil | String = nil)","args_html":"(id : Int64, username : Nil | String = <span class=\"n\">nil</span>, realname : String = <span class=\"s\">&quot;&quot;</span>, rank : Int32 = <span class=\"n\">0</span>, joined : Time = <span class=\"t\">Time</span>.utc, left : Time | Nil = <span class=\"n\">nil</span>, last_active : Time = <span class=\"t\">Time</span>.utc, cooldown_until : Time | Nil = <span class=\"n\">nil</span>, blacklist_reason : Nil | String = <span class=\"n\">nil</span>, warnings : Int32 = <span class=\"n\">0</span>, warn_expiry : Time | Nil = <span class=\"n\">nil</span>, karma : Int32 = <span class=\"n\">0</span>, hide_karma : Bool | Nil = <span class=\"n\">false</span>, debug_enabled : Bool | Nil = <span class=\"n\">false</span>, tripcode : Nil | String = <span class=\"n\">nil</span>)","location":{"filename":"src/management/user.cr","line_number":27,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L27"},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::Int64"},{"name":"username","default_value":"nil","external_name":"username","restriction":"::Nil | ::String"},{"name":"realname","default_value":"\"\"","external_name":"realname","restriction":"::String"},{"name":"rank","default_value":"0","external_name":"rank","restriction":"::Int32"},{"name":"joined","default_value":"Time.utc","external_name":"joined","restriction":"::Time"},{"name":"left","default_value":"nil","external_name":"left","restriction":"::Time | ::Nil"},{"name":"last_active","default_value":"Time.utc","external_name":"last_active","restriction":"::Time"},{"name":"cooldown_until","default_value":"nil","external_name":"cooldown_until","restriction":"::Time | ::Nil"},{"name":"blacklist_reason","default_value":"nil","external_name":"blacklist_reason","restriction":"::Nil | ::String"},{"name":"warnings","default_value":"0","external_name":"warnings","restriction":"::Int32"},{"name":"warn_expiry","default_value":"nil","external_name":"warn_expiry","restriction":"::Time | ::Nil"},{"name":"karma","default_value":"0","external_name":"karma","restriction":"::Int32"},{"name":"hide_karma","default_value":"false","external_name":"hide_karma","restriction":"::Bool | ::Nil"},{"name":"debug_enabled","default_value":"false","external_name":"debug_enabled","restriction":"::Bool | ::Nil"},{"name":"tripcode","default_value":"nil","external_name":"tripcode","restriction":"::Nil | ::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, username, realname, rank, joined, left, last_active, cooldown_until, blacklist_reason, warnings, warn_expiry, karma, hide_karma, debug_enabled, tripcode)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"blacklist_reason:String|Nil-instance-method","name":"blacklist_reason","abstract":false,"location":{"filename":"src/management/user.cr","line_number":15,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L15"},"def":{"name":"blacklist_reason","return_type":"String | ::Nil","visibility":"Public","body":"@blacklist_reason"}},{"html_id":"cooldown_until:Time|Nil-instance-method","name":"cooldown_until","abstract":false,"location":{"filename":"src/management/user.cr","line_number":13,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L13"},"def":{"name":"cooldown_until","return_type":"Time | ::Nil","visibility":"Public","body":"@cooldown_until"}},{"html_id":"debug_enabled:Bool|Nil-instance-method","name":"debug_enabled","abstract":false,"location":{"filename":"src/management/user.cr","line_number":23,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L23"},"def":{"name":"debug_enabled","return_type":"Bool | ::Nil","visibility":"Public","body":"@debug_enabled"}},{"html_id":"hide_karma:Bool|Nil-instance-method","name":"hide_karma","abstract":false,"location":{"filename":"src/management/user.cr","line_number":21,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L21"},"def":{"name":"hide_karma","return_type":"Bool | ::Nil","visibility":"Public","body":"@hide_karma"}},{"html_id":"id:Int64-instance-method","name":"id","abstract":false,"location":{"filename":"src/management/user.cr","line_number":4,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L4"},"def":{"name":"id","return_type":"Int64","visibility":"Public","body":"@id"}},{"html_id":"joined:Time-instance-method","name":"joined","abstract":false,"location":{"filename":"src/management/user.cr","line_number":8,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L8"},"def":{"name":"joined","return_type":"Time","visibility":"Public","body":"@joined"}},{"html_id":"karma:Int32-instance-method","name":"karma","abstract":false,"location":{"filename":"src/management/user.cr","line_number":19,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L19"},"def":{"name":"karma","return_type":"Int32","visibility":"Public","body":"@karma"}},{"html_id":"last_active:Time-instance-method","name":"last_active","abstract":false,"location":{"filename":"src/management/user.cr","line_number":11,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L11"},"def":{"name":"last_active","return_type":"Time","visibility":"Public","body":"@last_active"}},{"html_id":"left:Time|Nil-instance-method","name":"left","abstract":false,"location":{"filename":"src/management/user.cr","line_number":9,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L9"},"def":{"name":"left","return_type":"Time | ::Nil","visibility":"Public","body":"@left"}},{"html_id":"rank:Int32-instance-method","name":"rank","abstract":false,"location":{"filename":"src/management/user.cr","line_number":7,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L7"},"def":{"name":"rank","return_type":"Int32","visibility":"Public","body":"@rank"}},{"html_id":"realname:String-instance-method","name":"realname","abstract":false,"location":{"filename":"src/management/user.cr","line_number":6,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L6"},"def":{"name":"realname","return_type":"String","visibility":"Public","body":"@realname"}},{"html_id":"to_s:String-instance-method","name":"to_s","doc":"Returns a nicely readable and concise string representation of this object,\ntypically intended for users.\n\nThis method should usually **not** be overridden. It delegates to\n`#to_s(IO)` which can be overridden for custom implementations.\n\nAlso see `#inspect`.","summary":"<p>Returns a nicely readable and concise string representation of this object, typically intended for users.</p>","abstract":false,"location":{"filename":"src/management/user.cr","line_number":46,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L46"},"def":{"name":"to_s","return_type":"String","visibility":"Public","body":"\"ID: #{@id}, Username: #{@username ? @username : \"N/A\"}, Realname: #{@realname.empty? ? \"N/A\" : @realname}, Rank: #{@rank}, Joined: #{@joined}, Left: #{@left ? @left : \"N/A\"}, Last Active: #{@last_active}, Cooldown Until: #{@cooldown_until ? @cooldown_until : \"N/A\"}, Blacklist Reason: #{@blacklist_reason ? @blacklist_reason : \"N/A\"}, Warnings: #{@warnings}, Warn Expiry: #{@warn_expiry ? @warn_expiry : \"N/A\"}, Karma: #{@karma}, Hide Karma: #{@hide_karma}, Debug Enabled: #{@debug_enabled}, Tripcode: #{@tripcode ? @tripcode : \"N/A\"}\""}},{"html_id":"tripcode:String|Nil-instance-method","name":"tripcode","abstract":false,"location":{"filename":"src/management/user.cr","line_number":24,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L24"},"def":{"name":"tripcode","return_type":"String | ::Nil","visibility":"Public","body":"@tripcode"}},{"html_id":"username:String|Nil-instance-method","name":"username","abstract":false,"location":{"filename":"src/management/user.cr","line_number":5,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L5"},"def":{"name":"username","return_type":"String | ::Nil","visibility":"Public","body":"@username"}},{"html_id":"warn_expiry:Time|Nil-instance-method","name":"warn_expiry","abstract":false,"location":{"filename":"src/management/user.cr","line_number":18,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L18"},"def":{"name":"warn_expiry","return_type":"Time | ::Nil","visibility":"Public","body":"@warn_expiry"}},{"html_id":"warnings:Int32-instance-method","name":"warnings","abstract":false,"location":{"filename":"src/management/user.cr","line_number":16,"url":"https://github.com/Charibdys/Private-Parlor/blob/63076d0896f2830c800abea7cbe64385adbc1501/src/management/user.cr#L16"},"def":{"name":"warnings","return_type":"Int32","visibility":"Public","body":"@warnings"}}]}]}}